{
    "pipes": [
        {
            "name": "FilterArrayPipe",
            "id": "pipe-FilterArrayPipe-6a50658d33c3bd383e2f54cae75cf47e",
            "file": "projects/report-builder/src/app/common/filter-array.pipe.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "items",
                            "type": "Array<any>"
                        },
                        {
                            "name": "field",
                            "type": "string"
                        },
                        {
                            "name": "searchText",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any[]",
                    "typeParameters": [],
                    "line": 7,
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "Array<any>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "field",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "searchText",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "filterArray",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\nimport { isUndefined, isArray, isNull } from 'util';\r\n@Pipe({\r\n  name: 'filterArray'\r\n})\r\nexport class FilterArrayPipe implements PipeTransform {\r\n  transform(items: Array<any>, field: string, searchText: string): any[] {\r\n    if (isUndefined(items) || isNull(items) || !isArray(items) || items.length === 0) {return []; }\r\n    if (isUndefined(field) || isNull(field) || field === '') {return items; }\r\n    if (isUndefined(searchText) || isNull(searchText) || searchText === '') {return items; }\r\n    if (!items[0].hasOwnProperty(field)) {return items; }\r\n    searchText = searchText.toLowerCase();\r\n    return items.filter( it => {\r\n      return (it[field]).toLowerCase().includes(searchText);\r\n      });\r\n    }\r\n}\r\n"
        },
        {
            "name": "PurifyHTMLPipe",
            "id": "pipe-PurifyHTMLPipe-5b0d62c3455c38155ff0098602bdea94",
            "file": "projects/report-builder/src/app/common/purify-html.pipe.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 11,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "purifyHTML",
            "sourceCode": "import { Pipe, PipeTransform, SecurityContext } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n\n@Pipe({\n  name: 'purifyHTML'\n})\nexport class PurifyHTMLPipe implements PipeTransform {\n  constructor(private sanitizer: DomSanitizer) {}\n\n  transform(value: any): unknown {\n    return this.sanitizer.sanitize( SecurityContext.HTML,value);\n  }\n\n}\n"
        }
    ],
    "interfaces": [
        {
            "name": "DataColumn",
            "id": "interface-DataColumn-3f635220d58f15bbac368629a84a3cc0",
            "file": "projects/wri-holdings/src/lib/wri-holdings.service.ts",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { of, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { HttpParams, HttpHeaders, HttpClient, HttpErrorResponse } from '@angular/common/http';\n\nexport interface Selection {\n  value: string;\n  viewValue: string;\n}\n\nexport interface DataColumn extends Selection {\n  parentValue?: string;\n  isNumber?: boolean;\n  isAdditive?: boolean;\n}\n\nexport class AvailableColumnOptions {\n  static columnOptions: DataColumn[] = [\n    {value: 'quantity', viewValue: 'Quantity', parentValue: \"holding\", isNumber: true},\n    {value: 'price', viewValue: 'Price ($)', parentValue: \"holding\", isNumber: true},\n    {value: 'value', viewValue: 'Value ($)', parentValue: \"holding\", isNumber: true, isAdditive: true},\n    {value: 'ror', viewValue: 'Rate of Return', parentValue: \"holding\", isNumber: true},\n    {value: 'yield', viewValue: 'Current Yield (%)', parentValue: \"holding\", isNumber: true},\n    {value: 'percentageOfAccount', viewValue: '% of Account', parentValue: \"holding\", isNumber: true, isAdditive: true},\n    {value: 'estimatedAnnualIncome', viewValue: 'Estimated Annual Income ($)', parentValue: \"holding\", isNumber: true, isAdditive: true},\n    {value: 'cost', viewValue: 'Cost ($)', parentValue: \"holding\", isNumber: true, isAdditive: true},\n    {value: 'unrealizedGainLoss', viewValue: 'Unrealized Gain/Loss ($)', parentValue: \"holding\", isNumber: true, isAdditive: true},\n    {value: 'beginningValue', viewValue: 'Beginning Value', parentValue: \"holding\", isNumber: true, isAdditive: true},\n    {value: 'netContribution', viewValue: 'Net Contribution', parentValue: \"holding\", isNumber: true, isAdditive: true},\n    {value: 'changeInValue', viewValue: 'Change In Value', parentValue: \"holding\", isNumber: true, isAdditive: true},\n    {value: 'assetName', viewValue: 'Asset Name', parentValue: \"asset\"},\n    {value: 'ticker', viewValue: 'Ticker Synbol', parentValue: \"asset\"},\n    {value: 'mgmtCompany', viewValue: 'Management Company', parentValue: \"asset\"},\n    {value: 'morningstarRating', viewValue: 'Morningstar Rating', parentValue: \"asset\"},\n    {value: 'assetType', viewValue: 'Asset Type', parentValue: \"asset\"},\n    {value: 'assetClass1Name', viewValue: 'ACL 1 Name', parentValue: \"assetClass1\"},\n    {value: 'assetClass2Name', viewValue: 'ACL 2 Name', parentValue: \"assetClass2\"},\n    {value: 'assetClass3Name', viewValue: 'ACL 3 Name', parentValue: \"assetClass3\"},\n    {value: 'investorId', viewValue: 'Investor ID', parentValue: \"investor\"},\n    {value: 'investorName', viewValue: 'Investor Name', parentValue: \"investor\"},\n    {value: 'acctNum', viewValue: 'Account Number', parentValue: \"account\"},\n    {value: 'acctName', viewValue: 'Account Name', parentValue: \"account\"},\n    {value: 'combinedAccountName', viewValue: 'Account Name / Manager / Style Name as applicable', parentValue: \"account\"},\n    {value: 'mgrName', viewValue: 'Manager Name', parentValue: \"account\"},\n    {value: 'productName', viewValue: 'Product Name', parentValue: \"account\"},\n    {value: 'style', viewValue: 'Style', parentValue: \"account\"},\n    {value: 'accountType', viewValue: 'Account Type', parentValue: \"account\"},\n    {value: 'taxStatus', viewValue: 'Tax Status', parentValue: \"account\"},\n  ];\n}\n\nexport class Category {\n  categoryId: string;\n  categoryPrimaryKey: any;\n  subCategories: Category[] = [];\n  categoryData = [];\n  summaryData = {};\n}\n\nexport interface HoldingsCustomizationOptions {\n  category1?: string;\n  category2?: string;\n  category3?: string;\n  category1Data?: Array<DataColumn>;\n  category2Data?: Array<DataColumn>;\n  category3Data?: Array<DataColumn>;\n  dataColumns?: Array<DataColumn>;\n  showInsuranceData?: boolean;\n}\n\n\nexport class CategorizedData {\n  isCategorized: boolean;\n  uncategorizedData: Category;\n  categorizedData: Category[];\n}\n\n\n@Injectable()\nexport class WRIHoldingsService {\n  jwtToken: string = '';\n  serviceURL: string = '';\n  advisorID: string = '';\n  private dataSet1 = [];\n  private dataSet2 = [];\n\n  constructor(private http: HttpClient) {\n    const pageData = (<any> window).AppSettings;\n    if (pageData && pageData.jwtToken) this.jwtToken = pageData.jwtToken;\n    if (pageData && pageData.serviceBusURL) {\n      this.serviceURL = pageData.serviceBusURL + '/report-builder-service';\n    }\n    else {\n      this.serviceURL = 'https://dummylocation.com/report-builder-service';\n    }\n    if (pageData && pageData.advisorID) this.advisorID = pageData.advisorID;\n  }\n\n  getData(options: HoldingsCustomizationOptions, dummyData: boolean = false) {\n    if (dummyData) {\n      return of(this.getDummyData(options));\n    }\n\n    let postParams = new HttpParams();\n    postParams.append('srcDefConst','reportBuilder');\n    postParams.append('pageMode','componentData');\n    postParams.append('formatType','html');\n\n    let headers = new HttpHeaders();\n    headers = headers.set('Content-Type', 'application/json');\n    headers = headers.set('Authorization', `Bearer ${this.jwtToken}`);\n    headers = headers.set('X-JWT-Assertion', this.jwtToken);\n\n    const jsonRequestBody = {advisorTaxId: this.advisorID};\n    return this.http.post(this.serviceURL + '/get-default-reports-list-metadata', jsonRequestBody, {headers: headers})\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n  private handleError(error: HttpErrorResponse) {\n    return throwError(error.status);\n  }\n\n  getDummyData(options: HoldingsCustomizationOptions) {\n        // Dummy data setup.\n        this.dataSet1 = [\n          {quantity: 7318.06, price: 1.00, value: 7318.06, ror: 12.534, yield: 0   , percentageOfAccount: 0.31, estimatedAnnualIncome: 0,      unrealizedGainLoss: 0,        cost: 0,        beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Brokerage Money Market\", ticker:\"\", mgmtCompany: null, morningstarRating: \"5 star\", assetType: \"Stock\", assetClass1Name: \"Cash or Equivalents\", assetClass2Name: \"Growth\", assetClass3Name: \"Technology\", investorName: \"Sample Investor\", acctNum: \"03004721 000\", acctName: \"The Oliver Wendell\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Giftc Custodial IRA\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123456\", assetId: \"CUSIPv 12345\", assetClass1Id: \"ACL1 ID 1\", assetClass2Id: \"ACL2 ID 1\", assetClass3Id: \"ACL3 ID 1\" },\n          {quantity: 600, price: 50.94, value:  30564, ror: 12.5345365, yield: 1.88, percentageOfAccount: 1.29, estimatedAnnualIncome: 576.00, unrealizedGainLoss: 14534.99, cost: 16029.01, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Abbot Laboratories\", ticker:\"abt\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"Mutual Fund\", assetClass1Name: \"Mutual Fund\", assetClass2Name: \"Growth\", assetClass3Name: \"Technology\", investorName: \"Sample Investor\", acctNum: \"03004721 000\", acctName: \"The Oliver Wendell\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Giftc Custodial IRA\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123456\", assetId: \"CUSIPv 12346\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 1\", assetClass3Id: \"ACL3 ID 1\" },\n          {quantity: 200, price:132.82, value:  26564, ror: 12.5345365, yield: 2.44, percentageOfAccount: 1.12, estimatedAnnualIncome: 648.00, unrealizedGainLoss: 12219.86, cost: 14344.14, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Air Products & chemicals Inc\", ticker:\"apd\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"Mutual Fund\", assetClass1Name: \"Mutual Fund\", assetClass2Name: \"Growth\", assetClass3Name: \"Technology\", investorName: \"Sample Investor\", acctNum: \"03004721 000\", acctName: \"The Oliver Wendell\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Giftc Custodial IRA\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123456\", assetId: \"CUSIPv 12347\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 1\", assetClass3Id: \"ACL3 ID 1\" },\n          {quantity: 500, price: 29.36, value:  14680, ror: 12.5345365, yield: 2.04, percentageOfAccount: 0.62, estimatedAnnualIncome: 300.00, unrealizedGainLoss:  1096.30, cost: 13583.70, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Allison Transmission HLDGS Inc.\", ticker:\"alsn\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"Mutual Fund\", assetClass1Name: \"Mutual Fund\", assetClass2Name: \"Growth\", assetClass3Name: \"Technology\", investorName: \"Sample Investor\", acctNum: \"03004721 000\", acctName: \"The Oliver Wendell\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Giftc Custodial IRA\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123456\", assetId: \"CUSIPv 12348\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 1\", assetClass3Id: \"ACL3 ID 1\" },\n          {quantity:1000, price:  8.54, value:  8540 , ror: 12.5345365, yield: 2.43, percentageOfAccount: 0.36, estimatedAnnualIncome: 125.43, unrealizedGainLoss: -2182.30, cost: 10722.30, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Apigee Corp\", ticker:\"apic\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"Mutual Fund\", assetClass1Name: \"Mutual Fund\", assetClass2Name: \"Balanced\", assetClass3Name: \"Industry\", investorName: \"Sample Investor\", acctNum: \"03004721 000\", acctName: \"The Oliver Wendell\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Giftc Custodial IRA\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123456\", assetId: \"CUSIPv 12349\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 2\", assetClass3Id: \"ACL3 ID 3\" },\n          {quantity: 280, price:123.38, value:34546.4, ror: 12.5345365, yield: 1.69, percentageOfAccount: 1.46, estimatedAnnualIncome: 582.40, unrealizedGainLoss: 13549.60, cost: 20996.80, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"apple inc\", ticker:\"aapl\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"Mutual Fund\", assetClass1Name: \"Mutual Fund\", assetClass2Name: \"Balanced\", assetClass3Name: \"Industry\", investorName: \"Sample Investor\", acctNum: \"03004721 000\", acctName: \"The Oliver Wendell\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Giftc Custodial IRA\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123456\", assetId: \"CUSIPv 12340\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 2\", assetClass3Id: \"ACL3 ID 3\" },\n          {quantity: 400, price: 54.76, value:  21904, ror: 12.5345365, yield: 2.44, percentageOfAccount: 0.92, estimatedAnnualIncome: 306.00, unrealizedGainLoss:   297.08, cost: 21606.92, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Armstrong World Industries Inc New\", ticker:\"awi\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"Mutual Fund\", assetClass1Name: \"Mutual Fund\", assetClass2Name: \"Balanced\", assetClass3Name: \"Industry\", investorName: \"Sample Investor\", acctNum: \"03004721 000\", acctName: \"The Oliver Wendell\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Giftc Custodial IRA\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123456\", assetId: \"CUSIPv 12341\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 2\", assetClass3Id: \"ACL3 ID 3\" },\n          {quantity: 200, price: 80.58, value:  16116, ror: 12.5345365, yield: 2.43, percentageOfAccount: 0.68, estimatedAnnualIncome: 392.00, unrealizedGainLoss:  9829.22, cost: 16116.00, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Automatic Data Processing Inc\", ticker:\"adp\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"Mutual Fund\", assetClass1Name: \"Mutual Fund\", assetClass2Name: \"Balanced\", assetClass3Name: \"Industry\", investorName: \"Sample Investor\", acctNum: \"03004721 000\", acctName: \"The Oliver Wendell\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Giftc Custodial IRA\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123456\", assetId: \"CUSIPv 12342\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 2\", assetClass3Id: \"ACL3 ID 3\" },\n        ];\n        this.dataSet2 = [\n          {quantity: 1200000, price: 25.56, value: 5112, ror: 12.5345365, yield: 2.56, percentageOfAccount: 25.45655, estimatedAnnualIncome: 400.00, unrealizedGainLoss: 3000.00, cost: 3000.00, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Apple Inc.\", ticker:\"appl\", mgmtCompany: null, morningstarRating: \"5 star\", assetType: \"Stock\", assetClass1Name: \"Large Cap\", assetClass2Name: \"Growth\", assetClass3Name: \"Technology\", investorName: \"Investor Name 1\", acctNum: \"127635417236\", acctName: \"Short Account Name 1\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Retail\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123456\", assetId: \"CUSIPv 12345\", assetClass1Id: \"ACL1 ID 1\", assetClass2Id: \"ACL2 ID 1\", assetClass3Id: \"ACL3 ID 1\" },\n          {quantity: 200, price: 25.56, value: 5112, ror: 12.5345365, yield: 2.56, percentageOfAccount: 25.45655, estimatedAnnualIncome: 400.00, unrealizedGainLoss: 3000.00, cost: 3000.00, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Apple Inc.\", ticker:\"appl\", mgmtCompany: null, morningstarRating: \"5 star\", assetType: \"Stock\", assetClass1Name: \"Large Cap\", assetClass2Name: \"Growth\", assetClass3Name: \"Technology\", investorName: \"Investor Name 1\", acctNum: \"127635417237\", acctName: \"Short Account Name 2\", combinedAccountName: \"Lion Account\", mgrName: \"Blackrock\", productName: \"Lion Account\", style: \"Growth\", accountType: \"Retail\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123457\", assetId: \"CUSIPv 12345\", assetClass1Id: \"ACL1 ID 1\", assetClass2Id: \"ACL2 ID 1\", assetClass3Id: \"ACL3 ID 1\" },\n          {quantity: 200, price: 25.56, value: 5112, ror: 12.5345365, yield: 2.56, percentageOfAccount: 25.45655, estimatedAnnualIncome: 400.00, unrealizedGainLoss: 3000.00, cost: 3000.00, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Apple Inc.\", ticker:\"appl\", mgmtCompany: null, morningstarRating: \"5 star\", assetType: \"Stock\", assetClass1Name: \"Large Cap\", assetClass2Name: \"Growth\", assetClass3Name: \"Technology\", investorName: \"Investor Name 2\", acctNum: \"127635417236\", acctName: \"Short Account Name 1\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Retail\", taxStatus: \"Post Tax\", investorId: \"123457\", acctId: \"123456\", assetId: \"CUSIPv 12345\", assetClass1Id: \"ACL1 ID 1\", assetClass2Id: \"ACL2 ID 1\", assetClass3Id: \"ACL3 ID 1\" },\n          {quantity: 200, price: 25.56, value: 5112, ror: 12.5345365, yield: 2.56, percentageOfAccount: 25.45655, estimatedAnnualIncome: 400.00, unrealizedGainLoss: 3000.00, cost: 3000.00, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Apple Inc.\", ticker:\"appl\", mgmtCompany: null, morningstarRating: \"5 star\", assetType: \"Stock\", assetClass1Name: \"Large Cap\", assetClass2Name: \"Growth\", assetClass3Name: \"Technology\", investorName: \"Investor Name 2\", acctNum: \"127635417237\", acctName: \"Short Account Name 2\", combinedAccountName: \"Lion Account\", mgrName: \"Blackrock\", productName: \"Lion Account\", style: \"Growth\", accountType: \"Retail\", taxStatus: \"Post Tax\", investorId: \"123457\", acctId: \"123457\", assetId: \"CUSIPv 12345\", assetClass1Id: \"ACL1 ID 1\", assetClass2Id: \"ACL2 ID 1\", assetClass3Id: \"ACL3 ID 1\" },\n          {quantity: 200, price: 25.56, value: 5112, ror: 12.5345365, yield: 2.56, percentageOfAccount: 25.45655, estimatedAnnualIncome: 400.00, unrealizedGainLoss: 3000.00, cost: 3000.00, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"QQQ ETF\", ticker:\"QQQ\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"ETF\", assetClass1Name: \"Index Fund\", assetClass2Name: \"Balanced\", assetClass3Name: \"Industry\", investorName: \"Investor Name 1\", acctNum: \"127635417236\", acctName: \"Short Account Name 1\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Retail\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123456\", assetId: \"CUSIPv 12346\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 2\", assetClass3Id: \"ACL3 ID 3\" },\n          {quantity: 200, price: 25.56, value: 5112, ror: 12.5345365, yield: 2.56, percentageOfAccount: 25.45655, estimatedAnnualIncome: 400.00, unrealizedGainLoss: 3000.00, cost: 3000.00, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"QQQ ETF\", ticker:\"QQQ\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"ETF\", assetClass1Name: \"Index Fund\", assetClass2Name: \"Balanced\", assetClass3Name: \"Industry\", investorName: \"Investor Name 1\", acctNum: \"127635417237\", acctName: \"Short Account Name 2\", combinedAccountName: \"Lion Account\", mgrName: \"Blackrock\", productName: \"Lion Account\", style: \"Growth\", accountType: \"Retail\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123457\", assetId: \"CUSIPv 12346\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 2\", assetClass3Id: \"ACL3 ID 3\" },\n          {quantity: 200, price: 25.56, value: 5112, ror: 12.5345365, yield: 2.56, percentageOfAccount: 25.45655, estimatedAnnualIncome: 400.00, unrealizedGainLoss: 3000.00, cost: 3000.00, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"QQQ ETF\", ticker:\"QQQ\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"ETF\", assetClass1Name: \"Index Fund\", assetClass2Name: \"Balanced\", assetClass3Name: \"Industry\", investorName: \"Investor Name 2\", acctNum: \"127635417236\", acctName: \"Short Account Name 1\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Retail\", taxStatus: \"Post Tax\", investorId: \"123457\", acctId: \"123456\", assetId: \"CUSIPv 12346\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 2\", assetClass3Id: \"ACL3 ID 3\" },\n          {quantity: 200, price: 25.56, value: 5112, ror: 12.5345365, yield: 2.56, percentageOfAccount: 25.45655, estimatedAnnualIncome: 400.00, unrealizedGainLoss: 3000.00, cost: 3000.00, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"QQQ ETF\", ticker:\"QQQ\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"ETF\", assetClass1Name: \"Index Fund\", assetClass2Name: \"Balanced\", assetClass3Name: \"Industry\", investorName: \"Investor Name 2\", acctNum: \"127635417237\", acctName: \"Short Account Name 2\", combinedAccountName: \"Lion Account\", mgrName: \"Blackrock\", productName: \"Lion Account\", style: \"Growth\", accountType: \"Retail\", taxStatus: \"Post Tax\", investorId: \"123457\", acctId: \"123457\", assetId: \"CUSIPv 12346\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 2\", assetClass3Id: \"ACL3 ID 3\" },\n        ];\n        return this.separateDataIntoCategories(this.dataSet2, options);\n        // Dummy data setup complete.    \n    \n  }\n\n  separateDataIntoCategories(dataTable: Array<any>, options: HoldingsCustomizationOptions){\n    const categories: Category[] = [];\n    let returnValue = new CategorizedData();\n    returnValue.categorizedData = categories;\n    if (options.category1 === null) {\n      //Nocategories defined. So use full Data Table.\n      let uncategorized: Category = {\n        categoryId: \"\",\n        categoryPrimaryKey: \"\",\n        categoryData: [],\n        subCategories: [],\n        summaryData: {}\n      };\n      uncategorized.categoryData = dataTable;\n      this.calculateSummaryData(uncategorized, options);\n      returnValue.isCategorized = false;\n      returnValue.uncategorizedData = uncategorized;\n      return returnValue;\n    }\n    // Need to separate rows into categories\n    // identify Primary column in data.\n    let primaryColumn = this.identifyPrimaryColumn(options.category1);\n    this.allocateRowsToCategory(dataTable, categories, primaryColumn);\n    categories.forEach(category1 => {\n      this.calculateSummaryData(category1, options);\n      if (options.category2 !== null) {\n        //need to further categorize.\n        primaryColumn = this.identifyPrimaryColumn(options.category2);\n        category1.subCategories = [];\n        this.allocateRowsToCategory(category1.categoryData, category1.subCategories, primaryColumn);\n        category1.subCategories.forEach(category2 => {\n          this.calculateSummaryData(category2, options);\n          if (options.category3 !== null) {\n            //need to further categorize.\n            primaryColumn = this.identifyPrimaryColumn(options.category3);\n            category2.subCategories = [];\n            this.allocateRowsToCategory(category2.categoryData, category2.subCategories, primaryColumn);        \n            category2.subCategories.forEach(category3 => {\n              this.calculateSummaryData(category3, options);\n            });\n          }  \n        });\n      }  \n    });\n    returnValue.isCategorized = true;\n    returnValue.categorizedData = categories;\n    return returnValue;\n  }\n\n  calculateSummaryData(category: Category, options: HoldingsCustomizationOptions) {\n    category.summaryData = {};\n    options.dataColumns.forEach(column => {\n      if(column.isNumber && column.isAdditive) {\n        let sum = 0;\n        for (let index = 0; index < category.categoryData.length; index++) {\n          const row = category.categoryData[index];\n          sum = sum + (+row[column.value]);\n        }\n        if (isNaN(sum)) { sum=0;}\n        category.summaryData[column.value] = sum;\n      }\n    });\n  }\n\n  allocateRowsToCategory(dataSet: any[], categories: Category[], primaryColumn: string){\n    dataSet.forEach(row => {\n      const primaryKey = row[primaryColumn];\n      if(primaryKey === null) {return;} // Ignore row as it cannot be categorized.\n      let found = false;\n      for (let index = 0; index < categories.length; index++) {\n        const category = categories[index];\n        if(category.categoryPrimaryKey === primaryKey) {\n          found = true;\n          category.categoryData.push(row);\n        }\n      }\n      if (!found) {\n        let newCategory: Category = new Category();\n        newCategory.categoryId = primaryColumn;\n        newCategory.categoryPrimaryKey = primaryKey;\n        newCategory.categoryData = [row];\n        categories.push(newCategory);\n      }\n    });\n  }\n\n  identifyPrimaryColumn(category: string) {\n    let primaryColumn = null;\n    switch (category) {\n      case \"account\":\n        primaryColumn = \"acctId\";\n      break;\n      case \"investor\":\n        primaryColumn = \"investorId\";\n      break;\n      case \"asset\":\n        primaryColumn = \"assetId\";\n      break;\n      case \"assetClass1\":\n        primaryColumn = \"assetClass1Id\";\n      break;\n      case \"assetClass2\":\n        primaryColumn = \"assetClass2Id\";\n      break;\n      case \"assetClass3\":\n        primaryColumn = \"acctClass3Id\";\n      break;\n      default:\n      break;\n    }\n    return primaryColumn;\n  }\n\n}\n",
            "properties": [
                {
                    "name": "isAdditive",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "isNumber",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "parentValue",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "Selection"
        },
        {
            "name": "HoldingsCustomizationOptions",
            "id": "interface-HoldingsCustomizationOptions-3f635220d58f15bbac368629a84a3cc0",
            "file": "projects/wri-holdings/src/lib/wri-holdings.service.ts",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { of, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { HttpParams, HttpHeaders, HttpClient, HttpErrorResponse } from '@angular/common/http';\n\nexport interface Selection {\n  value: string;\n  viewValue: string;\n}\n\nexport interface DataColumn extends Selection {\n  parentValue?: string;\n  isNumber?: boolean;\n  isAdditive?: boolean;\n}\n\nexport class AvailableColumnOptions {\n  static columnOptions: DataColumn[] = [\n    {value: 'quantity', viewValue: 'Quantity', parentValue: \"holding\", isNumber: true},\n    {value: 'price', viewValue: 'Price ($)', parentValue: \"holding\", isNumber: true},\n    {value: 'value', viewValue: 'Value ($)', parentValue: \"holding\", isNumber: true, isAdditive: true},\n    {value: 'ror', viewValue: 'Rate of Return', parentValue: \"holding\", isNumber: true},\n    {value: 'yield', viewValue: 'Current Yield (%)', parentValue: \"holding\", isNumber: true},\n    {value: 'percentageOfAccount', viewValue: '% of Account', parentValue: \"holding\", isNumber: true, isAdditive: true},\n    {value: 'estimatedAnnualIncome', viewValue: 'Estimated Annual Income ($)', parentValue: \"holding\", isNumber: true, isAdditive: true},\n    {value: 'cost', viewValue: 'Cost ($)', parentValue: \"holding\", isNumber: true, isAdditive: true},\n    {value: 'unrealizedGainLoss', viewValue: 'Unrealized Gain/Loss ($)', parentValue: \"holding\", isNumber: true, isAdditive: true},\n    {value: 'beginningValue', viewValue: 'Beginning Value', parentValue: \"holding\", isNumber: true, isAdditive: true},\n    {value: 'netContribution', viewValue: 'Net Contribution', parentValue: \"holding\", isNumber: true, isAdditive: true},\n    {value: 'changeInValue', viewValue: 'Change In Value', parentValue: \"holding\", isNumber: true, isAdditive: true},\n    {value: 'assetName', viewValue: 'Asset Name', parentValue: \"asset\"},\n    {value: 'ticker', viewValue: 'Ticker Synbol', parentValue: \"asset\"},\n    {value: 'mgmtCompany', viewValue: 'Management Company', parentValue: \"asset\"},\n    {value: 'morningstarRating', viewValue: 'Morningstar Rating', parentValue: \"asset\"},\n    {value: 'assetType', viewValue: 'Asset Type', parentValue: \"asset\"},\n    {value: 'assetClass1Name', viewValue: 'ACL 1 Name', parentValue: \"assetClass1\"},\n    {value: 'assetClass2Name', viewValue: 'ACL 2 Name', parentValue: \"assetClass2\"},\n    {value: 'assetClass3Name', viewValue: 'ACL 3 Name', parentValue: \"assetClass3\"},\n    {value: 'investorId', viewValue: 'Investor ID', parentValue: \"investor\"},\n    {value: 'investorName', viewValue: 'Investor Name', parentValue: \"investor\"},\n    {value: 'acctNum', viewValue: 'Account Number', parentValue: \"account\"},\n    {value: 'acctName', viewValue: 'Account Name', parentValue: \"account\"},\n    {value: 'combinedAccountName', viewValue: 'Account Name / Manager / Style Name as applicable', parentValue: \"account\"},\n    {value: 'mgrName', viewValue: 'Manager Name', parentValue: \"account\"},\n    {value: 'productName', viewValue: 'Product Name', parentValue: \"account\"},\n    {value: 'style', viewValue: 'Style', parentValue: \"account\"},\n    {value: 'accountType', viewValue: 'Account Type', parentValue: \"account\"},\n    {value: 'taxStatus', viewValue: 'Tax Status', parentValue: \"account\"},\n  ];\n}\n\nexport class Category {\n  categoryId: string;\n  categoryPrimaryKey: any;\n  subCategories: Category[] = [];\n  categoryData = [];\n  summaryData = {};\n}\n\nexport interface HoldingsCustomizationOptions {\n  category1?: string;\n  category2?: string;\n  category3?: string;\n  category1Data?: Array<DataColumn>;\n  category2Data?: Array<DataColumn>;\n  category3Data?: Array<DataColumn>;\n  dataColumns?: Array<DataColumn>;\n  showInsuranceData?: boolean;\n}\n\n\nexport class CategorizedData {\n  isCategorized: boolean;\n  uncategorizedData: Category;\n  categorizedData: Category[];\n}\n\n\n@Injectable()\nexport class WRIHoldingsService {\n  jwtToken: string = '';\n  serviceURL: string = '';\n  advisorID: string = '';\n  private dataSet1 = [];\n  private dataSet2 = [];\n\n  constructor(private http: HttpClient) {\n    const pageData = (<any> window).AppSettings;\n    if (pageData && pageData.jwtToken) this.jwtToken = pageData.jwtToken;\n    if (pageData && pageData.serviceBusURL) {\n      this.serviceURL = pageData.serviceBusURL + '/report-builder-service';\n    }\n    else {\n      this.serviceURL = 'https://dummylocation.com/report-builder-service';\n    }\n    if (pageData && pageData.advisorID) this.advisorID = pageData.advisorID;\n  }\n\n  getData(options: HoldingsCustomizationOptions, dummyData: boolean = false) {\n    if (dummyData) {\n      return of(this.getDummyData(options));\n    }\n\n    let postParams = new HttpParams();\n    postParams.append('srcDefConst','reportBuilder');\n    postParams.append('pageMode','componentData');\n    postParams.append('formatType','html');\n\n    let headers = new HttpHeaders();\n    headers = headers.set('Content-Type', 'application/json');\n    headers = headers.set('Authorization', `Bearer ${this.jwtToken}`);\n    headers = headers.set('X-JWT-Assertion', this.jwtToken);\n\n    const jsonRequestBody = {advisorTaxId: this.advisorID};\n    return this.http.post(this.serviceURL + '/get-default-reports-list-metadata', jsonRequestBody, {headers: headers})\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n  private handleError(error: HttpErrorResponse) {\n    return throwError(error.status);\n  }\n\n  getDummyData(options: HoldingsCustomizationOptions) {\n        // Dummy data setup.\n        this.dataSet1 = [\n          {quantity: 7318.06, price: 1.00, value: 7318.06, ror: 12.534, yield: 0   , percentageOfAccount: 0.31, estimatedAnnualIncome: 0,      unrealizedGainLoss: 0,        cost: 0,        beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Brokerage Money Market\", ticker:\"\", mgmtCompany: null, morningstarRating: \"5 star\", assetType: \"Stock\", assetClass1Name: \"Cash or Equivalents\", assetClass2Name: \"Growth\", assetClass3Name: \"Technology\", investorName: \"Sample Investor\", acctNum: \"03004721 000\", acctName: \"The Oliver Wendell\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Giftc Custodial IRA\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123456\", assetId: \"CUSIPv 12345\", assetClass1Id: \"ACL1 ID 1\", assetClass2Id: \"ACL2 ID 1\", assetClass3Id: \"ACL3 ID 1\" },\n          {quantity: 600, price: 50.94, value:  30564, ror: 12.5345365, yield: 1.88, percentageOfAccount: 1.29, estimatedAnnualIncome: 576.00, unrealizedGainLoss: 14534.99, cost: 16029.01, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Abbot Laboratories\", ticker:\"abt\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"Mutual Fund\", assetClass1Name: \"Mutual Fund\", assetClass2Name: \"Growth\", assetClass3Name: \"Technology\", investorName: \"Sample Investor\", acctNum: \"03004721 000\", acctName: \"The Oliver Wendell\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Giftc Custodial IRA\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123456\", assetId: \"CUSIPv 12346\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 1\", assetClass3Id: \"ACL3 ID 1\" },\n          {quantity: 200, price:132.82, value:  26564, ror: 12.5345365, yield: 2.44, percentageOfAccount: 1.12, estimatedAnnualIncome: 648.00, unrealizedGainLoss: 12219.86, cost: 14344.14, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Air Products & chemicals Inc\", ticker:\"apd\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"Mutual Fund\", assetClass1Name: \"Mutual Fund\", assetClass2Name: \"Growth\", assetClass3Name: \"Technology\", investorName: \"Sample Investor\", acctNum: \"03004721 000\", acctName: \"The Oliver Wendell\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Giftc Custodial IRA\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123456\", assetId: \"CUSIPv 12347\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 1\", assetClass3Id: \"ACL3 ID 1\" },\n          {quantity: 500, price: 29.36, value:  14680, ror: 12.5345365, yield: 2.04, percentageOfAccount: 0.62, estimatedAnnualIncome: 300.00, unrealizedGainLoss:  1096.30, cost: 13583.70, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Allison Transmission HLDGS Inc.\", ticker:\"alsn\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"Mutual Fund\", assetClass1Name: \"Mutual Fund\", assetClass2Name: \"Growth\", assetClass3Name: \"Technology\", investorName: \"Sample Investor\", acctNum: \"03004721 000\", acctName: \"The Oliver Wendell\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Giftc Custodial IRA\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123456\", assetId: \"CUSIPv 12348\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 1\", assetClass3Id: \"ACL3 ID 1\" },\n          {quantity:1000, price:  8.54, value:  8540 , ror: 12.5345365, yield: 2.43, percentageOfAccount: 0.36, estimatedAnnualIncome: 125.43, unrealizedGainLoss: -2182.30, cost: 10722.30, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Apigee Corp\", ticker:\"apic\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"Mutual Fund\", assetClass1Name: \"Mutual Fund\", assetClass2Name: \"Balanced\", assetClass3Name: \"Industry\", investorName: \"Sample Investor\", acctNum: \"03004721 000\", acctName: \"The Oliver Wendell\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Giftc Custodial IRA\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123456\", assetId: \"CUSIPv 12349\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 2\", assetClass3Id: \"ACL3 ID 3\" },\n          {quantity: 280, price:123.38, value:34546.4, ror: 12.5345365, yield: 1.69, percentageOfAccount: 1.46, estimatedAnnualIncome: 582.40, unrealizedGainLoss: 13549.60, cost: 20996.80, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"apple inc\", ticker:\"aapl\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"Mutual Fund\", assetClass1Name: \"Mutual Fund\", assetClass2Name: \"Balanced\", assetClass3Name: \"Industry\", investorName: \"Sample Investor\", acctNum: \"03004721 000\", acctName: \"The Oliver Wendell\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Giftc Custodial IRA\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123456\", assetId: \"CUSIPv 12340\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 2\", assetClass3Id: \"ACL3 ID 3\" },\n          {quantity: 400, price: 54.76, value:  21904, ror: 12.5345365, yield: 2.44, percentageOfAccount: 0.92, estimatedAnnualIncome: 306.00, unrealizedGainLoss:   297.08, cost: 21606.92, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Armstrong World Industries Inc New\", ticker:\"awi\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"Mutual Fund\", assetClass1Name: \"Mutual Fund\", assetClass2Name: \"Balanced\", assetClass3Name: \"Industry\", investorName: \"Sample Investor\", acctNum: \"03004721 000\", acctName: \"The Oliver Wendell\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Giftc Custodial IRA\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123456\", assetId: \"CUSIPv 12341\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 2\", assetClass3Id: \"ACL3 ID 3\" },\n          {quantity: 200, price: 80.58, value:  16116, ror: 12.5345365, yield: 2.43, percentageOfAccount: 0.68, estimatedAnnualIncome: 392.00, unrealizedGainLoss:  9829.22, cost: 16116.00, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Automatic Data Processing Inc\", ticker:\"adp\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"Mutual Fund\", assetClass1Name: \"Mutual Fund\", assetClass2Name: \"Balanced\", assetClass3Name: \"Industry\", investorName: \"Sample Investor\", acctNum: \"03004721 000\", acctName: \"The Oliver Wendell\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Giftc Custodial IRA\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123456\", assetId: \"CUSIPv 12342\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 2\", assetClass3Id: \"ACL3 ID 3\" },\n        ];\n        this.dataSet2 = [\n          {quantity: 1200000, price: 25.56, value: 5112, ror: 12.5345365, yield: 2.56, percentageOfAccount: 25.45655, estimatedAnnualIncome: 400.00, unrealizedGainLoss: 3000.00, cost: 3000.00, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Apple Inc.\", ticker:\"appl\", mgmtCompany: null, morningstarRating: \"5 star\", assetType: \"Stock\", assetClass1Name: \"Large Cap\", assetClass2Name: \"Growth\", assetClass3Name: \"Technology\", investorName: \"Investor Name 1\", acctNum: \"127635417236\", acctName: \"Short Account Name 1\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Retail\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123456\", assetId: \"CUSIPv 12345\", assetClass1Id: \"ACL1 ID 1\", assetClass2Id: \"ACL2 ID 1\", assetClass3Id: \"ACL3 ID 1\" },\n          {quantity: 200, price: 25.56, value: 5112, ror: 12.5345365, yield: 2.56, percentageOfAccount: 25.45655, estimatedAnnualIncome: 400.00, unrealizedGainLoss: 3000.00, cost: 3000.00, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Apple Inc.\", ticker:\"appl\", mgmtCompany: null, morningstarRating: \"5 star\", assetType: \"Stock\", assetClass1Name: \"Large Cap\", assetClass2Name: \"Growth\", assetClass3Name: \"Technology\", investorName: \"Investor Name 1\", acctNum: \"127635417237\", acctName: \"Short Account Name 2\", combinedAccountName: \"Lion Account\", mgrName: \"Blackrock\", productName: \"Lion Account\", style: \"Growth\", accountType: \"Retail\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123457\", assetId: \"CUSIPv 12345\", assetClass1Id: \"ACL1 ID 1\", assetClass2Id: \"ACL2 ID 1\", assetClass3Id: \"ACL3 ID 1\" },\n          {quantity: 200, price: 25.56, value: 5112, ror: 12.5345365, yield: 2.56, percentageOfAccount: 25.45655, estimatedAnnualIncome: 400.00, unrealizedGainLoss: 3000.00, cost: 3000.00, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Apple Inc.\", ticker:\"appl\", mgmtCompany: null, morningstarRating: \"5 star\", assetType: \"Stock\", assetClass1Name: \"Large Cap\", assetClass2Name: \"Growth\", assetClass3Name: \"Technology\", investorName: \"Investor Name 2\", acctNum: \"127635417236\", acctName: \"Short Account Name 1\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Retail\", taxStatus: \"Post Tax\", investorId: \"123457\", acctId: \"123456\", assetId: \"CUSIPv 12345\", assetClass1Id: \"ACL1 ID 1\", assetClass2Id: \"ACL2 ID 1\", assetClass3Id: \"ACL3 ID 1\" },\n          {quantity: 200, price: 25.56, value: 5112, ror: 12.5345365, yield: 2.56, percentageOfAccount: 25.45655, estimatedAnnualIncome: 400.00, unrealizedGainLoss: 3000.00, cost: 3000.00, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Apple Inc.\", ticker:\"appl\", mgmtCompany: null, morningstarRating: \"5 star\", assetType: \"Stock\", assetClass1Name: \"Large Cap\", assetClass2Name: \"Growth\", assetClass3Name: \"Technology\", investorName: \"Investor Name 2\", acctNum: \"127635417237\", acctName: \"Short Account Name 2\", combinedAccountName: \"Lion Account\", mgrName: \"Blackrock\", productName: \"Lion Account\", style: \"Growth\", accountType: \"Retail\", taxStatus: \"Post Tax\", investorId: \"123457\", acctId: \"123457\", assetId: \"CUSIPv 12345\", assetClass1Id: \"ACL1 ID 1\", assetClass2Id: \"ACL2 ID 1\", assetClass3Id: \"ACL3 ID 1\" },\n          {quantity: 200, price: 25.56, value: 5112, ror: 12.5345365, yield: 2.56, percentageOfAccount: 25.45655, estimatedAnnualIncome: 400.00, unrealizedGainLoss: 3000.00, cost: 3000.00, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"QQQ ETF\", ticker:\"QQQ\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"ETF\", assetClass1Name: \"Index Fund\", assetClass2Name: \"Balanced\", assetClass3Name: \"Industry\", investorName: \"Investor Name 1\", acctNum: \"127635417236\", acctName: \"Short Account Name 1\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Retail\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123456\", assetId: \"CUSIPv 12346\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 2\", assetClass3Id: \"ACL3 ID 3\" },\n          {quantity: 200, price: 25.56, value: 5112, ror: 12.5345365, yield: 2.56, percentageOfAccount: 25.45655, estimatedAnnualIncome: 400.00, unrealizedGainLoss: 3000.00, cost: 3000.00, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"QQQ ETF\", ticker:\"QQQ\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"ETF\", assetClass1Name: \"Index Fund\", assetClass2Name: \"Balanced\", assetClass3Name: \"Industry\", investorName: \"Investor Name 1\", acctNum: \"127635417237\", acctName: \"Short Account Name 2\", combinedAccountName: \"Lion Account\", mgrName: \"Blackrock\", productName: \"Lion Account\", style: \"Growth\", accountType: \"Retail\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123457\", assetId: \"CUSIPv 12346\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 2\", assetClass3Id: \"ACL3 ID 3\" },\n          {quantity: 200, price: 25.56, value: 5112, ror: 12.5345365, yield: 2.56, percentageOfAccount: 25.45655, estimatedAnnualIncome: 400.00, unrealizedGainLoss: 3000.00, cost: 3000.00, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"QQQ ETF\", ticker:\"QQQ\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"ETF\", assetClass1Name: \"Index Fund\", assetClass2Name: \"Balanced\", assetClass3Name: \"Industry\", investorName: \"Investor Name 2\", acctNum: \"127635417236\", acctName: \"Short Account Name 1\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Retail\", taxStatus: \"Post Tax\", investorId: \"123457\", acctId: \"123456\", assetId: \"CUSIPv 12346\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 2\", assetClass3Id: \"ACL3 ID 3\" },\n          {quantity: 200, price: 25.56, value: 5112, ror: 12.5345365, yield: 2.56, percentageOfAccount: 25.45655, estimatedAnnualIncome: 400.00, unrealizedGainLoss: 3000.00, cost: 3000.00, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"QQQ ETF\", ticker:\"QQQ\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"ETF\", assetClass1Name: \"Index Fund\", assetClass2Name: \"Balanced\", assetClass3Name: \"Industry\", investorName: \"Investor Name 2\", acctNum: \"127635417237\", acctName: \"Short Account Name 2\", combinedAccountName: \"Lion Account\", mgrName: \"Blackrock\", productName: \"Lion Account\", style: \"Growth\", accountType: \"Retail\", taxStatus: \"Post Tax\", investorId: \"123457\", acctId: \"123457\", assetId: \"CUSIPv 12346\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 2\", assetClass3Id: \"ACL3 ID 3\" },\n        ];\n        return this.separateDataIntoCategories(this.dataSet2, options);\n        // Dummy data setup complete.    \n    \n  }\n\n  separateDataIntoCategories(dataTable: Array<any>, options: HoldingsCustomizationOptions){\n    const categories: Category[] = [];\n    let returnValue = new CategorizedData();\n    returnValue.categorizedData = categories;\n    if (options.category1 === null) {\n      //Nocategories defined. So use full Data Table.\n      let uncategorized: Category = {\n        categoryId: \"\",\n        categoryPrimaryKey: \"\",\n        categoryData: [],\n        subCategories: [],\n        summaryData: {}\n      };\n      uncategorized.categoryData = dataTable;\n      this.calculateSummaryData(uncategorized, options);\n      returnValue.isCategorized = false;\n      returnValue.uncategorizedData = uncategorized;\n      return returnValue;\n    }\n    // Need to separate rows into categories\n    // identify Primary column in data.\n    let primaryColumn = this.identifyPrimaryColumn(options.category1);\n    this.allocateRowsToCategory(dataTable, categories, primaryColumn);\n    categories.forEach(category1 => {\n      this.calculateSummaryData(category1, options);\n      if (options.category2 !== null) {\n        //need to further categorize.\n        primaryColumn = this.identifyPrimaryColumn(options.category2);\n        category1.subCategories = [];\n        this.allocateRowsToCategory(category1.categoryData, category1.subCategories, primaryColumn);\n        category1.subCategories.forEach(category2 => {\n          this.calculateSummaryData(category2, options);\n          if (options.category3 !== null) {\n            //need to further categorize.\n            primaryColumn = this.identifyPrimaryColumn(options.category3);\n            category2.subCategories = [];\n            this.allocateRowsToCategory(category2.categoryData, category2.subCategories, primaryColumn);        \n            category2.subCategories.forEach(category3 => {\n              this.calculateSummaryData(category3, options);\n            });\n          }  \n        });\n      }  \n    });\n    returnValue.isCategorized = true;\n    returnValue.categorizedData = categories;\n    return returnValue;\n  }\n\n  calculateSummaryData(category: Category, options: HoldingsCustomizationOptions) {\n    category.summaryData = {};\n    options.dataColumns.forEach(column => {\n      if(column.isNumber && column.isAdditive) {\n        let sum = 0;\n        for (let index = 0; index < category.categoryData.length; index++) {\n          const row = category.categoryData[index];\n          sum = sum + (+row[column.value]);\n        }\n        if (isNaN(sum)) { sum=0;}\n        category.summaryData[column.value] = sum;\n      }\n    });\n  }\n\n  allocateRowsToCategory(dataSet: any[], categories: Category[], primaryColumn: string){\n    dataSet.forEach(row => {\n      const primaryKey = row[primaryColumn];\n      if(primaryKey === null) {return;} // Ignore row as it cannot be categorized.\n      let found = false;\n      for (let index = 0; index < categories.length; index++) {\n        const category = categories[index];\n        if(category.categoryPrimaryKey === primaryKey) {\n          found = true;\n          category.categoryData.push(row);\n        }\n      }\n      if (!found) {\n        let newCategory: Category = new Category();\n        newCategory.categoryId = primaryColumn;\n        newCategory.categoryPrimaryKey = primaryKey;\n        newCategory.categoryData = [row];\n        categories.push(newCategory);\n      }\n    });\n  }\n\n  identifyPrimaryColumn(category: string) {\n    let primaryColumn = null;\n    switch (category) {\n      case \"account\":\n        primaryColumn = \"acctId\";\n      break;\n      case \"investor\":\n        primaryColumn = \"investorId\";\n      break;\n      case \"asset\":\n        primaryColumn = \"assetId\";\n      break;\n      case \"assetClass1\":\n        primaryColumn = \"assetClass1Id\";\n      break;\n      case \"assetClass2\":\n        primaryColumn = \"assetClass2Id\";\n      break;\n      case \"assetClass3\":\n        primaryColumn = \"acctClass3Id\";\n      break;\n      default:\n      break;\n    }\n    return primaryColumn;\n  }\n\n}\n",
            "properties": [
                {
                    "name": "category1",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "category1Data",
                    "type": "Array<DataColumn>",
                    "optional": true,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "category2",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "category2Data",
                    "type": "Array<DataColumn>",
                    "optional": true,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "category3",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "category3Data",
                    "type": "Array<DataColumn>",
                    "optional": true,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "dataColumns",
                    "type": "Array<DataColumn>",
                    "optional": true,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "showInsuranceData",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 68
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "MultiSelectSelection",
            "id": "interface-MultiSelectSelection-d1c5f882d91d0ed89488c1e81824b2e1",
            "file": "projects/report-builder/src/app/common/multi-selection/multi-selection.component.ts",
            "type": "interface",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter, TemplateRef, OnChanges, SimpleChanges, ElementRef, ViewChild } from '@angular/core';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport {CdkDragDrop, moveItemInArray} from '@angular/cdk/drag-drop';\n\nexport interface SingleSelection{\n  name: String;\n  element: any;\n}\nexport interface SingleOptionSet {\n  options: SingleSelection[];\n  selectedOption: SingleSelection;\n}\nexport interface MultiSelectSelection extends SingleSelection{\n  selected:  boolean;\n  draggable: boolean;\n  disabled:  boolean;\n  subSelections?: MultiSelectSelection[];\n  subOptions?: SingleOptionSet;\n  selectionDetails?: string[];\n  showDetails?: boolean;\n}\n\nexport class MultiSelectSet {\n  selectionSet: MultiSelectSelection[] = [];\n  sortable: boolean = true;\n  name: string;\n  maxSelections: number;\n  minSelections: number = 0;\n  currentSelectedCount: number = 0;\n  sortableEndCount: number = 0; // Using end count because we are sorting the disabled items to the last of the sort list.\n  selectedAndNotDraggabledCount: number = 0; // This field is necessary to allow a set to have single selection set to have items that are diabled.\n}\n\n@Component({\n  selector: 'app-multi-selection',\n  templateUrl: './multi-selection.component.html',\n  styleUrls: ['./multi-selection.component.css']\n})\nexport class MultiSelectionComponent implements OnInit, OnChanges {\n  moveItemInArray = moveItemInArray;\n  @Input()\n  name: string;\n\n  @Input()\n  minimumSelections: number = 0;\n  disableSave: boolean = false;\n\n  @Input()\n  selectionSets: MultiSelectSet[];\n  internalSelectionSets: MultiSelectSet[] = [];\n\n  @Output()\n  newOptions = new EventEmitter<MultiSelectSet[]>();\n\n  dialogRef: MatDialogRef<any>;\n  \n  @ViewChild(\"myButton\", { read: ElementRef }) buttonRef: ElementRef;\n\n  constructor(public dialog: MatDialog) {\n  }\n\n  ngOnInit(): void {\n    this.setCurrentSelections(this.selectionSets);\n  }\n  ngOnChanges(changes: SimpleChanges) {\n    this.setCurrentSelections(changes.selectionSets.currentValue);\n  }\n\n  // This is the core of the logic to make the component work.\n  setCurrentSelections(selectionSets: MultiSelectSet[]){\n    this.internalSelectionSets = [];\n    for (const selectionSet of selectionSets) {\n      // Doing a deep copy manually here but with some logic to help do the counts necessary.\n      let newSelectionSet = new MultiSelectSet();\n      newSelectionSet.currentSelectedCount = 0;\n      newSelectionSet.maxSelections = +selectionSet.maxSelections;\n      newSelectionSet.minSelections = +selectionSet.minSelections;\n      newSelectionSet.sortable = selectionSet.sortable;\n      newSelectionSet.name = selectionSet.name;\n      for (const selection of selectionSet.selectionSet)\n      {\n        if(selection.selected) newSelectionSet.currentSelectedCount++;\n        if(selection.selected && !selection.draggable) newSelectionSet.selectedAndNotDraggabledCount++;\n        if(newSelectionSet.currentSelectedCount > selectionSet.maxSelections) {\n          selection.selected = false;\n          newSelectionSet.currentSelectedCount = selectionSet.maxSelections;\n        }\n        newSelectionSet.selectionSet.push({...selection});\n      }\n      if(selectionSet.sortable){\n        // The sort algorithm here is being done to ensure the sortable items (not disabled) are first in the list. In the sortable items, the selectable items are ahead again.\n        // The sequencing of the sort returns is critical to the algorithm.\n        newSelectionSet.selectionSet.sort((a,b) => {\n          if(a.selected && !b.selected) return -1;\n          if(a.draggable && !b.draggable) return -1;\n          if(!a.draggable && b.draggable) return 1;\n          if(!a.selected && b.selected) return 1;\n          return 0;\n        });\n        newSelectionSet.sortableEndCount = newSelectionSet.selectionSet.length;\n        for (const selection of newSelectionSet.selectionSet) {\n          if(!selection.draggable) newSelectionSet.sortableEndCount--;\n        }\n      }\n      this.internalSelectionSets.push(newSelectionSet);\n    }\n    this.checkMinimumSelections()\n  }\n\n  // The logic around initial max height is necessary because we are allowing the content to drive the height.\n  // Without this we have to set the height property to work and that makes it too long a dialog when the content is small.\n  // There is a side effect that the size of the open dialog box cannot be longer than the initially opened size.\n  initialMaxheight = 0;\n  innerContentDivHeight = 0;\n\n  show(dialogTemplate: TemplateRef<any>) {\n    const rect = this.buttonRef.nativeElement.getBoundingClientRect();\n    const h = window.innerHeight;\n    // Position logic uses a constant width box of 400px. Since the box is being right aligned, we actually right align unless the box is too close to the left side of the screen. \n    let position = {\n      left: '0px',\n      top: rect.bottom + 'px'\n    };\n    if(rect.right>300){\n      position = {\n        left: (rect.right - 300) + 'px',\n        top: rect.bottom + 'px'\n      };\n    }\n    let maxHeight = h - rect.bottom - 10;\n    this.initialMaxheight = maxHeight;\n    this.innerContentDivHeight = maxHeight - 90;\n    this.dialogRef = this.dialog.open(dialogTemplate, {\n      disableClose: false, //This allows closing the dialog box by clicking anywhere else. This allows the behaviour to mimick a true dropdown.\n      width: '300px',\n      maxHeight: maxHeight + 'px',\n      // height: maxHeight + 'px',\n      hasBackdrop: true, //This is necessary for the drag drop to work in a dialog box.\n      position: position,\n      backdropClass: 'dialog-overlay',\n      panelClass: 'multi-select-dialog-panel'\n    });\n    console.log('Initial window height: '+ h, rect, this.initialMaxheight, this.innerContentDivHeight);\n    // This code is necessary so that when a user clicks the backdrop, we can close the backdrop and reset the entries.\n    this.dialogRef.backdropClick().subscribe(() => {\n      this.setCurrentSelections(this.selectionSets); //Reset selections.\n    })\n  }\n\n  // The on resize event needs to be handled only for the case where the user changes the window size after inital open of the dialog.\n  // This makes the popup box behave like a true dropdown box.\n  onResize(event) {\n    const rect = this.buttonRef.nativeElement.getBoundingClientRect();\n    const h = window.innerHeight;\n    console.log('Resized window height: '+ h, rect, this.initialMaxheight, this.innerContentDivHeight);\n    //console.log(rect);\n    let position = {\n      left: '0px',\n      top: rect.bottom + 'px'\n    };\n    if(rect.right>300){\n      position = {\n        left: (rect.right - 300) + 'px',\n        top: rect.bottom + 'px'\n      };\n    }\n    let height = h - rect.bottom - 10;\n    // Because we are setting the maxHeight property when opening the dialog the height property cannot be longer than the maxHeight\n    if(height > this.initialMaxheight) height = this.initialMaxheight;\n    this.innerContentDivHeight = height - 90;\n    // console.log(maxHeight);\n    this.dialogRef.updatePosition(position);\n    this.dialogRef.updateSize('300px', height + 'px');\n  }\n\n  // Save emits the changes sets to the calling component.\n  save(){\n    this.newOptions.emit(this.internalSelectionSets);\n    this.dialogRef.close();\n  }\n\n  cancel() {\n    this.dialogRef.close();\n    this.setCurrentSelections(this.selectionSets); //Reset the selections.\n  }\n\n  drop(event: CdkDragDrop<string[]>, setIndex: number) {\n    const set = this.internalSelectionSets[setIndex];\n    const element = set.selectionSet[event.previousIndex];\n    if (element.selected && event.currentIndex < set.currentSelectedCount)  {\n      moveItemInArray(set.selectionSet, event.previousIndex, event.currentIndex);\n    }\n    if (!element.selected  && event.currentIndex < set.currentSelectedCount && set.currentSelectedCount < set.maxSelections) {\n      moveItemInArray(set.selectionSet, event.previousIndex, event.currentIndex);\n      element.selected = true;\n      set.currentSelectedCount++;\n    }\n    this.checkMinimumSelections()\n  }\n\n  validateAndMove(set:MultiSelectSet, fromIndex: number, toIndex: number) {\n    let fromItem = set.selectionSet[fromIndex];\n    let toItem = set.selectionSet[toIndex];\n    if((fromItem.selected && toItem.selected)\n    || (!fromItem.selected && !toItem.selected)) {\n      moveItemInArray(set.selectionSet, fromIndex, toIndex);\n      return;\n    }\n    if((!fromItem.selected && toItem.selected) && set.currentSelectedCount < set.maxSelections ) {\n      moveItemInArray(set.selectionSet, fromIndex, toIndex);\n      fromItem.selected = true;\n      set.currentSelectedCount++;\n      this.checkMinimumSelections()\n      return;\n    }\n  }\n\n  // Simple logic to handle checking and un checking for non sortable sets.\n  onCheckedNonSortable(i: number, isChecked: boolean, setIndex: number){\n    const set = this.internalSelectionSets[setIndex];\n    set.selectionSet[i].selected = isChecked;\n    if(isChecked) {\n      if (set.currentSelectedCount < set.maxSelections){\n        set.currentSelectedCount++;\n      } // else  condition is not necessary as this code is never triggered due to disabling selections.\n      else {\n        set.selectionSet[i].selected = false;\n      }\n    }\n    else {\n      set.currentSelectedCount--;\n    }\n    this.checkMinimumSelections()\n  }\n\n  // More complicated logic for sortable sets to move the selected item to the bottom of the selected area.\n  onChecked(i: number, isChecked: boolean, setIndex: number){\n    const set = this.internalSelectionSets[setIndex];\n    set.selectionSet[i].selected = isChecked;\n    console.log(i, isChecked,set.selectionSet[i].selected); // {}, true || false\n    if(isChecked) {\n      if (set.currentSelectedCount < set.maxSelections){\n        moveItemInArray(set.selectionSet, i, set.currentSelectedCount - set.selectedAndNotDraggabledCount);\n        set.currentSelectedCount++;\n      } // else  condition is not necessary as this code is never triggered due to disabling selections.\n      else {\n        set.selectionSet[i].selected = false;\n      }\n    }\n    else {\n      set.currentSelectedCount--;\n      //console.log(set);\n      moveItemInArray(set.selectionSet, i, set.currentSelectedCount - set.selectedAndNotDraggabledCount);\n    }\n    this.checkMinimumSelections()\n  }\n\n  // This function is to diable save if minimum selections are not done for the multiset.\n  checkMinimumSelections(){\n    if(this.minimumSelections <= 0) {\n      this.disableSave = false;\n      return;\n    }\n    let totalCount = 0;\n    this.internalSelectionSets.forEach(set => {\n      totalCount = totalCount + set.currentSelectedCount;\n    });\n    if(totalCount < this.minimumSelections) this.disableSave = true;\n    else this.disableSave = false;\n  }\n\n  showHideSelectionDetails(selection: MultiSelectSelection){\n    if(selection.showDetails) selection.showDetails = false;\n    else selection.showDetails = true; \n  }\n\n}\n",
            "properties": [
                {
                    "name": "disabled",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "draggable",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "selected",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "selectionDetails",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "showDetails",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "subOptions",
                    "type": "SingleOptionSet",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "subSelections",
                    "type": "MultiSelectSelection[]",
                    "optional": true,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "SingleSelection"
        },
        {
            "name": "ReportCategory",
            "id": "interface-ReportCategory-7107881524590770d3b3a3bc9e9bc2a7",
            "file": "projects/report-builder/src/app/page/report-list/report-list.service.ts",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { of, Observable } from 'rxjs';\nimport { HttpParams, HttpHeaders, HttpClient } from '@angular/common/http';\nimport { allReportsData } from './mock-data';\nimport { environment } from '../../../environments/environment';\n\nexport enum ReportType {\n  Custom = 'C',\n  Default = 'D',\n  FIDefault = 'F'\n}\n\nexport interface ReportSummary {\n  reportid: number;\n  reportName: string;\n  reportType: ReportType\n}\n\nexport interface ReportCategory {\n  categoryId: number;\n  categoryName: string;\n  reportList: ReportSummary[];\n}\n\nexport interface ReportList {\n  popularCount: number;\n  totalReportCount: number;\n  customReportCount: number;\n  categoryList: ReportCategory[];\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ReportListService {\n  private serviceURL: string = '';\n  private advisorID: string = '';\n\n  constructor(private http: HttpClient) {\n    const pageData = (<any> window).AppSettings;\n    if (pageData && pageData.serviceBusURL) {\n      this.serviceURL = pageData.serviceBusURL + '/report-builder-service';\n    }\n    else {\n      this.serviceURL = 'https://dummylocation.com/report-builder-service';\n    }\n    if (pageData && pageData.advisorID) this.advisorID = pageData.advisorID;\n  }\n\n  getReportList(): Observable<ReportList> {\n    if (!environment.production) {\n      return of(allReportsData);\n    }\n\n    let postParams = new HttpParams();\n    postParams.append('srcDefConst','reportBuilder');\n    postParams.append('pageMode','componentData');\n    postParams.append('formatType','html');\n\n    let headers = new HttpHeaders();\n    headers = headers.set('Content-Type', 'application/json');\n\n    const jsonRequestBody = {advisorTaxId: this.advisorID};\n    return this.http.post<ReportList>(this.serviceURL + '/get-default-reports-list-metadata', jsonRequestBody, {headers: headers});\n  }\n\n}\n",
            "properties": [
                {
                    "name": "categoryId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "categoryName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "reportList",
                    "type": "ReportSummary[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ReportList",
            "id": "interface-ReportList-7107881524590770d3b3a3bc9e9bc2a7",
            "file": "projects/report-builder/src/app/page/report-list/report-list.service.ts",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { of, Observable } from 'rxjs';\nimport { HttpParams, HttpHeaders, HttpClient } from '@angular/common/http';\nimport { allReportsData } from './mock-data';\nimport { environment } from '../../../environments/environment';\n\nexport enum ReportType {\n  Custom = 'C',\n  Default = 'D',\n  FIDefault = 'F'\n}\n\nexport interface ReportSummary {\n  reportid: number;\n  reportName: string;\n  reportType: ReportType\n}\n\nexport interface ReportCategory {\n  categoryId: number;\n  categoryName: string;\n  reportList: ReportSummary[];\n}\n\nexport interface ReportList {\n  popularCount: number;\n  totalReportCount: number;\n  customReportCount: number;\n  categoryList: ReportCategory[];\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ReportListService {\n  private serviceURL: string = '';\n  private advisorID: string = '';\n\n  constructor(private http: HttpClient) {\n    const pageData = (<any> window).AppSettings;\n    if (pageData && pageData.serviceBusURL) {\n      this.serviceURL = pageData.serviceBusURL + '/report-builder-service';\n    }\n    else {\n      this.serviceURL = 'https://dummylocation.com/report-builder-service';\n    }\n    if (pageData && pageData.advisorID) this.advisorID = pageData.advisorID;\n  }\n\n  getReportList(): Observable<ReportList> {\n    if (!environment.production) {\n      return of(allReportsData);\n    }\n\n    let postParams = new HttpParams();\n    postParams.append('srcDefConst','reportBuilder');\n    postParams.append('pageMode','componentData');\n    postParams.append('formatType','html');\n\n    let headers = new HttpHeaders();\n    headers = headers.set('Content-Type', 'application/json');\n\n    const jsonRequestBody = {advisorTaxId: this.advisorID};\n    return this.http.post<ReportList>(this.serviceURL + '/get-default-reports-list-metadata', jsonRequestBody, {headers: headers});\n  }\n\n}\n",
            "properties": [
                {
                    "name": "categoryList",
                    "type": "ReportCategory[]",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "customReportCount",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "popularCount",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "totalReportCount",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ReportSummary",
            "id": "interface-ReportSummary-7107881524590770d3b3a3bc9e9bc2a7",
            "file": "projects/report-builder/src/app/page/report-list/report-list.service.ts",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { of, Observable } from 'rxjs';\nimport { HttpParams, HttpHeaders, HttpClient } from '@angular/common/http';\nimport { allReportsData } from './mock-data';\nimport { environment } from '../../../environments/environment';\n\nexport enum ReportType {\n  Custom = 'C',\n  Default = 'D',\n  FIDefault = 'F'\n}\n\nexport interface ReportSummary {\n  reportid: number;\n  reportName: string;\n  reportType: ReportType\n}\n\nexport interface ReportCategory {\n  categoryId: number;\n  categoryName: string;\n  reportList: ReportSummary[];\n}\n\nexport interface ReportList {\n  popularCount: number;\n  totalReportCount: number;\n  customReportCount: number;\n  categoryList: ReportCategory[];\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ReportListService {\n  private serviceURL: string = '';\n  private advisorID: string = '';\n\n  constructor(private http: HttpClient) {\n    const pageData = (<any> window).AppSettings;\n    if (pageData && pageData.serviceBusURL) {\n      this.serviceURL = pageData.serviceBusURL + '/report-builder-service';\n    }\n    else {\n      this.serviceURL = 'https://dummylocation.com/report-builder-service';\n    }\n    if (pageData && pageData.advisorID) this.advisorID = pageData.advisorID;\n  }\n\n  getReportList(): Observable<ReportList> {\n    if (!environment.production) {\n      return of(allReportsData);\n    }\n\n    let postParams = new HttpParams();\n    postParams.append('srcDefConst','reportBuilder');\n    postParams.append('pageMode','componentData');\n    postParams.append('formatType','html');\n\n    let headers = new HttpHeaders();\n    headers = headers.set('Content-Type', 'application/json');\n\n    const jsonRequestBody = {advisorTaxId: this.advisorID};\n    return this.http.post<ReportList>(this.serviceURL + '/get-default-reports-list-metadata', jsonRequestBody, {headers: headers});\n  }\n\n}\n",
            "properties": [
                {
                    "name": "reportid",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "reportName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "reportType",
                    "type": "ReportType",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Safe",
            "id": "interface-Safe-40d20bedb7d961978f456c22a1618f0f",
            "file": "projects/report-builder/src/app/component/summary/summary-customization.component.ts",
            "type": "interface",
            "sourceCode": "import {COMMA, ENTER} from '@angular/cdk/keycodes';\nimport {Component, ElementRef, ViewChild} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {MatAutocompleteSelectedEvent, MatAutocomplete, MatAutocompleteTrigger} from '@angular/material/autocomplete';\nimport {MatChipInputEvent} from '@angular/material/chips';\nimport {Observable} from 'rxjs';\nimport {map, startWith} from 'rxjs/operators';\nimport {CdkDragDrop, moveItemInArray, transferArrayItem} from '@angular/cdk/drag-drop';\nimport {\n  DisplayGrid,\n  Draggable,\n  GridsterComponentInterface,\n  GridsterConfig,\n  GridsterItem,\n  GridType,\n  CompactType\n} from 'angular-gridster2';\n\nexport interface Safe extends GridsterConfig {\n  draggable: Draggable;\n}\n\n@Component({\n  selector: 'app-summary-customization',\n  templateUrl: './summary-customization.component.html',\n  styleUrls: ['./summary-customization.component.scss']\n})\nexport class SummaryCustomizationComponent {\n  visible = true;\n  selectable = true;\n  removable = true;\n  separatorKeysCodes: number[] = [ENTER, COMMA];\n  dataInputCtrl = new FormControl();\n  filteredData: Observable<string[]>;\n  selectedData: string[] = ['Net Contribution'];\n  allData: string[] = ['Beginnning Value', 'Return', 'Ending Value', 'Realized Gain/Loss', 'Unrealized Gain/Loss'];\n\n  @ViewChild('dataInput') dataInput: ElementRef<HTMLInputElement>;\n  @ViewChild('dataInput', { read: MatAutocompleteTrigger }) dataInputTrigger: MatAutocompleteTrigger;\n  \n  @ViewChild('auto') matAutocomplete: MatAutocomplete;\n\n  constructor() {\n    this.filteredData = this.dataInputCtrl.valueChanges.pipe(\n        startWith(null),\n        map((dataPoint: string | null) => dataPoint ? this._filter(dataPoint) : this.allData.slice()));\n  }\n\n  add(event: MatChipInputEvent): void {\n    const input = event.input;\n    const value = event.value;\n\n    // Add our datapoint\n    if ((value || '').trim()) {\n      const dataPoint = value.trim();\n      const index = this.allData.indexOf(dataPoint);\n  \n      if (index >= 0) {\n        transferArrayItem(this.allData,this.selectedData,index,this.selectedData.length)\n      }\n  \n      //this.selectedData.push(value.trim());\n    }\n\n    // Reset the input value\n    if (input) {\n      input.value = '';\n    }\n\n    this.dataInputCtrl.setValue(null);\n    this.dataInputTrigger.openPanel();\n  }\n\n  remove(dataPoint: string): void {\n    const index = this.selectedData.indexOf(dataPoint);\n\n    if (index >= 0) {\n      transferArrayItem(this.selectedData,this.allData,index,this.allData.length)\n      //this.selectedData.splice(index, 1);\n    }\n  }\n\n  selected(event: MatAutocompleteSelectedEvent): void {\n    const dataPoint = event.option.viewValue;\n    const index = this.allData.indexOf(dataPoint);\n\n    if (index >= 0) {\n      transferArrayItem(this.allData,this.selectedData,index,this.selectedData.length)\n    }\n   //this.selectedData.push(event.option.viewValue);\n    this.dataInput.nativeElement.value = '';\n    this.dataInputCtrl.setValue(null);\n  }\n\n  private _filter(value: string): string[] {\n    const filterValue = value.toLowerCase();\n\n    return this.allData.filter(dataPoint => dataPoint.toLowerCase().indexOf(filterValue) === 0);\n  }\n\n  //Drag Drop option\n\n  option2AvailableData: string[] = [ 'Beginnning Value', 'Return', 'Ending Value', 'Realized Gain/Loss', 'Unrealized Gain/Loss'];\n  option2SelectedData: string[] = ['Net Contribution'];\n\n  drop(event: CdkDragDrop<string[]>) {\n    if (event.previousContainer === event.container) {\n      moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);\n      console.log(event.container.data, event.previousIndex, event.currentIndex);\n    } else {\n      transferArrayItem(event.previousContainer.data,\n                        event.container.data,\n                        event.previousIndex,\n                        event.currentIndex);\n    }\n  }\n\n  addChip(dataPoint: string){\n    const index = this.option2AvailableData.indexOf(dataPoint);\n    if (index >= 0) {\n      transferArrayItem(this.option2AvailableData,this.option2SelectedData,index,this.option2SelectedData.length);\n    }\n  }\n  removeChip(dataPoint: string){\n    const index = this.option2SelectedData.indexOf(dataPoint);\n    if (index >= 0) {\n      transferArrayItem(this.option2SelectedData,this.option2AvailableData,index,this.option2AvailableData.length);\n    }\n  }\n\n  //Option 3 stuff\n  baseOptions = {\n    displayGrid: DisplayGrid.OnDragAndResize,\n    disableWarnings: true,\n    swap: true,\n    margin: 5,\n    outerMargin: true,\n    minCols: 3,\n    maxCols: 3,\n    minRows: 1,\n    maxRows: 3,\n    minItemCols: 1,\n    maxItemCols: 1,\n    minItemRows: 1,\n    maxItemRows: 1,\n    minItemArea: 1,\n    defaultItemCols: 1,\n    defaultItemRows: 1,\n    gridType: GridType.VerticalFixed,\n    fixedRowHeight: 40,\n    compactType: CompactType.CompactUp,\n    enableEmptyCellDrop: true,\n    enableOccupiedCellDrop: true,\n    pushItems: true,\n    pushResizeItems: true,\n    draggable: {\n      delayStart: 0,\n      enabled: true,\n      ignoreContentClass: 'gridster-item-content',\n      ignoreContent: false,\n      dragHandleClass: 'drag-handler',\n      dropOverItems: true,\n    },\n    resizable: {\n      enabled: false\n    },\n    emptyCellDropCallback: this.emptyCellDrop.bind(this),\n  }\n  emptyCellDrop(event: DragEvent, item: GridsterItem) {\n    let index = +event.dataTransfer.getData('Text');\n\n    if (index >= 0) {\n      transferArrayItem(this.option3Available,this.option3Selected,index,this.option3Selected.length)\n    }\n    //this.option3Selected.push(newItem);\n  }\n  option3Available: Array<GridsterItem> = [\n    {cols: 1, rows: 1, y: 0, x: 0, hasContent: false,  dragEnabled: true, resizeEnabled: false, delete: true, label: 'Beginnning Value'},\n    {cols: 1, rows: 1, y: 0, x: 0, hasContent: false,  dragEnabled: true, resizeEnabled: false, delete: true, label: 'Return'},\n    {cols: 1, rows: 1, y: 0, x: 0, hasContent: false,  dragEnabled: true, resizeEnabled: false, delete: true, label: 'Ending Value'},\n    {cols: 1, rows: 1, y: 0, x: 0, hasContent: false,  dragEnabled: true, resizeEnabled: false, delete: true, label: 'Realized Gain/Loss'},\n    {cols: 1, rows: 1, y: 0, x: 0, hasContent: false,  dragEnabled: true, resizeEnabled: false, delete: true, label: 'Unrealized Gain/Loss'},\n    {cols: 1, rows: 1, y: 0, x: 0, hasContent: false,  dragEnabled: true, resizeEnabled: false, delete: true, label: 'Net Contributions'},\n  ];\n  option3Selected: Array<GridsterItem> = []\n\n  dragStartHandler(event: DragEvent, index: number) {\n    event.dataTransfer.setData('Text', index.toString());\n    event.dataTransfer.dropEffect = 'copy';\n  }\n  remove3Item($event, item: GridsterItem) {\n    $event.preventDefault();\n    $event.stopPropagation();\n    let index = this.option3Selected.indexOf(item);\n\n    if (index >= 0) {\n      transferArrayItem(this.option3Selected,this.option3Available,index,this.option3Available.length)\n    }\n  }\n  add3(item: GridsterItem) {\n    let index = this.option3Available.indexOf(item);\n\n    if (index >= 0) {\n      transferArrayItem(this.option3Available,this.option3Selected,index,this.option3Selected.length)\n    }\n  }\n}",
            "properties": [
                {
                    "name": "draggable",
                    "type": "Draggable",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "GridsterConfig"
        },
        {
            "name": "Safe",
            "id": "interface-Safe-8ba882b7e436b9570ff1dfa03309b89d-1",
            "file": "projects/report-builder/src/app/page/report-builder/section.ts",
            "type": "interface",
            "sourceCode": "import { isArray, isUndefined } from 'util';\r\nimport {\r\n  DisplayGrid,\r\n  Draggable,\r\n  GridsterComponentInterface,\r\n  GridsterConfig,\r\n  GridsterItem,\r\n  GridType,\r\n  CompactType\r\n} from 'angular-gridster2';\r\n\r\nexport interface Safe extends GridsterConfig {\r\n  draggable: Draggable;\r\n}\r\n\r\nexport enum PageType {\r\n  SinglePage,\r\n  MultiPage\r\n}\r\n\r\nexport enum SectionType {\r\n  Header,\r\n  Footer,\r\n  Fixed,\r\n  Dynamic\r\n}\r\n\r\nexport class Section {\r\n  portraitOrientation: boolean = false;\r\n  type: SectionType;\r\n  dashboard: Array<GridsterItem> = [];\r\n  sectionOptions: Safe;\r\n  components: Array<GridsterItem>;\r\n  hasLayoutError: boolean = false;\r\n  height: number = 2;\r\n  constructor (type: SectionType){\r\n    this.type = type;\r\n\r\n    const baseoptions = {\r\n      displayGrid: DisplayGrid.Always,\r\n      pushItems: false,\r\n      disableWarnings: true,\r\n      swap: true,\r\n      margin: 5,\r\n      outerMargin: true,\r\n      minCols: 20,\r\n      maxCols: 20,\r\n      minRows: 1,\r\n      minItemCols: 1,\r\n      maxItemCols: 20,\r\n      minItemRows: 1,\r\n      minItemArea: 1,\r\n      defaultItemCols: 1,\r\n      defaultItemRows: 1\r\n    }\r\n    const headerOptions = {\r\n      ...baseoptions,\r\n      gridType: GridType.VerticalFixed,\r\n      fixedRowHeight: 135,\r\n      compactType: CompactType.None,\r\n      maxRows: 1,\r\n      maxItemRows: 1,\r\n      draggable: {\r\n        enabled: false\r\n      },\r\n      resizable: {\r\n        enabled: false\r\n      },\r\n    }\r\n    const footerOptions = {\r\n      ...baseoptions,\r\n      gridType: GridType.VerticalFixed,\r\n      fixedRowHeight: 83,\r\n      compactType: CompactType.None,\r\n      maxRows: 1,\r\n      maxItemRows: 1,\r\n      draggable: {\r\n        enabled: false\r\n      },\r\n      resizable: {\r\n        enabled: false\r\n      },\r\n    }\r\n    const dynamicOptions = {\r\n      ...baseoptions,\r\n      gridType: GridType.VerticalFixed,\r\n      fixedRowHeight: 80,\r\n      compactType: CompactType.CompactUp,\r\n      minRows: 5,\r\n      maxRows: 30,\r\n      maxItemRows: 10,\r\n      enableEmptyCellDrop: true,\r\n      enableOccupiedCellDrop: true,\r\n      pushItems: true,\r\n      pushResizeItems: true,\r\n      scrolltoNewItems: true,\r\n      draggable: {\r\n        delayStart: 0,\r\n        enabled: true,\r\n        ignoreContentClass: 'gridster-item-content',\r\n        ignoreContent: false,\r\n        dragHandleClass: 'drag-handler',\r\n        dropOverItems: true,\r\n      },\r\n      resizable: {\r\n        enabled: true\r\n      },\r\n    }\r\n    const fixedOptions = {\r\n      ...baseoptions,\r\n      gridType: GridType.Fit,\r\n      compactType: CompactType.None,\r\n      minRows: 24,\r\n      maxRows: 24,\r\n      maxItemRows: 24,\r\n      enableEmptyCellDrop: true,\r\n      enableOccupiedCellDrop: true,\r\n      pushItems: true,\r\n      pushResizeItems: true,\r\n      draggable: {\r\n        delayStart: 0,\r\n        enabled: true,\r\n        ignoreContentClass: 'gridster-item-content',\r\n        ignoreContent: false,\r\n        dragHandleClass: 'drag-handler',\r\n        dropOverItems: true,\r\n      },\r\n      resizable: {\r\n        enabled: true\r\n      },\r\n    }\r\n    \r\n    switch (type) {\r\n      case SectionType.Header:\r\n        this.sectionOptions = headerOptions;\r\n        this.height = 152;\r\n      break;\r\n      case SectionType.Footer:\r\n        this.sectionOptions = footerOptions;\r\n        this.height = 100;\r\n      break;\r\n      case SectionType.Dynamic:\r\n        this.sectionOptions = dynamicOptions;\r\n        this.height = 437;\r\n      break;\r\n      case SectionType.Fixed:\r\n        this.sectionOptions = fixedOptions;\r\n        this.gridLayoutChanged();\r\n      break;\r\n      default:\r\n      break;\r\n    }\r\n  }\r\n\r\n  gridLayoutChanged() {\r\n    if(this.type === SectionType.Fixed) {\r\n      if( this.portraitOrientation) this.height = 900;\r\n      else this.height = 650;\r\n    }\r\n  }\r\n  gridSizeChanged(grid: GridsterComponentInterface) {\r\n    // console.info('gridSizeChanged', grid);\r\n    if (this.type === SectionType.Dynamic) {this.height = grid.rows * 86 + 4; }\r\n  };\r\n  emptyCellDrop(event: DragEvent, item: GridsterItem) {\r\n    let index = +event.dataTransfer.getData('Text');\r\n    const component = this.components[index];\r\n    let newItem = {...component};\r\n    newItem.x = item.x;\r\n    newItem.y = item.y;\r\n    newItem.outputs = {optionsOuput: newOptions => this.handleOptionReturn.bind(newItem)(newOptions)};\r\n    this.dashboard.push(newItem);\r\n  }\r\n  // This function binding allows any options being returned to be saved to the right component so that save is trivial save of the dashboard list of items.\r\n  handleOptionReturn(this: any, newOptions: any) {\r\n    this.options = newOptions;\r\n  }\r\n  removeItem($event, item) {\r\n    $event.preventDefault();\r\n    $event.stopPropagation();\r\n    this.dashboard.splice(this.dashboard.indexOf(item), 1);\r\n  }\r\n  checkLayoutForSection(this: Section){\r\n    // Now check for layout errors\r\n    this.hasLayoutError = false;\r\n    let columns = {};\r\n    //organize widgets into columns based on starting x positions.\r\n    if (this.dashboard.length < 2) {return; }\r\n    for (let index = 0; index < this.dashboard.length; index++) {\r\n      const item = this.dashboard[index];\r\n      for (let index2 = 0; index2 < this.dashboard.length; index2++) {\r\n        const item2 = this.dashboard[index2];\r\n        if (item.x !== item2.x && item.x < item2.x && ((item.x + item.cols) > item2.x)) {\r\n          this.hasLayoutError = true;\r\n          return;\r\n        }\r\n      }\r\n      if (columns.hasOwnProperty(item.x) && isArray(columns[item.x])) {columns[item.x].push(item); }\r\n      else {columns[item.x] = [item]; }\r\n    }\r\n    for (const key in columns) {\r\n      if (columns.hasOwnProperty(key)) {\r\n        const column = columns[key];\r\n        if (isArray(column) && column.length > 1 ) {\r\n          const width = column[0].cols;\r\n          for (let index = 0; index < column.length; index++) {\r\n            const item = column[index];\r\n            if (item.cols !== width) {\r\n              this.hasLayoutError = true;\r\n              return;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "draggable",
                    "type": "Draggable",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "GridsterConfig",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "Safe-1"
        },
        {
            "name": "Selection",
            "id": "interface-Selection-3f635220d58f15bbac368629a84a3cc0",
            "file": "projects/wri-holdings/src/lib/wri-holdings.service.ts",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { of, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { HttpParams, HttpHeaders, HttpClient, HttpErrorResponse } from '@angular/common/http';\n\nexport interface Selection {\n  value: string;\n  viewValue: string;\n}\n\nexport interface DataColumn extends Selection {\n  parentValue?: string;\n  isNumber?: boolean;\n  isAdditive?: boolean;\n}\n\nexport class AvailableColumnOptions {\n  static columnOptions: DataColumn[] = [\n    {value: 'quantity', viewValue: 'Quantity', parentValue: \"holding\", isNumber: true},\n    {value: 'price', viewValue: 'Price ($)', parentValue: \"holding\", isNumber: true},\n    {value: 'value', viewValue: 'Value ($)', parentValue: \"holding\", isNumber: true, isAdditive: true},\n    {value: 'ror', viewValue: 'Rate of Return', parentValue: \"holding\", isNumber: true},\n    {value: 'yield', viewValue: 'Current Yield (%)', parentValue: \"holding\", isNumber: true},\n    {value: 'percentageOfAccount', viewValue: '% of Account', parentValue: \"holding\", isNumber: true, isAdditive: true},\n    {value: 'estimatedAnnualIncome', viewValue: 'Estimated Annual Income ($)', parentValue: \"holding\", isNumber: true, isAdditive: true},\n    {value: 'cost', viewValue: 'Cost ($)', parentValue: \"holding\", isNumber: true, isAdditive: true},\n    {value: 'unrealizedGainLoss', viewValue: 'Unrealized Gain/Loss ($)', parentValue: \"holding\", isNumber: true, isAdditive: true},\n    {value: 'beginningValue', viewValue: 'Beginning Value', parentValue: \"holding\", isNumber: true, isAdditive: true},\n    {value: 'netContribution', viewValue: 'Net Contribution', parentValue: \"holding\", isNumber: true, isAdditive: true},\n    {value: 'changeInValue', viewValue: 'Change In Value', parentValue: \"holding\", isNumber: true, isAdditive: true},\n    {value: 'assetName', viewValue: 'Asset Name', parentValue: \"asset\"},\n    {value: 'ticker', viewValue: 'Ticker Synbol', parentValue: \"asset\"},\n    {value: 'mgmtCompany', viewValue: 'Management Company', parentValue: \"asset\"},\n    {value: 'morningstarRating', viewValue: 'Morningstar Rating', parentValue: \"asset\"},\n    {value: 'assetType', viewValue: 'Asset Type', parentValue: \"asset\"},\n    {value: 'assetClass1Name', viewValue: 'ACL 1 Name', parentValue: \"assetClass1\"},\n    {value: 'assetClass2Name', viewValue: 'ACL 2 Name', parentValue: \"assetClass2\"},\n    {value: 'assetClass3Name', viewValue: 'ACL 3 Name', parentValue: \"assetClass3\"},\n    {value: 'investorId', viewValue: 'Investor ID', parentValue: \"investor\"},\n    {value: 'investorName', viewValue: 'Investor Name', parentValue: \"investor\"},\n    {value: 'acctNum', viewValue: 'Account Number', parentValue: \"account\"},\n    {value: 'acctName', viewValue: 'Account Name', parentValue: \"account\"},\n    {value: 'combinedAccountName', viewValue: 'Account Name / Manager / Style Name as applicable', parentValue: \"account\"},\n    {value: 'mgrName', viewValue: 'Manager Name', parentValue: \"account\"},\n    {value: 'productName', viewValue: 'Product Name', parentValue: \"account\"},\n    {value: 'style', viewValue: 'Style', parentValue: \"account\"},\n    {value: 'accountType', viewValue: 'Account Type', parentValue: \"account\"},\n    {value: 'taxStatus', viewValue: 'Tax Status', parentValue: \"account\"},\n  ];\n}\n\nexport class Category {\n  categoryId: string;\n  categoryPrimaryKey: any;\n  subCategories: Category[] = [];\n  categoryData = [];\n  summaryData = {};\n}\n\nexport interface HoldingsCustomizationOptions {\n  category1?: string;\n  category2?: string;\n  category3?: string;\n  category1Data?: Array<DataColumn>;\n  category2Data?: Array<DataColumn>;\n  category3Data?: Array<DataColumn>;\n  dataColumns?: Array<DataColumn>;\n  showInsuranceData?: boolean;\n}\n\n\nexport class CategorizedData {\n  isCategorized: boolean;\n  uncategorizedData: Category;\n  categorizedData: Category[];\n}\n\n\n@Injectable()\nexport class WRIHoldingsService {\n  jwtToken: string = '';\n  serviceURL: string = '';\n  advisorID: string = '';\n  private dataSet1 = [];\n  private dataSet2 = [];\n\n  constructor(private http: HttpClient) {\n    const pageData = (<any> window).AppSettings;\n    if (pageData && pageData.jwtToken) this.jwtToken = pageData.jwtToken;\n    if (pageData && pageData.serviceBusURL) {\n      this.serviceURL = pageData.serviceBusURL + '/report-builder-service';\n    }\n    else {\n      this.serviceURL = 'https://dummylocation.com/report-builder-service';\n    }\n    if (pageData && pageData.advisorID) this.advisorID = pageData.advisorID;\n  }\n\n  getData(options: HoldingsCustomizationOptions, dummyData: boolean = false) {\n    if (dummyData) {\n      return of(this.getDummyData(options));\n    }\n\n    let postParams = new HttpParams();\n    postParams.append('srcDefConst','reportBuilder');\n    postParams.append('pageMode','componentData');\n    postParams.append('formatType','html');\n\n    let headers = new HttpHeaders();\n    headers = headers.set('Content-Type', 'application/json');\n    headers = headers.set('Authorization', `Bearer ${this.jwtToken}`);\n    headers = headers.set('X-JWT-Assertion', this.jwtToken);\n\n    const jsonRequestBody = {advisorTaxId: this.advisorID};\n    return this.http.post(this.serviceURL + '/get-default-reports-list-metadata', jsonRequestBody, {headers: headers})\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n  private handleError(error: HttpErrorResponse) {\n    return throwError(error.status);\n  }\n\n  getDummyData(options: HoldingsCustomizationOptions) {\n        // Dummy data setup.\n        this.dataSet1 = [\n          {quantity: 7318.06, price: 1.00, value: 7318.06, ror: 12.534, yield: 0   , percentageOfAccount: 0.31, estimatedAnnualIncome: 0,      unrealizedGainLoss: 0,        cost: 0,        beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Brokerage Money Market\", ticker:\"\", mgmtCompany: null, morningstarRating: \"5 star\", assetType: \"Stock\", assetClass1Name: \"Cash or Equivalents\", assetClass2Name: \"Growth\", assetClass3Name: \"Technology\", investorName: \"Sample Investor\", acctNum: \"03004721 000\", acctName: \"The Oliver Wendell\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Giftc Custodial IRA\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123456\", assetId: \"CUSIPv 12345\", assetClass1Id: \"ACL1 ID 1\", assetClass2Id: \"ACL2 ID 1\", assetClass3Id: \"ACL3 ID 1\" },\n          {quantity: 600, price: 50.94, value:  30564, ror: 12.5345365, yield: 1.88, percentageOfAccount: 1.29, estimatedAnnualIncome: 576.00, unrealizedGainLoss: 14534.99, cost: 16029.01, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Abbot Laboratories\", ticker:\"abt\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"Mutual Fund\", assetClass1Name: \"Mutual Fund\", assetClass2Name: \"Growth\", assetClass3Name: \"Technology\", investorName: \"Sample Investor\", acctNum: \"03004721 000\", acctName: \"The Oliver Wendell\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Giftc Custodial IRA\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123456\", assetId: \"CUSIPv 12346\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 1\", assetClass3Id: \"ACL3 ID 1\" },\n          {quantity: 200, price:132.82, value:  26564, ror: 12.5345365, yield: 2.44, percentageOfAccount: 1.12, estimatedAnnualIncome: 648.00, unrealizedGainLoss: 12219.86, cost: 14344.14, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Air Products & chemicals Inc\", ticker:\"apd\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"Mutual Fund\", assetClass1Name: \"Mutual Fund\", assetClass2Name: \"Growth\", assetClass3Name: \"Technology\", investorName: \"Sample Investor\", acctNum: \"03004721 000\", acctName: \"The Oliver Wendell\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Giftc Custodial IRA\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123456\", assetId: \"CUSIPv 12347\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 1\", assetClass3Id: \"ACL3 ID 1\" },\n          {quantity: 500, price: 29.36, value:  14680, ror: 12.5345365, yield: 2.04, percentageOfAccount: 0.62, estimatedAnnualIncome: 300.00, unrealizedGainLoss:  1096.30, cost: 13583.70, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Allison Transmission HLDGS Inc.\", ticker:\"alsn\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"Mutual Fund\", assetClass1Name: \"Mutual Fund\", assetClass2Name: \"Growth\", assetClass3Name: \"Technology\", investorName: \"Sample Investor\", acctNum: \"03004721 000\", acctName: \"The Oliver Wendell\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Giftc Custodial IRA\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123456\", assetId: \"CUSIPv 12348\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 1\", assetClass3Id: \"ACL3 ID 1\" },\n          {quantity:1000, price:  8.54, value:  8540 , ror: 12.5345365, yield: 2.43, percentageOfAccount: 0.36, estimatedAnnualIncome: 125.43, unrealizedGainLoss: -2182.30, cost: 10722.30, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Apigee Corp\", ticker:\"apic\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"Mutual Fund\", assetClass1Name: \"Mutual Fund\", assetClass2Name: \"Balanced\", assetClass3Name: \"Industry\", investorName: \"Sample Investor\", acctNum: \"03004721 000\", acctName: \"The Oliver Wendell\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Giftc Custodial IRA\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123456\", assetId: \"CUSIPv 12349\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 2\", assetClass3Id: \"ACL3 ID 3\" },\n          {quantity: 280, price:123.38, value:34546.4, ror: 12.5345365, yield: 1.69, percentageOfAccount: 1.46, estimatedAnnualIncome: 582.40, unrealizedGainLoss: 13549.60, cost: 20996.80, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"apple inc\", ticker:\"aapl\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"Mutual Fund\", assetClass1Name: \"Mutual Fund\", assetClass2Name: \"Balanced\", assetClass3Name: \"Industry\", investorName: \"Sample Investor\", acctNum: \"03004721 000\", acctName: \"The Oliver Wendell\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Giftc Custodial IRA\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123456\", assetId: \"CUSIPv 12340\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 2\", assetClass3Id: \"ACL3 ID 3\" },\n          {quantity: 400, price: 54.76, value:  21904, ror: 12.5345365, yield: 2.44, percentageOfAccount: 0.92, estimatedAnnualIncome: 306.00, unrealizedGainLoss:   297.08, cost: 21606.92, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Armstrong World Industries Inc New\", ticker:\"awi\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"Mutual Fund\", assetClass1Name: \"Mutual Fund\", assetClass2Name: \"Balanced\", assetClass3Name: \"Industry\", investorName: \"Sample Investor\", acctNum: \"03004721 000\", acctName: \"The Oliver Wendell\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Giftc Custodial IRA\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123456\", assetId: \"CUSIPv 12341\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 2\", assetClass3Id: \"ACL3 ID 3\" },\n          {quantity: 200, price: 80.58, value:  16116, ror: 12.5345365, yield: 2.43, percentageOfAccount: 0.68, estimatedAnnualIncome: 392.00, unrealizedGainLoss:  9829.22, cost: 16116.00, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Automatic Data Processing Inc\", ticker:\"adp\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"Mutual Fund\", assetClass1Name: \"Mutual Fund\", assetClass2Name: \"Balanced\", assetClass3Name: \"Industry\", investorName: \"Sample Investor\", acctNum: \"03004721 000\", acctName: \"The Oliver Wendell\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Giftc Custodial IRA\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123456\", assetId: \"CUSIPv 12342\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 2\", assetClass3Id: \"ACL3 ID 3\" },\n        ];\n        this.dataSet2 = [\n          {quantity: 1200000, price: 25.56, value: 5112, ror: 12.5345365, yield: 2.56, percentageOfAccount: 25.45655, estimatedAnnualIncome: 400.00, unrealizedGainLoss: 3000.00, cost: 3000.00, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Apple Inc.\", ticker:\"appl\", mgmtCompany: null, morningstarRating: \"5 star\", assetType: \"Stock\", assetClass1Name: \"Large Cap\", assetClass2Name: \"Growth\", assetClass3Name: \"Technology\", investorName: \"Investor Name 1\", acctNum: \"127635417236\", acctName: \"Short Account Name 1\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Retail\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123456\", assetId: \"CUSIPv 12345\", assetClass1Id: \"ACL1 ID 1\", assetClass2Id: \"ACL2 ID 1\", assetClass3Id: \"ACL3 ID 1\" },\n          {quantity: 200, price: 25.56, value: 5112, ror: 12.5345365, yield: 2.56, percentageOfAccount: 25.45655, estimatedAnnualIncome: 400.00, unrealizedGainLoss: 3000.00, cost: 3000.00, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Apple Inc.\", ticker:\"appl\", mgmtCompany: null, morningstarRating: \"5 star\", assetType: \"Stock\", assetClass1Name: \"Large Cap\", assetClass2Name: \"Growth\", assetClass3Name: \"Technology\", investorName: \"Investor Name 1\", acctNum: \"127635417237\", acctName: \"Short Account Name 2\", combinedAccountName: \"Lion Account\", mgrName: \"Blackrock\", productName: \"Lion Account\", style: \"Growth\", accountType: \"Retail\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123457\", assetId: \"CUSIPv 12345\", assetClass1Id: \"ACL1 ID 1\", assetClass2Id: \"ACL2 ID 1\", assetClass3Id: \"ACL3 ID 1\" },\n          {quantity: 200, price: 25.56, value: 5112, ror: 12.5345365, yield: 2.56, percentageOfAccount: 25.45655, estimatedAnnualIncome: 400.00, unrealizedGainLoss: 3000.00, cost: 3000.00, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Apple Inc.\", ticker:\"appl\", mgmtCompany: null, morningstarRating: \"5 star\", assetType: \"Stock\", assetClass1Name: \"Large Cap\", assetClass2Name: \"Growth\", assetClass3Name: \"Technology\", investorName: \"Investor Name 2\", acctNum: \"127635417236\", acctName: \"Short Account Name 1\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Retail\", taxStatus: \"Post Tax\", investorId: \"123457\", acctId: \"123456\", assetId: \"CUSIPv 12345\", assetClass1Id: \"ACL1 ID 1\", assetClass2Id: \"ACL2 ID 1\", assetClass3Id: \"ACL3 ID 1\" },\n          {quantity: 200, price: 25.56, value: 5112, ror: 12.5345365, yield: 2.56, percentageOfAccount: 25.45655, estimatedAnnualIncome: 400.00, unrealizedGainLoss: 3000.00, cost: 3000.00, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Apple Inc.\", ticker:\"appl\", mgmtCompany: null, morningstarRating: \"5 star\", assetType: \"Stock\", assetClass1Name: \"Large Cap\", assetClass2Name: \"Growth\", assetClass3Name: \"Technology\", investorName: \"Investor Name 2\", acctNum: \"127635417237\", acctName: \"Short Account Name 2\", combinedAccountName: \"Lion Account\", mgrName: \"Blackrock\", productName: \"Lion Account\", style: \"Growth\", accountType: \"Retail\", taxStatus: \"Post Tax\", investorId: \"123457\", acctId: \"123457\", assetId: \"CUSIPv 12345\", assetClass1Id: \"ACL1 ID 1\", assetClass2Id: \"ACL2 ID 1\", assetClass3Id: \"ACL3 ID 1\" },\n          {quantity: 200, price: 25.56, value: 5112, ror: 12.5345365, yield: 2.56, percentageOfAccount: 25.45655, estimatedAnnualIncome: 400.00, unrealizedGainLoss: 3000.00, cost: 3000.00, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"QQQ ETF\", ticker:\"QQQ\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"ETF\", assetClass1Name: \"Index Fund\", assetClass2Name: \"Balanced\", assetClass3Name: \"Industry\", investorName: \"Investor Name 1\", acctNum: \"127635417236\", acctName: \"Short Account Name 1\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Retail\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123456\", assetId: \"CUSIPv 12346\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 2\", assetClass3Id: \"ACL3 ID 3\" },\n          {quantity: 200, price: 25.56, value: 5112, ror: 12.5345365, yield: 2.56, percentageOfAccount: 25.45655, estimatedAnnualIncome: 400.00, unrealizedGainLoss: 3000.00, cost: 3000.00, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"QQQ ETF\", ticker:\"QQQ\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"ETF\", assetClass1Name: \"Index Fund\", assetClass2Name: \"Balanced\", assetClass3Name: \"Industry\", investorName: \"Investor Name 1\", acctNum: \"127635417237\", acctName: \"Short Account Name 2\", combinedAccountName: \"Lion Account\", mgrName: \"Blackrock\", productName: \"Lion Account\", style: \"Growth\", accountType: \"Retail\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123457\", assetId: \"CUSIPv 12346\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 2\", assetClass3Id: \"ACL3 ID 3\" },\n          {quantity: 200, price: 25.56, value: 5112, ror: 12.5345365, yield: 2.56, percentageOfAccount: 25.45655, estimatedAnnualIncome: 400.00, unrealizedGainLoss: 3000.00, cost: 3000.00, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"QQQ ETF\", ticker:\"QQQ\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"ETF\", assetClass1Name: \"Index Fund\", assetClass2Name: \"Balanced\", assetClass3Name: \"Industry\", investorName: \"Investor Name 2\", acctNum: \"127635417236\", acctName: \"Short Account Name 1\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Retail\", taxStatus: \"Post Tax\", investorId: \"123457\", acctId: \"123456\", assetId: \"CUSIPv 12346\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 2\", assetClass3Id: \"ACL3 ID 3\" },\n          {quantity: 200, price: 25.56, value: 5112, ror: 12.5345365, yield: 2.56, percentageOfAccount: 25.45655, estimatedAnnualIncome: 400.00, unrealizedGainLoss: 3000.00, cost: 3000.00, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"QQQ ETF\", ticker:\"QQQ\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"ETF\", assetClass1Name: \"Index Fund\", assetClass2Name: \"Balanced\", assetClass3Name: \"Industry\", investorName: \"Investor Name 2\", acctNum: \"127635417237\", acctName: \"Short Account Name 2\", combinedAccountName: \"Lion Account\", mgrName: \"Blackrock\", productName: \"Lion Account\", style: \"Growth\", accountType: \"Retail\", taxStatus: \"Post Tax\", investorId: \"123457\", acctId: \"123457\", assetId: \"CUSIPv 12346\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 2\", assetClass3Id: \"ACL3 ID 3\" },\n        ];\n        return this.separateDataIntoCategories(this.dataSet2, options);\n        // Dummy data setup complete.    \n    \n  }\n\n  separateDataIntoCategories(dataTable: Array<any>, options: HoldingsCustomizationOptions){\n    const categories: Category[] = [];\n    let returnValue = new CategorizedData();\n    returnValue.categorizedData = categories;\n    if (options.category1 === null) {\n      //Nocategories defined. So use full Data Table.\n      let uncategorized: Category = {\n        categoryId: \"\",\n        categoryPrimaryKey: \"\",\n        categoryData: [],\n        subCategories: [],\n        summaryData: {}\n      };\n      uncategorized.categoryData = dataTable;\n      this.calculateSummaryData(uncategorized, options);\n      returnValue.isCategorized = false;\n      returnValue.uncategorizedData = uncategorized;\n      return returnValue;\n    }\n    // Need to separate rows into categories\n    // identify Primary column in data.\n    let primaryColumn = this.identifyPrimaryColumn(options.category1);\n    this.allocateRowsToCategory(dataTable, categories, primaryColumn);\n    categories.forEach(category1 => {\n      this.calculateSummaryData(category1, options);\n      if (options.category2 !== null) {\n        //need to further categorize.\n        primaryColumn = this.identifyPrimaryColumn(options.category2);\n        category1.subCategories = [];\n        this.allocateRowsToCategory(category1.categoryData, category1.subCategories, primaryColumn);\n        category1.subCategories.forEach(category2 => {\n          this.calculateSummaryData(category2, options);\n          if (options.category3 !== null) {\n            //need to further categorize.\n            primaryColumn = this.identifyPrimaryColumn(options.category3);\n            category2.subCategories = [];\n            this.allocateRowsToCategory(category2.categoryData, category2.subCategories, primaryColumn);        \n            category2.subCategories.forEach(category3 => {\n              this.calculateSummaryData(category3, options);\n            });\n          }  \n        });\n      }  \n    });\n    returnValue.isCategorized = true;\n    returnValue.categorizedData = categories;\n    return returnValue;\n  }\n\n  calculateSummaryData(category: Category, options: HoldingsCustomizationOptions) {\n    category.summaryData = {};\n    options.dataColumns.forEach(column => {\n      if(column.isNumber && column.isAdditive) {\n        let sum = 0;\n        for (let index = 0; index < category.categoryData.length; index++) {\n          const row = category.categoryData[index];\n          sum = sum + (+row[column.value]);\n        }\n        if (isNaN(sum)) { sum=0;}\n        category.summaryData[column.value] = sum;\n      }\n    });\n  }\n\n  allocateRowsToCategory(dataSet: any[], categories: Category[], primaryColumn: string){\n    dataSet.forEach(row => {\n      const primaryKey = row[primaryColumn];\n      if(primaryKey === null) {return;} // Ignore row as it cannot be categorized.\n      let found = false;\n      for (let index = 0; index < categories.length; index++) {\n        const category = categories[index];\n        if(category.categoryPrimaryKey === primaryKey) {\n          found = true;\n          category.categoryData.push(row);\n        }\n      }\n      if (!found) {\n        let newCategory: Category = new Category();\n        newCategory.categoryId = primaryColumn;\n        newCategory.categoryPrimaryKey = primaryKey;\n        newCategory.categoryData = [row];\n        categories.push(newCategory);\n      }\n    });\n  }\n\n  identifyPrimaryColumn(category: string) {\n    let primaryColumn = null;\n    switch (category) {\n      case \"account\":\n        primaryColumn = \"acctId\";\n      break;\n      case \"investor\":\n        primaryColumn = \"investorId\";\n      break;\n      case \"asset\":\n        primaryColumn = \"assetId\";\n      break;\n      case \"assetClass1\":\n        primaryColumn = \"assetClass1Id\";\n      break;\n      case \"assetClass2\":\n        primaryColumn = \"assetClass2Id\";\n      break;\n      case \"assetClass3\":\n        primaryColumn = \"acctClass3Id\";\n      break;\n      default:\n      break;\n    }\n    return primaryColumn;\n  }\n\n}\n",
            "properties": [
                {
                    "name": "value",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "viewValue",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "SingleOptionSet",
            "id": "interface-SingleOptionSet-d1c5f882d91d0ed89488c1e81824b2e1",
            "file": "projects/report-builder/src/app/common/multi-selection/multi-selection.component.ts",
            "type": "interface",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter, TemplateRef, OnChanges, SimpleChanges, ElementRef, ViewChild } from '@angular/core';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport {CdkDragDrop, moveItemInArray} from '@angular/cdk/drag-drop';\n\nexport interface SingleSelection{\n  name: String;\n  element: any;\n}\nexport interface SingleOptionSet {\n  options: SingleSelection[];\n  selectedOption: SingleSelection;\n}\nexport interface MultiSelectSelection extends SingleSelection{\n  selected:  boolean;\n  draggable: boolean;\n  disabled:  boolean;\n  subSelections?: MultiSelectSelection[];\n  subOptions?: SingleOptionSet;\n  selectionDetails?: string[];\n  showDetails?: boolean;\n}\n\nexport class MultiSelectSet {\n  selectionSet: MultiSelectSelection[] = [];\n  sortable: boolean = true;\n  name: string;\n  maxSelections: number;\n  minSelections: number = 0;\n  currentSelectedCount: number = 0;\n  sortableEndCount: number = 0; // Using end count because we are sorting the disabled items to the last of the sort list.\n  selectedAndNotDraggabledCount: number = 0; // This field is necessary to allow a set to have single selection set to have items that are diabled.\n}\n\n@Component({\n  selector: 'app-multi-selection',\n  templateUrl: './multi-selection.component.html',\n  styleUrls: ['./multi-selection.component.css']\n})\nexport class MultiSelectionComponent implements OnInit, OnChanges {\n  moveItemInArray = moveItemInArray;\n  @Input()\n  name: string;\n\n  @Input()\n  minimumSelections: number = 0;\n  disableSave: boolean = false;\n\n  @Input()\n  selectionSets: MultiSelectSet[];\n  internalSelectionSets: MultiSelectSet[] = [];\n\n  @Output()\n  newOptions = new EventEmitter<MultiSelectSet[]>();\n\n  dialogRef: MatDialogRef<any>;\n  \n  @ViewChild(\"myButton\", { read: ElementRef }) buttonRef: ElementRef;\n\n  constructor(public dialog: MatDialog) {\n  }\n\n  ngOnInit(): void {\n    this.setCurrentSelections(this.selectionSets);\n  }\n  ngOnChanges(changes: SimpleChanges) {\n    this.setCurrentSelections(changes.selectionSets.currentValue);\n  }\n\n  // This is the core of the logic to make the component work.\n  setCurrentSelections(selectionSets: MultiSelectSet[]){\n    this.internalSelectionSets = [];\n    for (const selectionSet of selectionSets) {\n      // Doing a deep copy manually here but with some logic to help do the counts necessary.\n      let newSelectionSet = new MultiSelectSet();\n      newSelectionSet.currentSelectedCount = 0;\n      newSelectionSet.maxSelections = +selectionSet.maxSelections;\n      newSelectionSet.minSelections = +selectionSet.minSelections;\n      newSelectionSet.sortable = selectionSet.sortable;\n      newSelectionSet.name = selectionSet.name;\n      for (const selection of selectionSet.selectionSet)\n      {\n        if(selection.selected) newSelectionSet.currentSelectedCount++;\n        if(selection.selected && !selection.draggable) newSelectionSet.selectedAndNotDraggabledCount++;\n        if(newSelectionSet.currentSelectedCount > selectionSet.maxSelections) {\n          selection.selected = false;\n          newSelectionSet.currentSelectedCount = selectionSet.maxSelections;\n        }\n        newSelectionSet.selectionSet.push({...selection});\n      }\n      if(selectionSet.sortable){\n        // The sort algorithm here is being done to ensure the sortable items (not disabled) are first in the list. In the sortable items, the selectable items are ahead again.\n        // The sequencing of the sort returns is critical to the algorithm.\n        newSelectionSet.selectionSet.sort((a,b) => {\n          if(a.selected && !b.selected) return -1;\n          if(a.draggable && !b.draggable) return -1;\n          if(!a.draggable && b.draggable) return 1;\n          if(!a.selected && b.selected) return 1;\n          return 0;\n        });\n        newSelectionSet.sortableEndCount = newSelectionSet.selectionSet.length;\n        for (const selection of newSelectionSet.selectionSet) {\n          if(!selection.draggable) newSelectionSet.sortableEndCount--;\n        }\n      }\n      this.internalSelectionSets.push(newSelectionSet);\n    }\n    this.checkMinimumSelections()\n  }\n\n  // The logic around initial max height is necessary because we are allowing the content to drive the height.\n  // Without this we have to set the height property to work and that makes it too long a dialog when the content is small.\n  // There is a side effect that the size of the open dialog box cannot be longer than the initially opened size.\n  initialMaxheight = 0;\n  innerContentDivHeight = 0;\n\n  show(dialogTemplate: TemplateRef<any>) {\n    const rect = this.buttonRef.nativeElement.getBoundingClientRect();\n    const h = window.innerHeight;\n    // Position logic uses a constant width box of 400px. Since the box is being right aligned, we actually right align unless the box is too close to the left side of the screen. \n    let position = {\n      left: '0px',\n      top: rect.bottom + 'px'\n    };\n    if(rect.right>300){\n      position = {\n        left: (rect.right - 300) + 'px',\n        top: rect.bottom + 'px'\n      };\n    }\n    let maxHeight = h - rect.bottom - 10;\n    this.initialMaxheight = maxHeight;\n    this.innerContentDivHeight = maxHeight - 90;\n    this.dialogRef = this.dialog.open(dialogTemplate, {\n      disableClose: false, //This allows closing the dialog box by clicking anywhere else. This allows the behaviour to mimick a true dropdown.\n      width: '300px',\n      maxHeight: maxHeight + 'px',\n      // height: maxHeight + 'px',\n      hasBackdrop: true, //This is necessary for the drag drop to work in a dialog box.\n      position: position,\n      backdropClass: 'dialog-overlay',\n      panelClass: 'multi-select-dialog-panel'\n    });\n    console.log('Initial window height: '+ h, rect, this.initialMaxheight, this.innerContentDivHeight);\n    // This code is necessary so that when a user clicks the backdrop, we can close the backdrop and reset the entries.\n    this.dialogRef.backdropClick().subscribe(() => {\n      this.setCurrentSelections(this.selectionSets); //Reset selections.\n    })\n  }\n\n  // The on resize event needs to be handled only for the case where the user changes the window size after inital open of the dialog.\n  // This makes the popup box behave like a true dropdown box.\n  onResize(event) {\n    const rect = this.buttonRef.nativeElement.getBoundingClientRect();\n    const h = window.innerHeight;\n    console.log('Resized window height: '+ h, rect, this.initialMaxheight, this.innerContentDivHeight);\n    //console.log(rect);\n    let position = {\n      left: '0px',\n      top: rect.bottom + 'px'\n    };\n    if(rect.right>300){\n      position = {\n        left: (rect.right - 300) + 'px',\n        top: rect.bottom + 'px'\n      };\n    }\n    let height = h - rect.bottom - 10;\n    // Because we are setting the maxHeight property when opening the dialog the height property cannot be longer than the maxHeight\n    if(height > this.initialMaxheight) height = this.initialMaxheight;\n    this.innerContentDivHeight = height - 90;\n    // console.log(maxHeight);\n    this.dialogRef.updatePosition(position);\n    this.dialogRef.updateSize('300px', height + 'px');\n  }\n\n  // Save emits the changes sets to the calling component.\n  save(){\n    this.newOptions.emit(this.internalSelectionSets);\n    this.dialogRef.close();\n  }\n\n  cancel() {\n    this.dialogRef.close();\n    this.setCurrentSelections(this.selectionSets); //Reset the selections.\n  }\n\n  drop(event: CdkDragDrop<string[]>, setIndex: number) {\n    const set = this.internalSelectionSets[setIndex];\n    const element = set.selectionSet[event.previousIndex];\n    if (element.selected && event.currentIndex < set.currentSelectedCount)  {\n      moveItemInArray(set.selectionSet, event.previousIndex, event.currentIndex);\n    }\n    if (!element.selected  && event.currentIndex < set.currentSelectedCount && set.currentSelectedCount < set.maxSelections) {\n      moveItemInArray(set.selectionSet, event.previousIndex, event.currentIndex);\n      element.selected = true;\n      set.currentSelectedCount++;\n    }\n    this.checkMinimumSelections()\n  }\n\n  validateAndMove(set:MultiSelectSet, fromIndex: number, toIndex: number) {\n    let fromItem = set.selectionSet[fromIndex];\n    let toItem = set.selectionSet[toIndex];\n    if((fromItem.selected && toItem.selected)\n    || (!fromItem.selected && !toItem.selected)) {\n      moveItemInArray(set.selectionSet, fromIndex, toIndex);\n      return;\n    }\n    if((!fromItem.selected && toItem.selected) && set.currentSelectedCount < set.maxSelections ) {\n      moveItemInArray(set.selectionSet, fromIndex, toIndex);\n      fromItem.selected = true;\n      set.currentSelectedCount++;\n      this.checkMinimumSelections()\n      return;\n    }\n  }\n\n  // Simple logic to handle checking and un checking for non sortable sets.\n  onCheckedNonSortable(i: number, isChecked: boolean, setIndex: number){\n    const set = this.internalSelectionSets[setIndex];\n    set.selectionSet[i].selected = isChecked;\n    if(isChecked) {\n      if (set.currentSelectedCount < set.maxSelections){\n        set.currentSelectedCount++;\n      } // else  condition is not necessary as this code is never triggered due to disabling selections.\n      else {\n        set.selectionSet[i].selected = false;\n      }\n    }\n    else {\n      set.currentSelectedCount--;\n    }\n    this.checkMinimumSelections()\n  }\n\n  // More complicated logic for sortable sets to move the selected item to the bottom of the selected area.\n  onChecked(i: number, isChecked: boolean, setIndex: number){\n    const set = this.internalSelectionSets[setIndex];\n    set.selectionSet[i].selected = isChecked;\n    console.log(i, isChecked,set.selectionSet[i].selected); // {}, true || false\n    if(isChecked) {\n      if (set.currentSelectedCount < set.maxSelections){\n        moveItemInArray(set.selectionSet, i, set.currentSelectedCount - set.selectedAndNotDraggabledCount);\n        set.currentSelectedCount++;\n      } // else  condition is not necessary as this code is never triggered due to disabling selections.\n      else {\n        set.selectionSet[i].selected = false;\n      }\n    }\n    else {\n      set.currentSelectedCount--;\n      //console.log(set);\n      moveItemInArray(set.selectionSet, i, set.currentSelectedCount - set.selectedAndNotDraggabledCount);\n    }\n    this.checkMinimumSelections()\n  }\n\n  // This function is to diable save if minimum selections are not done for the multiset.\n  checkMinimumSelections(){\n    if(this.minimumSelections <= 0) {\n      this.disableSave = false;\n      return;\n    }\n    let totalCount = 0;\n    this.internalSelectionSets.forEach(set => {\n      totalCount = totalCount + set.currentSelectedCount;\n    });\n    if(totalCount < this.minimumSelections) this.disableSave = true;\n    else this.disableSave = false;\n  }\n\n  showHideSelectionDetails(selection: MultiSelectSelection){\n    if(selection.showDetails) selection.showDetails = false;\n    else selection.showDetails = true; \n  }\n\n}\n",
            "properties": [
                {
                    "name": "options",
                    "type": "SingleSelection[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "selectedOption",
                    "type": "SingleSelection",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "SingleSelection",
            "id": "interface-SingleSelection-d1c5f882d91d0ed89488c1e81824b2e1",
            "file": "projects/report-builder/src/app/common/multi-selection/multi-selection.component.ts",
            "type": "interface",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter, TemplateRef, OnChanges, SimpleChanges, ElementRef, ViewChild } from '@angular/core';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport {CdkDragDrop, moveItemInArray} from '@angular/cdk/drag-drop';\n\nexport interface SingleSelection{\n  name: String;\n  element: any;\n}\nexport interface SingleOptionSet {\n  options: SingleSelection[];\n  selectedOption: SingleSelection;\n}\nexport interface MultiSelectSelection extends SingleSelection{\n  selected:  boolean;\n  draggable: boolean;\n  disabled:  boolean;\n  subSelections?: MultiSelectSelection[];\n  subOptions?: SingleOptionSet;\n  selectionDetails?: string[];\n  showDetails?: boolean;\n}\n\nexport class MultiSelectSet {\n  selectionSet: MultiSelectSelection[] = [];\n  sortable: boolean = true;\n  name: string;\n  maxSelections: number;\n  minSelections: number = 0;\n  currentSelectedCount: number = 0;\n  sortableEndCount: number = 0; // Using end count because we are sorting the disabled items to the last of the sort list.\n  selectedAndNotDraggabledCount: number = 0; // This field is necessary to allow a set to have single selection set to have items that are diabled.\n}\n\n@Component({\n  selector: 'app-multi-selection',\n  templateUrl: './multi-selection.component.html',\n  styleUrls: ['./multi-selection.component.css']\n})\nexport class MultiSelectionComponent implements OnInit, OnChanges {\n  moveItemInArray = moveItemInArray;\n  @Input()\n  name: string;\n\n  @Input()\n  minimumSelections: number = 0;\n  disableSave: boolean = false;\n\n  @Input()\n  selectionSets: MultiSelectSet[];\n  internalSelectionSets: MultiSelectSet[] = [];\n\n  @Output()\n  newOptions = new EventEmitter<MultiSelectSet[]>();\n\n  dialogRef: MatDialogRef<any>;\n  \n  @ViewChild(\"myButton\", { read: ElementRef }) buttonRef: ElementRef;\n\n  constructor(public dialog: MatDialog) {\n  }\n\n  ngOnInit(): void {\n    this.setCurrentSelections(this.selectionSets);\n  }\n  ngOnChanges(changes: SimpleChanges) {\n    this.setCurrentSelections(changes.selectionSets.currentValue);\n  }\n\n  // This is the core of the logic to make the component work.\n  setCurrentSelections(selectionSets: MultiSelectSet[]){\n    this.internalSelectionSets = [];\n    for (const selectionSet of selectionSets) {\n      // Doing a deep copy manually here but with some logic to help do the counts necessary.\n      let newSelectionSet = new MultiSelectSet();\n      newSelectionSet.currentSelectedCount = 0;\n      newSelectionSet.maxSelections = +selectionSet.maxSelections;\n      newSelectionSet.minSelections = +selectionSet.minSelections;\n      newSelectionSet.sortable = selectionSet.sortable;\n      newSelectionSet.name = selectionSet.name;\n      for (const selection of selectionSet.selectionSet)\n      {\n        if(selection.selected) newSelectionSet.currentSelectedCount++;\n        if(selection.selected && !selection.draggable) newSelectionSet.selectedAndNotDraggabledCount++;\n        if(newSelectionSet.currentSelectedCount > selectionSet.maxSelections) {\n          selection.selected = false;\n          newSelectionSet.currentSelectedCount = selectionSet.maxSelections;\n        }\n        newSelectionSet.selectionSet.push({...selection});\n      }\n      if(selectionSet.sortable){\n        // The sort algorithm here is being done to ensure the sortable items (not disabled) are first in the list. In the sortable items, the selectable items are ahead again.\n        // The sequencing of the sort returns is critical to the algorithm.\n        newSelectionSet.selectionSet.sort((a,b) => {\n          if(a.selected && !b.selected) return -1;\n          if(a.draggable && !b.draggable) return -1;\n          if(!a.draggable && b.draggable) return 1;\n          if(!a.selected && b.selected) return 1;\n          return 0;\n        });\n        newSelectionSet.sortableEndCount = newSelectionSet.selectionSet.length;\n        for (const selection of newSelectionSet.selectionSet) {\n          if(!selection.draggable) newSelectionSet.sortableEndCount--;\n        }\n      }\n      this.internalSelectionSets.push(newSelectionSet);\n    }\n    this.checkMinimumSelections()\n  }\n\n  // The logic around initial max height is necessary because we are allowing the content to drive the height.\n  // Without this we have to set the height property to work and that makes it too long a dialog when the content is small.\n  // There is a side effect that the size of the open dialog box cannot be longer than the initially opened size.\n  initialMaxheight = 0;\n  innerContentDivHeight = 0;\n\n  show(dialogTemplate: TemplateRef<any>) {\n    const rect = this.buttonRef.nativeElement.getBoundingClientRect();\n    const h = window.innerHeight;\n    // Position logic uses a constant width box of 400px. Since the box is being right aligned, we actually right align unless the box is too close to the left side of the screen. \n    let position = {\n      left: '0px',\n      top: rect.bottom + 'px'\n    };\n    if(rect.right>300){\n      position = {\n        left: (rect.right - 300) + 'px',\n        top: rect.bottom + 'px'\n      };\n    }\n    let maxHeight = h - rect.bottom - 10;\n    this.initialMaxheight = maxHeight;\n    this.innerContentDivHeight = maxHeight - 90;\n    this.dialogRef = this.dialog.open(dialogTemplate, {\n      disableClose: false, //This allows closing the dialog box by clicking anywhere else. This allows the behaviour to mimick a true dropdown.\n      width: '300px',\n      maxHeight: maxHeight + 'px',\n      // height: maxHeight + 'px',\n      hasBackdrop: true, //This is necessary for the drag drop to work in a dialog box.\n      position: position,\n      backdropClass: 'dialog-overlay',\n      panelClass: 'multi-select-dialog-panel'\n    });\n    console.log('Initial window height: '+ h, rect, this.initialMaxheight, this.innerContentDivHeight);\n    // This code is necessary so that when a user clicks the backdrop, we can close the backdrop and reset the entries.\n    this.dialogRef.backdropClick().subscribe(() => {\n      this.setCurrentSelections(this.selectionSets); //Reset selections.\n    })\n  }\n\n  // The on resize event needs to be handled only for the case where the user changes the window size after inital open of the dialog.\n  // This makes the popup box behave like a true dropdown box.\n  onResize(event) {\n    const rect = this.buttonRef.nativeElement.getBoundingClientRect();\n    const h = window.innerHeight;\n    console.log('Resized window height: '+ h, rect, this.initialMaxheight, this.innerContentDivHeight);\n    //console.log(rect);\n    let position = {\n      left: '0px',\n      top: rect.bottom + 'px'\n    };\n    if(rect.right>300){\n      position = {\n        left: (rect.right - 300) + 'px',\n        top: rect.bottom + 'px'\n      };\n    }\n    let height = h - rect.bottom - 10;\n    // Because we are setting the maxHeight property when opening the dialog the height property cannot be longer than the maxHeight\n    if(height > this.initialMaxheight) height = this.initialMaxheight;\n    this.innerContentDivHeight = height - 90;\n    // console.log(maxHeight);\n    this.dialogRef.updatePosition(position);\n    this.dialogRef.updateSize('300px', height + 'px');\n  }\n\n  // Save emits the changes sets to the calling component.\n  save(){\n    this.newOptions.emit(this.internalSelectionSets);\n    this.dialogRef.close();\n  }\n\n  cancel() {\n    this.dialogRef.close();\n    this.setCurrentSelections(this.selectionSets); //Reset the selections.\n  }\n\n  drop(event: CdkDragDrop<string[]>, setIndex: number) {\n    const set = this.internalSelectionSets[setIndex];\n    const element = set.selectionSet[event.previousIndex];\n    if (element.selected && event.currentIndex < set.currentSelectedCount)  {\n      moveItemInArray(set.selectionSet, event.previousIndex, event.currentIndex);\n    }\n    if (!element.selected  && event.currentIndex < set.currentSelectedCount && set.currentSelectedCount < set.maxSelections) {\n      moveItemInArray(set.selectionSet, event.previousIndex, event.currentIndex);\n      element.selected = true;\n      set.currentSelectedCount++;\n    }\n    this.checkMinimumSelections()\n  }\n\n  validateAndMove(set:MultiSelectSet, fromIndex: number, toIndex: number) {\n    let fromItem = set.selectionSet[fromIndex];\n    let toItem = set.selectionSet[toIndex];\n    if((fromItem.selected && toItem.selected)\n    || (!fromItem.selected && !toItem.selected)) {\n      moveItemInArray(set.selectionSet, fromIndex, toIndex);\n      return;\n    }\n    if((!fromItem.selected && toItem.selected) && set.currentSelectedCount < set.maxSelections ) {\n      moveItemInArray(set.selectionSet, fromIndex, toIndex);\n      fromItem.selected = true;\n      set.currentSelectedCount++;\n      this.checkMinimumSelections()\n      return;\n    }\n  }\n\n  // Simple logic to handle checking and un checking for non sortable sets.\n  onCheckedNonSortable(i: number, isChecked: boolean, setIndex: number){\n    const set = this.internalSelectionSets[setIndex];\n    set.selectionSet[i].selected = isChecked;\n    if(isChecked) {\n      if (set.currentSelectedCount < set.maxSelections){\n        set.currentSelectedCount++;\n      } // else  condition is not necessary as this code is never triggered due to disabling selections.\n      else {\n        set.selectionSet[i].selected = false;\n      }\n    }\n    else {\n      set.currentSelectedCount--;\n    }\n    this.checkMinimumSelections()\n  }\n\n  // More complicated logic for sortable sets to move the selected item to the bottom of the selected area.\n  onChecked(i: number, isChecked: boolean, setIndex: number){\n    const set = this.internalSelectionSets[setIndex];\n    set.selectionSet[i].selected = isChecked;\n    console.log(i, isChecked,set.selectionSet[i].selected); // {}, true || false\n    if(isChecked) {\n      if (set.currentSelectedCount < set.maxSelections){\n        moveItemInArray(set.selectionSet, i, set.currentSelectedCount - set.selectedAndNotDraggabledCount);\n        set.currentSelectedCount++;\n      } // else  condition is not necessary as this code is never triggered due to disabling selections.\n      else {\n        set.selectionSet[i].selected = false;\n      }\n    }\n    else {\n      set.currentSelectedCount--;\n      //console.log(set);\n      moveItemInArray(set.selectionSet, i, set.currentSelectedCount - set.selectedAndNotDraggabledCount);\n    }\n    this.checkMinimumSelections()\n  }\n\n  // This function is to diable save if minimum selections are not done for the multiset.\n  checkMinimumSelections(){\n    if(this.minimumSelections <= 0) {\n      this.disableSave = false;\n      return;\n    }\n    let totalCount = 0;\n    this.internalSelectionSets.forEach(set => {\n      totalCount = totalCount + set.currentSelectedCount;\n    });\n    if(totalCount < this.minimumSelections) this.disableSave = true;\n    else this.disableSave = false;\n  }\n\n  showHideSelectionDetails(selection: MultiSelectSelection){\n    if(selection.showDetails) selection.showDetails = false;\n    else selection.showDetails = true; \n  }\n\n}\n",
            "properties": [
                {
                    "name": "element",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "name",
                    "type": "String",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "ReportListService",
            "id": "injectable-ReportListService-7107881524590770d3b3a3bc9e9bc2a7",
            "file": "projects/report-builder/src/app/page/report-list/report-list.service.ts",
            "properties": [
                {
                    "name": "advisorID",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "serviceURL",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getReportList",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ReportList>",
                    "typeParameters": [],
                    "line": 50
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { of, Observable } from 'rxjs';\nimport { HttpParams, HttpHeaders, HttpClient } from '@angular/common/http';\nimport { allReportsData } from './mock-data';\nimport { environment } from '../../../environments/environment';\n\nexport enum ReportType {\n  Custom = 'C',\n  Default = 'D',\n  FIDefault = 'F'\n}\n\nexport interface ReportSummary {\n  reportid: number;\n  reportName: string;\n  reportType: ReportType\n}\n\nexport interface ReportCategory {\n  categoryId: number;\n  categoryName: string;\n  reportList: ReportSummary[];\n}\n\nexport interface ReportList {\n  popularCount: number;\n  totalReportCount: number;\n  customReportCount: number;\n  categoryList: ReportCategory[];\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ReportListService {\n  private serviceURL: string = '';\n  private advisorID: string = '';\n\n  constructor(private http: HttpClient) {\n    const pageData = (<any> window).AppSettings;\n    if (pageData && pageData.serviceBusURL) {\n      this.serviceURL = pageData.serviceBusURL + '/report-builder-service';\n    }\n    else {\n      this.serviceURL = 'https://dummylocation.com/report-builder-service';\n    }\n    if (pageData && pageData.advisorID) this.advisorID = pageData.advisorID;\n  }\n\n  getReportList(): Observable<ReportList> {\n    if (!environment.production) {\n      return of(allReportsData);\n    }\n\n    let postParams = new HttpParams();\n    postParams.append('srcDefConst','reportBuilder');\n    postParams.append('pageMode','componentData');\n    postParams.append('formatType','html');\n\n    let headers = new HttpHeaders();\n    headers = headers.set('Content-Type', 'application/json');\n\n    const jsonRequestBody = {advisorTaxId: this.advisorID};\n    return this.http.post<ReportList>(this.serviceURL + '/get-default-reports-list-metadata', jsonRequestBody, {headers: headers});\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ReportService",
            "id": "injectable-ReportService-5460ba81e4604e49f18ebc99c3391114",
            "file": "projects/report-builder/src/app/page/report-builder/report.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getReport",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11
                },
                {
                    "name": "saveReport",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 15
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { of } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ReportService {\n\n  constructor() { }\n\n  getReport() {\n\n  }\n\n  saveReport() {\n    //dummy save\n    return of('Successful save');\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 7
            },
            "type": "injectable"
        },
        {
            "name": "WriCommonService",
            "id": "injectable-WriCommonService-c3a22526cf49dd8fe4a03d2fb56cda48",
            "file": "projects/wri-common/src/lib/wri-common.service.ts",
            "properties": [],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WriCommonService {\n\n  constructor() { }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 6
            },
            "type": "injectable"
        },
        {
            "name": "WRIFooterService",
            "id": "injectable-WRIFooterService-7f419539b2ff1f01f1aa60cca8af272a",
            "file": "projects/wri-footer/src/lib/wri-footer.service.ts",
            "properties": [],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WRIFooterService {\n\n  constructor() { }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 6
            },
            "type": "injectable"
        },
        {
            "name": "WRIHeaderService",
            "id": "injectable-WRIHeaderService-2182a414a33eb63186d6abc2973046e1",
            "file": "projects/wri-header/src/lib/wri-header.service.ts",
            "properties": [],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WRIHeaderService {\n\n  constructor() { }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 6
            },
            "type": "injectable"
        },
        {
            "name": "WRIHoldingsService",
            "id": "injectable-WRIHoldingsService-3f635220d58f15bbac368629a84a3cc0",
            "file": "projects/wri-holdings/src/lib/wri-holdings.service.ts",
            "properties": [
                {
                    "name": "advisorID",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 83
                },
                {
                    "name": "dataSet1",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 84,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "dataSet2",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 85,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "jwtToken",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 81
                },
                {
                    "name": "serviceURL",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 82
                }
            ],
            "methods": [
                {
                    "name": "allocateRowsToCategory",
                    "args": [
                        {
                            "name": "dataSet",
                            "type": "any[]"
                        },
                        {
                            "name": "categories",
                            "type": "Category[]"
                        },
                        {
                            "name": "primaryColumn",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 216,
                    "jsdoctags": [
                        {
                            "name": "dataSet",
                            "type": "any[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "categories",
                            "type": "Category[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "primaryColumn",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "calculateSummaryData",
                    "args": [
                        {
                            "name": "category",
                            "type": "Category"
                        },
                        {
                            "name": "options",
                            "type": "HoldingsCustomizationOptions"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 201,
                    "jsdoctags": [
                        {
                            "name": "category",
                            "type": "Category",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "HoldingsCustomizationOptions",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getData",
                    "args": [
                        {
                            "name": "options",
                            "type": "HoldingsCustomizationOptions"
                        },
                        {
                            "name": "dummyData",
                            "type": "boolean",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 99,
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "HoldingsCustomizationOptions",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dummyData",
                            "type": "boolean",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDummyData",
                    "args": [
                        {
                            "name": "options",
                            "type": "HoldingsCustomizationOptions"
                        }
                    ],
                    "optional": false,
                    "returnType": "CategorizedData",
                    "typeParameters": [],
                    "line": 125,
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "HoldingsCustomizationOptions",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "error",
                            "type": "HttpErrorResponse"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 121,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "HttpErrorResponse",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "identifyPrimaryColumn",
                    "args": [
                        {
                            "name": "category",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 238,
                    "jsdoctags": [
                        {
                            "name": "category",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "separateDataIntoCategories",
                    "args": [
                        {
                            "name": "dataTable",
                            "type": "Array<any>"
                        },
                        {
                            "name": "options",
                            "type": "HoldingsCustomizationOptions"
                        }
                    ],
                    "optional": false,
                    "returnType": "CategorizedData",
                    "typeParameters": [],
                    "line": 152,
                    "jsdoctags": [
                        {
                            "name": "dataTable",
                            "type": "Array<any>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "HoldingsCustomizationOptions",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { of, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { HttpParams, HttpHeaders, HttpClient, HttpErrorResponse } from '@angular/common/http';\n\nexport interface Selection {\n  value: string;\n  viewValue: string;\n}\n\nexport interface DataColumn extends Selection {\n  parentValue?: string;\n  isNumber?: boolean;\n  isAdditive?: boolean;\n}\n\nexport class AvailableColumnOptions {\n  static columnOptions: DataColumn[] = [\n    {value: 'quantity', viewValue: 'Quantity', parentValue: \"holding\", isNumber: true},\n    {value: 'price', viewValue: 'Price ($)', parentValue: \"holding\", isNumber: true},\n    {value: 'value', viewValue: 'Value ($)', parentValue: \"holding\", isNumber: true, isAdditive: true},\n    {value: 'ror', viewValue: 'Rate of Return', parentValue: \"holding\", isNumber: true},\n    {value: 'yield', viewValue: 'Current Yield (%)', parentValue: \"holding\", isNumber: true},\n    {value: 'percentageOfAccount', viewValue: '% of Account', parentValue: \"holding\", isNumber: true, isAdditive: true},\n    {value: 'estimatedAnnualIncome', viewValue: 'Estimated Annual Income ($)', parentValue: \"holding\", isNumber: true, isAdditive: true},\n    {value: 'cost', viewValue: 'Cost ($)', parentValue: \"holding\", isNumber: true, isAdditive: true},\n    {value: 'unrealizedGainLoss', viewValue: 'Unrealized Gain/Loss ($)', parentValue: \"holding\", isNumber: true, isAdditive: true},\n    {value: 'beginningValue', viewValue: 'Beginning Value', parentValue: \"holding\", isNumber: true, isAdditive: true},\n    {value: 'netContribution', viewValue: 'Net Contribution', parentValue: \"holding\", isNumber: true, isAdditive: true},\n    {value: 'changeInValue', viewValue: 'Change In Value', parentValue: \"holding\", isNumber: true, isAdditive: true},\n    {value: 'assetName', viewValue: 'Asset Name', parentValue: \"asset\"},\n    {value: 'ticker', viewValue: 'Ticker Synbol', parentValue: \"asset\"},\n    {value: 'mgmtCompany', viewValue: 'Management Company', parentValue: \"asset\"},\n    {value: 'morningstarRating', viewValue: 'Morningstar Rating', parentValue: \"asset\"},\n    {value: 'assetType', viewValue: 'Asset Type', parentValue: \"asset\"},\n    {value: 'assetClass1Name', viewValue: 'ACL 1 Name', parentValue: \"assetClass1\"},\n    {value: 'assetClass2Name', viewValue: 'ACL 2 Name', parentValue: \"assetClass2\"},\n    {value: 'assetClass3Name', viewValue: 'ACL 3 Name', parentValue: \"assetClass3\"},\n    {value: 'investorId', viewValue: 'Investor ID', parentValue: \"investor\"},\n    {value: 'investorName', viewValue: 'Investor Name', parentValue: \"investor\"},\n    {value: 'acctNum', viewValue: 'Account Number', parentValue: \"account\"},\n    {value: 'acctName', viewValue: 'Account Name', parentValue: \"account\"},\n    {value: 'combinedAccountName', viewValue: 'Account Name / Manager / Style Name as applicable', parentValue: \"account\"},\n    {value: 'mgrName', viewValue: 'Manager Name', parentValue: \"account\"},\n    {value: 'productName', viewValue: 'Product Name', parentValue: \"account\"},\n    {value: 'style', viewValue: 'Style', parentValue: \"account\"},\n    {value: 'accountType', viewValue: 'Account Type', parentValue: \"account\"},\n    {value: 'taxStatus', viewValue: 'Tax Status', parentValue: \"account\"},\n  ];\n}\n\nexport class Category {\n  categoryId: string;\n  categoryPrimaryKey: any;\n  subCategories: Category[] = [];\n  categoryData = [];\n  summaryData = {};\n}\n\nexport interface HoldingsCustomizationOptions {\n  category1?: string;\n  category2?: string;\n  category3?: string;\n  category1Data?: Array<DataColumn>;\n  category2Data?: Array<DataColumn>;\n  category3Data?: Array<DataColumn>;\n  dataColumns?: Array<DataColumn>;\n  showInsuranceData?: boolean;\n}\n\n\nexport class CategorizedData {\n  isCategorized: boolean;\n  uncategorizedData: Category;\n  categorizedData: Category[];\n}\n\n\n@Injectable()\nexport class WRIHoldingsService {\n  jwtToken: string = '';\n  serviceURL: string = '';\n  advisorID: string = '';\n  private dataSet1 = [];\n  private dataSet2 = [];\n\n  constructor(private http: HttpClient) {\n    const pageData = (<any> window).AppSettings;\n    if (pageData && pageData.jwtToken) this.jwtToken = pageData.jwtToken;\n    if (pageData && pageData.serviceBusURL) {\n      this.serviceURL = pageData.serviceBusURL + '/report-builder-service';\n    }\n    else {\n      this.serviceURL = 'https://dummylocation.com/report-builder-service';\n    }\n    if (pageData && pageData.advisorID) this.advisorID = pageData.advisorID;\n  }\n\n  getData(options: HoldingsCustomizationOptions, dummyData: boolean = false) {\n    if (dummyData) {\n      return of(this.getDummyData(options));\n    }\n\n    let postParams = new HttpParams();\n    postParams.append('srcDefConst','reportBuilder');\n    postParams.append('pageMode','componentData');\n    postParams.append('formatType','html');\n\n    let headers = new HttpHeaders();\n    headers = headers.set('Content-Type', 'application/json');\n    headers = headers.set('Authorization', `Bearer ${this.jwtToken}`);\n    headers = headers.set('X-JWT-Assertion', this.jwtToken);\n\n    const jsonRequestBody = {advisorTaxId: this.advisorID};\n    return this.http.post(this.serviceURL + '/get-default-reports-list-metadata', jsonRequestBody, {headers: headers})\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n  private handleError(error: HttpErrorResponse) {\n    return throwError(error.status);\n  }\n\n  getDummyData(options: HoldingsCustomizationOptions) {\n        // Dummy data setup.\n        this.dataSet1 = [\n          {quantity: 7318.06, price: 1.00, value: 7318.06, ror: 12.534, yield: 0   , percentageOfAccount: 0.31, estimatedAnnualIncome: 0,      unrealizedGainLoss: 0,        cost: 0,        beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Brokerage Money Market\", ticker:\"\", mgmtCompany: null, morningstarRating: \"5 star\", assetType: \"Stock\", assetClass1Name: \"Cash or Equivalents\", assetClass2Name: \"Growth\", assetClass3Name: \"Technology\", investorName: \"Sample Investor\", acctNum: \"03004721 000\", acctName: \"The Oliver Wendell\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Giftc Custodial IRA\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123456\", assetId: \"CUSIPv 12345\", assetClass1Id: \"ACL1 ID 1\", assetClass2Id: \"ACL2 ID 1\", assetClass3Id: \"ACL3 ID 1\" },\n          {quantity: 600, price: 50.94, value:  30564, ror: 12.5345365, yield: 1.88, percentageOfAccount: 1.29, estimatedAnnualIncome: 576.00, unrealizedGainLoss: 14534.99, cost: 16029.01, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Abbot Laboratories\", ticker:\"abt\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"Mutual Fund\", assetClass1Name: \"Mutual Fund\", assetClass2Name: \"Growth\", assetClass3Name: \"Technology\", investorName: \"Sample Investor\", acctNum: \"03004721 000\", acctName: \"The Oliver Wendell\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Giftc Custodial IRA\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123456\", assetId: \"CUSIPv 12346\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 1\", assetClass3Id: \"ACL3 ID 1\" },\n          {quantity: 200, price:132.82, value:  26564, ror: 12.5345365, yield: 2.44, percentageOfAccount: 1.12, estimatedAnnualIncome: 648.00, unrealizedGainLoss: 12219.86, cost: 14344.14, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Air Products & chemicals Inc\", ticker:\"apd\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"Mutual Fund\", assetClass1Name: \"Mutual Fund\", assetClass2Name: \"Growth\", assetClass3Name: \"Technology\", investorName: \"Sample Investor\", acctNum: \"03004721 000\", acctName: \"The Oliver Wendell\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Giftc Custodial IRA\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123456\", assetId: \"CUSIPv 12347\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 1\", assetClass3Id: \"ACL3 ID 1\" },\n          {quantity: 500, price: 29.36, value:  14680, ror: 12.5345365, yield: 2.04, percentageOfAccount: 0.62, estimatedAnnualIncome: 300.00, unrealizedGainLoss:  1096.30, cost: 13583.70, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Allison Transmission HLDGS Inc.\", ticker:\"alsn\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"Mutual Fund\", assetClass1Name: \"Mutual Fund\", assetClass2Name: \"Growth\", assetClass3Name: \"Technology\", investorName: \"Sample Investor\", acctNum: \"03004721 000\", acctName: \"The Oliver Wendell\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Giftc Custodial IRA\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123456\", assetId: \"CUSIPv 12348\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 1\", assetClass3Id: \"ACL3 ID 1\" },\n          {quantity:1000, price:  8.54, value:  8540 , ror: 12.5345365, yield: 2.43, percentageOfAccount: 0.36, estimatedAnnualIncome: 125.43, unrealizedGainLoss: -2182.30, cost: 10722.30, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Apigee Corp\", ticker:\"apic\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"Mutual Fund\", assetClass1Name: \"Mutual Fund\", assetClass2Name: \"Balanced\", assetClass3Name: \"Industry\", investorName: \"Sample Investor\", acctNum: \"03004721 000\", acctName: \"The Oliver Wendell\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Giftc Custodial IRA\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123456\", assetId: \"CUSIPv 12349\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 2\", assetClass3Id: \"ACL3 ID 3\" },\n          {quantity: 280, price:123.38, value:34546.4, ror: 12.5345365, yield: 1.69, percentageOfAccount: 1.46, estimatedAnnualIncome: 582.40, unrealizedGainLoss: 13549.60, cost: 20996.80, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"apple inc\", ticker:\"aapl\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"Mutual Fund\", assetClass1Name: \"Mutual Fund\", assetClass2Name: \"Balanced\", assetClass3Name: \"Industry\", investorName: \"Sample Investor\", acctNum: \"03004721 000\", acctName: \"The Oliver Wendell\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Giftc Custodial IRA\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123456\", assetId: \"CUSIPv 12340\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 2\", assetClass3Id: \"ACL3 ID 3\" },\n          {quantity: 400, price: 54.76, value:  21904, ror: 12.5345365, yield: 2.44, percentageOfAccount: 0.92, estimatedAnnualIncome: 306.00, unrealizedGainLoss:   297.08, cost: 21606.92, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Armstrong World Industries Inc New\", ticker:\"awi\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"Mutual Fund\", assetClass1Name: \"Mutual Fund\", assetClass2Name: \"Balanced\", assetClass3Name: \"Industry\", investorName: \"Sample Investor\", acctNum: \"03004721 000\", acctName: \"The Oliver Wendell\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Giftc Custodial IRA\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123456\", assetId: \"CUSIPv 12341\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 2\", assetClass3Id: \"ACL3 ID 3\" },\n          {quantity: 200, price: 80.58, value:  16116, ror: 12.5345365, yield: 2.43, percentageOfAccount: 0.68, estimatedAnnualIncome: 392.00, unrealizedGainLoss:  9829.22, cost: 16116.00, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Automatic Data Processing Inc\", ticker:\"adp\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"Mutual Fund\", assetClass1Name: \"Mutual Fund\", assetClass2Name: \"Balanced\", assetClass3Name: \"Industry\", investorName: \"Sample Investor\", acctNum: \"03004721 000\", acctName: \"The Oliver Wendell\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Giftc Custodial IRA\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123456\", assetId: \"CUSIPv 12342\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 2\", assetClass3Id: \"ACL3 ID 3\" },\n        ];\n        this.dataSet2 = [\n          {quantity: 1200000, price: 25.56, value: 5112, ror: 12.5345365, yield: 2.56, percentageOfAccount: 25.45655, estimatedAnnualIncome: 400.00, unrealizedGainLoss: 3000.00, cost: 3000.00, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Apple Inc.\", ticker:\"appl\", mgmtCompany: null, morningstarRating: \"5 star\", assetType: \"Stock\", assetClass1Name: \"Large Cap\", assetClass2Name: \"Growth\", assetClass3Name: \"Technology\", investorName: \"Investor Name 1\", acctNum: \"127635417236\", acctName: \"Short Account Name 1\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Retail\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123456\", assetId: \"CUSIPv 12345\", assetClass1Id: \"ACL1 ID 1\", assetClass2Id: \"ACL2 ID 1\", assetClass3Id: \"ACL3 ID 1\" },\n          {quantity: 200, price: 25.56, value: 5112, ror: 12.5345365, yield: 2.56, percentageOfAccount: 25.45655, estimatedAnnualIncome: 400.00, unrealizedGainLoss: 3000.00, cost: 3000.00, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Apple Inc.\", ticker:\"appl\", mgmtCompany: null, morningstarRating: \"5 star\", assetType: \"Stock\", assetClass1Name: \"Large Cap\", assetClass2Name: \"Growth\", assetClass3Name: \"Technology\", investorName: \"Investor Name 1\", acctNum: \"127635417237\", acctName: \"Short Account Name 2\", combinedAccountName: \"Lion Account\", mgrName: \"Blackrock\", productName: \"Lion Account\", style: \"Growth\", accountType: \"Retail\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123457\", assetId: \"CUSIPv 12345\", assetClass1Id: \"ACL1 ID 1\", assetClass2Id: \"ACL2 ID 1\", assetClass3Id: \"ACL3 ID 1\" },\n          {quantity: 200, price: 25.56, value: 5112, ror: 12.5345365, yield: 2.56, percentageOfAccount: 25.45655, estimatedAnnualIncome: 400.00, unrealizedGainLoss: 3000.00, cost: 3000.00, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Apple Inc.\", ticker:\"appl\", mgmtCompany: null, morningstarRating: \"5 star\", assetType: \"Stock\", assetClass1Name: \"Large Cap\", assetClass2Name: \"Growth\", assetClass3Name: \"Technology\", investorName: \"Investor Name 2\", acctNum: \"127635417236\", acctName: \"Short Account Name 1\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Retail\", taxStatus: \"Post Tax\", investorId: \"123457\", acctId: \"123456\", assetId: \"CUSIPv 12345\", assetClass1Id: \"ACL1 ID 1\", assetClass2Id: \"ACL2 ID 1\", assetClass3Id: \"ACL3 ID 1\" },\n          {quantity: 200, price: 25.56, value: 5112, ror: 12.5345365, yield: 2.56, percentageOfAccount: 25.45655, estimatedAnnualIncome: 400.00, unrealizedGainLoss: 3000.00, cost: 3000.00, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Apple Inc.\", ticker:\"appl\", mgmtCompany: null, morningstarRating: \"5 star\", assetType: \"Stock\", assetClass1Name: \"Large Cap\", assetClass2Name: \"Growth\", assetClass3Name: \"Technology\", investorName: \"Investor Name 2\", acctNum: \"127635417237\", acctName: \"Short Account Name 2\", combinedAccountName: \"Lion Account\", mgrName: \"Blackrock\", productName: \"Lion Account\", style: \"Growth\", accountType: \"Retail\", taxStatus: \"Post Tax\", investorId: \"123457\", acctId: \"123457\", assetId: \"CUSIPv 12345\", assetClass1Id: \"ACL1 ID 1\", assetClass2Id: \"ACL2 ID 1\", assetClass3Id: \"ACL3 ID 1\" },\n          {quantity: 200, price: 25.56, value: 5112, ror: 12.5345365, yield: 2.56, percentageOfAccount: 25.45655, estimatedAnnualIncome: 400.00, unrealizedGainLoss: 3000.00, cost: 3000.00, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"QQQ ETF\", ticker:\"QQQ\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"ETF\", assetClass1Name: \"Index Fund\", assetClass2Name: \"Balanced\", assetClass3Name: \"Industry\", investorName: \"Investor Name 1\", acctNum: \"127635417236\", acctName: \"Short Account Name 1\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Retail\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123456\", assetId: \"CUSIPv 12346\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 2\", assetClass3Id: \"ACL3 ID 3\" },\n          {quantity: 200, price: 25.56, value: 5112, ror: 12.5345365, yield: 2.56, percentageOfAccount: 25.45655, estimatedAnnualIncome: 400.00, unrealizedGainLoss: 3000.00, cost: 3000.00, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"QQQ ETF\", ticker:\"QQQ\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"ETF\", assetClass1Name: \"Index Fund\", assetClass2Name: \"Balanced\", assetClass3Name: \"Industry\", investorName: \"Investor Name 1\", acctNum: \"127635417237\", acctName: \"Short Account Name 2\", combinedAccountName: \"Lion Account\", mgrName: \"Blackrock\", productName: \"Lion Account\", style: \"Growth\", accountType: \"Retail\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123457\", assetId: \"CUSIPv 12346\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 2\", assetClass3Id: \"ACL3 ID 3\" },\n          {quantity: 200, price: 25.56, value: 5112, ror: 12.5345365, yield: 2.56, percentageOfAccount: 25.45655, estimatedAnnualIncome: 400.00, unrealizedGainLoss: 3000.00, cost: 3000.00, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"QQQ ETF\", ticker:\"QQQ\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"ETF\", assetClass1Name: \"Index Fund\", assetClass2Name: \"Balanced\", assetClass3Name: \"Industry\", investorName: \"Investor Name 2\", acctNum: \"127635417236\", acctName: \"Short Account Name 1\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Retail\", taxStatus: \"Post Tax\", investorId: \"123457\", acctId: \"123456\", assetId: \"CUSIPv 12346\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 2\", assetClass3Id: \"ACL3 ID 3\" },\n          {quantity: 200, price: 25.56, value: 5112, ror: 12.5345365, yield: 2.56, percentageOfAccount: 25.45655, estimatedAnnualIncome: 400.00, unrealizedGainLoss: 3000.00, cost: 3000.00, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"QQQ ETF\", ticker:\"QQQ\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"ETF\", assetClass1Name: \"Index Fund\", assetClass2Name: \"Balanced\", assetClass3Name: \"Industry\", investorName: \"Investor Name 2\", acctNum: \"127635417237\", acctName: \"Short Account Name 2\", combinedAccountName: \"Lion Account\", mgrName: \"Blackrock\", productName: \"Lion Account\", style: \"Growth\", accountType: \"Retail\", taxStatus: \"Post Tax\", investorId: \"123457\", acctId: \"123457\", assetId: \"CUSIPv 12346\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 2\", assetClass3Id: \"ACL3 ID 3\" },\n        ];\n        return this.separateDataIntoCategories(this.dataSet2, options);\n        // Dummy data setup complete.    \n    \n  }\n\n  separateDataIntoCategories(dataTable: Array<any>, options: HoldingsCustomizationOptions){\n    const categories: Category[] = [];\n    let returnValue = new CategorizedData();\n    returnValue.categorizedData = categories;\n    if (options.category1 === null) {\n      //Nocategories defined. So use full Data Table.\n      let uncategorized: Category = {\n        categoryId: \"\",\n        categoryPrimaryKey: \"\",\n        categoryData: [],\n        subCategories: [],\n        summaryData: {}\n      };\n      uncategorized.categoryData = dataTable;\n      this.calculateSummaryData(uncategorized, options);\n      returnValue.isCategorized = false;\n      returnValue.uncategorizedData = uncategorized;\n      return returnValue;\n    }\n    // Need to separate rows into categories\n    // identify Primary column in data.\n    let primaryColumn = this.identifyPrimaryColumn(options.category1);\n    this.allocateRowsToCategory(dataTable, categories, primaryColumn);\n    categories.forEach(category1 => {\n      this.calculateSummaryData(category1, options);\n      if (options.category2 !== null) {\n        //need to further categorize.\n        primaryColumn = this.identifyPrimaryColumn(options.category2);\n        category1.subCategories = [];\n        this.allocateRowsToCategory(category1.categoryData, category1.subCategories, primaryColumn);\n        category1.subCategories.forEach(category2 => {\n          this.calculateSummaryData(category2, options);\n          if (options.category3 !== null) {\n            //need to further categorize.\n            primaryColumn = this.identifyPrimaryColumn(options.category3);\n            category2.subCategories = [];\n            this.allocateRowsToCategory(category2.categoryData, category2.subCategories, primaryColumn);        \n            category2.subCategories.forEach(category3 => {\n              this.calculateSummaryData(category3, options);\n            });\n          }  \n        });\n      }  \n    });\n    returnValue.isCategorized = true;\n    returnValue.categorizedData = categories;\n    return returnValue;\n  }\n\n  calculateSummaryData(category: Category, options: HoldingsCustomizationOptions) {\n    category.summaryData = {};\n    options.dataColumns.forEach(column => {\n      if(column.isNumber && column.isAdditive) {\n        let sum = 0;\n        for (let index = 0; index < category.categoryData.length; index++) {\n          const row = category.categoryData[index];\n          sum = sum + (+row[column.value]);\n        }\n        if (isNaN(sum)) { sum=0;}\n        category.summaryData[column.value] = sum;\n      }\n    });\n  }\n\n  allocateRowsToCategory(dataSet: any[], categories: Category[], primaryColumn: string){\n    dataSet.forEach(row => {\n      const primaryKey = row[primaryColumn];\n      if(primaryKey === null) {return;} // Ignore row as it cannot be categorized.\n      let found = false;\n      for (let index = 0; index < categories.length; index++) {\n        const category = categories[index];\n        if(category.categoryPrimaryKey === primaryKey) {\n          found = true;\n          category.categoryData.push(row);\n        }\n      }\n      if (!found) {\n        let newCategory: Category = new Category();\n        newCategory.categoryId = primaryColumn;\n        newCategory.categoryPrimaryKey = primaryKey;\n        newCategory.categoryData = [row];\n        categories.push(newCategory);\n      }\n    });\n  }\n\n  identifyPrimaryColumn(category: string) {\n    let primaryColumn = null;\n    switch (category) {\n      case \"account\":\n        primaryColumn = \"acctId\";\n      break;\n      case \"investor\":\n        primaryColumn = \"investorId\";\n      break;\n      case \"asset\":\n        primaryColumn = \"assetId\";\n      break;\n      case \"assetClass1\":\n        primaryColumn = \"assetClass1Id\";\n      break;\n      case \"assetClass2\":\n        primaryColumn = \"assetClass2Id\";\n      break;\n      case \"assetClass3\":\n        primaryColumn = \"acctClass3Id\";\n      break;\n      default:\n      break;\n    }\n    return primaryColumn;\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 85,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-a0db91bfa3b9914e9048612074084ee6",
            "file": "projects/report-builder/e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl) as Promise<unknown>;\n  }\n\n  getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText() as Promise<string>;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "AvailableColumnOptions",
            "id": "class-AvailableColumnOptions-3f635220d58f15bbac368629a84a3cc0",
            "file": "projects/wri-holdings/src/lib/wri-holdings.service.ts",
            "type": "class",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { of, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { HttpParams, HttpHeaders, HttpClient, HttpErrorResponse } from '@angular/common/http';\n\nexport interface Selection {\n  value: string;\n  viewValue: string;\n}\n\nexport interface DataColumn extends Selection {\n  parentValue?: string;\n  isNumber?: boolean;\n  isAdditive?: boolean;\n}\n\nexport class AvailableColumnOptions {\n  static columnOptions: DataColumn[] = [\n    {value: 'quantity', viewValue: 'Quantity', parentValue: \"holding\", isNumber: true},\n    {value: 'price', viewValue: 'Price ($)', parentValue: \"holding\", isNumber: true},\n    {value: 'value', viewValue: 'Value ($)', parentValue: \"holding\", isNumber: true, isAdditive: true},\n    {value: 'ror', viewValue: 'Rate of Return', parentValue: \"holding\", isNumber: true},\n    {value: 'yield', viewValue: 'Current Yield (%)', parentValue: \"holding\", isNumber: true},\n    {value: 'percentageOfAccount', viewValue: '% of Account', parentValue: \"holding\", isNumber: true, isAdditive: true},\n    {value: 'estimatedAnnualIncome', viewValue: 'Estimated Annual Income ($)', parentValue: \"holding\", isNumber: true, isAdditive: true},\n    {value: 'cost', viewValue: 'Cost ($)', parentValue: \"holding\", isNumber: true, isAdditive: true},\n    {value: 'unrealizedGainLoss', viewValue: 'Unrealized Gain/Loss ($)', parentValue: \"holding\", isNumber: true, isAdditive: true},\n    {value: 'beginningValue', viewValue: 'Beginning Value', parentValue: \"holding\", isNumber: true, isAdditive: true},\n    {value: 'netContribution', viewValue: 'Net Contribution', parentValue: \"holding\", isNumber: true, isAdditive: true},\n    {value: 'changeInValue', viewValue: 'Change In Value', parentValue: \"holding\", isNumber: true, isAdditive: true},\n    {value: 'assetName', viewValue: 'Asset Name', parentValue: \"asset\"},\n    {value: 'ticker', viewValue: 'Ticker Synbol', parentValue: \"asset\"},\n    {value: 'mgmtCompany', viewValue: 'Management Company', parentValue: \"asset\"},\n    {value: 'morningstarRating', viewValue: 'Morningstar Rating', parentValue: \"asset\"},\n    {value: 'assetType', viewValue: 'Asset Type', parentValue: \"asset\"},\n    {value: 'assetClass1Name', viewValue: 'ACL 1 Name', parentValue: \"assetClass1\"},\n    {value: 'assetClass2Name', viewValue: 'ACL 2 Name', parentValue: \"assetClass2\"},\n    {value: 'assetClass3Name', viewValue: 'ACL 3 Name', parentValue: \"assetClass3\"},\n    {value: 'investorId', viewValue: 'Investor ID', parentValue: \"investor\"},\n    {value: 'investorName', viewValue: 'Investor Name', parentValue: \"investor\"},\n    {value: 'acctNum', viewValue: 'Account Number', parentValue: \"account\"},\n    {value: 'acctName', viewValue: 'Account Name', parentValue: \"account\"},\n    {value: 'combinedAccountName', viewValue: 'Account Name / Manager / Style Name as applicable', parentValue: \"account\"},\n    {value: 'mgrName', viewValue: 'Manager Name', parentValue: \"account\"},\n    {value: 'productName', viewValue: 'Product Name', parentValue: \"account\"},\n    {value: 'style', viewValue: 'Style', parentValue: \"account\"},\n    {value: 'accountType', viewValue: 'Account Type', parentValue: \"account\"},\n    {value: 'taxStatus', viewValue: 'Tax Status', parentValue: \"account\"},\n  ];\n}\n\nexport class Category {\n  categoryId: string;\n  categoryPrimaryKey: any;\n  subCategories: Category[] = [];\n  categoryData = [];\n  summaryData = {};\n}\n\nexport interface HoldingsCustomizationOptions {\n  category1?: string;\n  category2?: string;\n  category3?: string;\n  category1Data?: Array<DataColumn>;\n  category2Data?: Array<DataColumn>;\n  category3Data?: Array<DataColumn>;\n  dataColumns?: Array<DataColumn>;\n  showInsuranceData?: boolean;\n}\n\n\nexport class CategorizedData {\n  isCategorized: boolean;\n  uncategorizedData: Category;\n  categorizedData: Category[];\n}\n\n\n@Injectable()\nexport class WRIHoldingsService {\n  jwtToken: string = '';\n  serviceURL: string = '';\n  advisorID: string = '';\n  private dataSet1 = [];\n  private dataSet2 = [];\n\n  constructor(private http: HttpClient) {\n    const pageData = (<any> window).AppSettings;\n    if (pageData && pageData.jwtToken) this.jwtToken = pageData.jwtToken;\n    if (pageData && pageData.serviceBusURL) {\n      this.serviceURL = pageData.serviceBusURL + '/report-builder-service';\n    }\n    else {\n      this.serviceURL = 'https://dummylocation.com/report-builder-service';\n    }\n    if (pageData && pageData.advisorID) this.advisorID = pageData.advisorID;\n  }\n\n  getData(options: HoldingsCustomizationOptions, dummyData: boolean = false) {\n    if (dummyData) {\n      return of(this.getDummyData(options));\n    }\n\n    let postParams = new HttpParams();\n    postParams.append('srcDefConst','reportBuilder');\n    postParams.append('pageMode','componentData');\n    postParams.append('formatType','html');\n\n    let headers = new HttpHeaders();\n    headers = headers.set('Content-Type', 'application/json');\n    headers = headers.set('Authorization', `Bearer ${this.jwtToken}`);\n    headers = headers.set('X-JWT-Assertion', this.jwtToken);\n\n    const jsonRequestBody = {advisorTaxId: this.advisorID};\n    return this.http.post(this.serviceURL + '/get-default-reports-list-metadata', jsonRequestBody, {headers: headers})\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n  private handleError(error: HttpErrorResponse) {\n    return throwError(error.status);\n  }\n\n  getDummyData(options: HoldingsCustomizationOptions) {\n        // Dummy data setup.\n        this.dataSet1 = [\n          {quantity: 7318.06, price: 1.00, value: 7318.06, ror: 12.534, yield: 0   , percentageOfAccount: 0.31, estimatedAnnualIncome: 0,      unrealizedGainLoss: 0,        cost: 0,        beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Brokerage Money Market\", ticker:\"\", mgmtCompany: null, morningstarRating: \"5 star\", assetType: \"Stock\", assetClass1Name: \"Cash or Equivalents\", assetClass2Name: \"Growth\", assetClass3Name: \"Technology\", investorName: \"Sample Investor\", acctNum: \"03004721 000\", acctName: \"The Oliver Wendell\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Giftc Custodial IRA\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123456\", assetId: \"CUSIPv 12345\", assetClass1Id: \"ACL1 ID 1\", assetClass2Id: \"ACL2 ID 1\", assetClass3Id: \"ACL3 ID 1\" },\n          {quantity: 600, price: 50.94, value:  30564, ror: 12.5345365, yield: 1.88, percentageOfAccount: 1.29, estimatedAnnualIncome: 576.00, unrealizedGainLoss: 14534.99, cost: 16029.01, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Abbot Laboratories\", ticker:\"abt\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"Mutual Fund\", assetClass1Name: \"Mutual Fund\", assetClass2Name: \"Growth\", assetClass3Name: \"Technology\", investorName: \"Sample Investor\", acctNum: \"03004721 000\", acctName: \"The Oliver Wendell\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Giftc Custodial IRA\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123456\", assetId: \"CUSIPv 12346\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 1\", assetClass3Id: \"ACL3 ID 1\" },\n          {quantity: 200, price:132.82, value:  26564, ror: 12.5345365, yield: 2.44, percentageOfAccount: 1.12, estimatedAnnualIncome: 648.00, unrealizedGainLoss: 12219.86, cost: 14344.14, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Air Products & chemicals Inc\", ticker:\"apd\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"Mutual Fund\", assetClass1Name: \"Mutual Fund\", assetClass2Name: \"Growth\", assetClass3Name: \"Technology\", investorName: \"Sample Investor\", acctNum: \"03004721 000\", acctName: \"The Oliver Wendell\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Giftc Custodial IRA\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123456\", assetId: \"CUSIPv 12347\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 1\", assetClass3Id: \"ACL3 ID 1\" },\n          {quantity: 500, price: 29.36, value:  14680, ror: 12.5345365, yield: 2.04, percentageOfAccount: 0.62, estimatedAnnualIncome: 300.00, unrealizedGainLoss:  1096.30, cost: 13583.70, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Allison Transmission HLDGS Inc.\", ticker:\"alsn\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"Mutual Fund\", assetClass1Name: \"Mutual Fund\", assetClass2Name: \"Growth\", assetClass3Name: \"Technology\", investorName: \"Sample Investor\", acctNum: \"03004721 000\", acctName: \"The Oliver Wendell\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Giftc Custodial IRA\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123456\", assetId: \"CUSIPv 12348\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 1\", assetClass3Id: \"ACL3 ID 1\" },\n          {quantity:1000, price:  8.54, value:  8540 , ror: 12.5345365, yield: 2.43, percentageOfAccount: 0.36, estimatedAnnualIncome: 125.43, unrealizedGainLoss: -2182.30, cost: 10722.30, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Apigee Corp\", ticker:\"apic\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"Mutual Fund\", assetClass1Name: \"Mutual Fund\", assetClass2Name: \"Balanced\", assetClass3Name: \"Industry\", investorName: \"Sample Investor\", acctNum: \"03004721 000\", acctName: \"The Oliver Wendell\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Giftc Custodial IRA\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123456\", assetId: \"CUSIPv 12349\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 2\", assetClass3Id: \"ACL3 ID 3\" },\n          {quantity: 280, price:123.38, value:34546.4, ror: 12.5345365, yield: 1.69, percentageOfAccount: 1.46, estimatedAnnualIncome: 582.40, unrealizedGainLoss: 13549.60, cost: 20996.80, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"apple inc\", ticker:\"aapl\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"Mutual Fund\", assetClass1Name: \"Mutual Fund\", assetClass2Name: \"Balanced\", assetClass3Name: \"Industry\", investorName: \"Sample Investor\", acctNum: \"03004721 000\", acctName: \"The Oliver Wendell\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Giftc Custodial IRA\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123456\", assetId: \"CUSIPv 12340\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 2\", assetClass3Id: \"ACL3 ID 3\" },\n          {quantity: 400, price: 54.76, value:  21904, ror: 12.5345365, yield: 2.44, percentageOfAccount: 0.92, estimatedAnnualIncome: 306.00, unrealizedGainLoss:   297.08, cost: 21606.92, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Armstrong World Industries Inc New\", ticker:\"awi\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"Mutual Fund\", assetClass1Name: \"Mutual Fund\", assetClass2Name: \"Balanced\", assetClass3Name: \"Industry\", investorName: \"Sample Investor\", acctNum: \"03004721 000\", acctName: \"The Oliver Wendell\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Giftc Custodial IRA\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123456\", assetId: \"CUSIPv 12341\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 2\", assetClass3Id: \"ACL3 ID 3\" },\n          {quantity: 200, price: 80.58, value:  16116, ror: 12.5345365, yield: 2.43, percentageOfAccount: 0.68, estimatedAnnualIncome: 392.00, unrealizedGainLoss:  9829.22, cost: 16116.00, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Automatic Data Processing Inc\", ticker:\"adp\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"Mutual Fund\", assetClass1Name: \"Mutual Fund\", assetClass2Name: \"Balanced\", assetClass3Name: \"Industry\", investorName: \"Sample Investor\", acctNum: \"03004721 000\", acctName: \"The Oliver Wendell\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Giftc Custodial IRA\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123456\", assetId: \"CUSIPv 12342\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 2\", assetClass3Id: \"ACL3 ID 3\" },\n        ];\n        this.dataSet2 = [\n          {quantity: 1200000, price: 25.56, value: 5112, ror: 12.5345365, yield: 2.56, percentageOfAccount: 25.45655, estimatedAnnualIncome: 400.00, unrealizedGainLoss: 3000.00, cost: 3000.00, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Apple Inc.\", ticker:\"appl\", mgmtCompany: null, morningstarRating: \"5 star\", assetType: \"Stock\", assetClass1Name: \"Large Cap\", assetClass2Name: \"Growth\", assetClass3Name: \"Technology\", investorName: \"Investor Name 1\", acctNum: \"127635417236\", acctName: \"Short Account Name 1\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Retail\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123456\", assetId: \"CUSIPv 12345\", assetClass1Id: \"ACL1 ID 1\", assetClass2Id: \"ACL2 ID 1\", assetClass3Id: \"ACL3 ID 1\" },\n          {quantity: 200, price: 25.56, value: 5112, ror: 12.5345365, yield: 2.56, percentageOfAccount: 25.45655, estimatedAnnualIncome: 400.00, unrealizedGainLoss: 3000.00, cost: 3000.00, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Apple Inc.\", ticker:\"appl\", mgmtCompany: null, morningstarRating: \"5 star\", assetType: \"Stock\", assetClass1Name: \"Large Cap\", assetClass2Name: \"Growth\", assetClass3Name: \"Technology\", investorName: \"Investor Name 1\", acctNum: \"127635417237\", acctName: \"Short Account Name 2\", combinedAccountName: \"Lion Account\", mgrName: \"Blackrock\", productName: \"Lion Account\", style: \"Growth\", accountType: \"Retail\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123457\", assetId: \"CUSIPv 12345\", assetClass1Id: \"ACL1 ID 1\", assetClass2Id: \"ACL2 ID 1\", assetClass3Id: \"ACL3 ID 1\" },\n          {quantity: 200, price: 25.56, value: 5112, ror: 12.5345365, yield: 2.56, percentageOfAccount: 25.45655, estimatedAnnualIncome: 400.00, unrealizedGainLoss: 3000.00, cost: 3000.00, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Apple Inc.\", ticker:\"appl\", mgmtCompany: null, morningstarRating: \"5 star\", assetType: \"Stock\", assetClass1Name: \"Large Cap\", assetClass2Name: \"Growth\", assetClass3Name: \"Technology\", investorName: \"Investor Name 2\", acctNum: \"127635417236\", acctName: \"Short Account Name 1\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Retail\", taxStatus: \"Post Tax\", investorId: \"123457\", acctId: \"123456\", assetId: \"CUSIPv 12345\", assetClass1Id: \"ACL1 ID 1\", assetClass2Id: \"ACL2 ID 1\", assetClass3Id: \"ACL3 ID 1\" },\n          {quantity: 200, price: 25.56, value: 5112, ror: 12.5345365, yield: 2.56, percentageOfAccount: 25.45655, estimatedAnnualIncome: 400.00, unrealizedGainLoss: 3000.00, cost: 3000.00, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Apple Inc.\", ticker:\"appl\", mgmtCompany: null, morningstarRating: \"5 star\", assetType: \"Stock\", assetClass1Name: \"Large Cap\", assetClass2Name: \"Growth\", assetClass3Name: \"Technology\", investorName: \"Investor Name 2\", acctNum: \"127635417237\", acctName: \"Short Account Name 2\", combinedAccountName: \"Lion Account\", mgrName: \"Blackrock\", productName: \"Lion Account\", style: \"Growth\", accountType: \"Retail\", taxStatus: \"Post Tax\", investorId: \"123457\", acctId: \"123457\", assetId: \"CUSIPv 12345\", assetClass1Id: \"ACL1 ID 1\", assetClass2Id: \"ACL2 ID 1\", assetClass3Id: \"ACL3 ID 1\" },\n          {quantity: 200, price: 25.56, value: 5112, ror: 12.5345365, yield: 2.56, percentageOfAccount: 25.45655, estimatedAnnualIncome: 400.00, unrealizedGainLoss: 3000.00, cost: 3000.00, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"QQQ ETF\", ticker:\"QQQ\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"ETF\", assetClass1Name: \"Index Fund\", assetClass2Name: \"Balanced\", assetClass3Name: \"Industry\", investorName: \"Investor Name 1\", acctNum: \"127635417236\", acctName: \"Short Account Name 1\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Retail\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123456\", assetId: \"CUSIPv 12346\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 2\", assetClass3Id: \"ACL3 ID 3\" },\n          {quantity: 200, price: 25.56, value: 5112, ror: 12.5345365, yield: 2.56, percentageOfAccount: 25.45655, estimatedAnnualIncome: 400.00, unrealizedGainLoss: 3000.00, cost: 3000.00, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"QQQ ETF\", ticker:\"QQQ\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"ETF\", assetClass1Name: \"Index Fund\", assetClass2Name: \"Balanced\", assetClass3Name: \"Industry\", investorName: \"Investor Name 1\", acctNum: \"127635417237\", acctName: \"Short Account Name 2\", combinedAccountName: \"Lion Account\", mgrName: \"Blackrock\", productName: \"Lion Account\", style: \"Growth\", accountType: \"Retail\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123457\", assetId: \"CUSIPv 12346\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 2\", assetClass3Id: \"ACL3 ID 3\" },\n          {quantity: 200, price: 25.56, value: 5112, ror: 12.5345365, yield: 2.56, percentageOfAccount: 25.45655, estimatedAnnualIncome: 400.00, unrealizedGainLoss: 3000.00, cost: 3000.00, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"QQQ ETF\", ticker:\"QQQ\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"ETF\", assetClass1Name: \"Index Fund\", assetClass2Name: \"Balanced\", assetClass3Name: \"Industry\", investorName: \"Investor Name 2\", acctNum: \"127635417236\", acctName: \"Short Account Name 1\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Retail\", taxStatus: \"Post Tax\", investorId: \"123457\", acctId: \"123456\", assetId: \"CUSIPv 12346\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 2\", assetClass3Id: \"ACL3 ID 3\" },\n          {quantity: 200, price: 25.56, value: 5112, ror: 12.5345365, yield: 2.56, percentageOfAccount: 25.45655, estimatedAnnualIncome: 400.00, unrealizedGainLoss: 3000.00, cost: 3000.00, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"QQQ ETF\", ticker:\"QQQ\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"ETF\", assetClass1Name: \"Index Fund\", assetClass2Name: \"Balanced\", assetClass3Name: \"Industry\", investorName: \"Investor Name 2\", acctNum: \"127635417237\", acctName: \"Short Account Name 2\", combinedAccountName: \"Lion Account\", mgrName: \"Blackrock\", productName: \"Lion Account\", style: \"Growth\", accountType: \"Retail\", taxStatus: \"Post Tax\", investorId: \"123457\", acctId: \"123457\", assetId: \"CUSIPv 12346\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 2\", assetClass3Id: \"ACL3 ID 3\" },\n        ];\n        return this.separateDataIntoCategories(this.dataSet2, options);\n        // Dummy data setup complete.    \n    \n  }\n\n  separateDataIntoCategories(dataTable: Array<any>, options: HoldingsCustomizationOptions){\n    const categories: Category[] = [];\n    let returnValue = new CategorizedData();\n    returnValue.categorizedData = categories;\n    if (options.category1 === null) {\n      //Nocategories defined. So use full Data Table.\n      let uncategorized: Category = {\n        categoryId: \"\",\n        categoryPrimaryKey: \"\",\n        categoryData: [],\n        subCategories: [],\n        summaryData: {}\n      };\n      uncategorized.categoryData = dataTable;\n      this.calculateSummaryData(uncategorized, options);\n      returnValue.isCategorized = false;\n      returnValue.uncategorizedData = uncategorized;\n      return returnValue;\n    }\n    // Need to separate rows into categories\n    // identify Primary column in data.\n    let primaryColumn = this.identifyPrimaryColumn(options.category1);\n    this.allocateRowsToCategory(dataTable, categories, primaryColumn);\n    categories.forEach(category1 => {\n      this.calculateSummaryData(category1, options);\n      if (options.category2 !== null) {\n        //need to further categorize.\n        primaryColumn = this.identifyPrimaryColumn(options.category2);\n        category1.subCategories = [];\n        this.allocateRowsToCategory(category1.categoryData, category1.subCategories, primaryColumn);\n        category1.subCategories.forEach(category2 => {\n          this.calculateSummaryData(category2, options);\n          if (options.category3 !== null) {\n            //need to further categorize.\n            primaryColumn = this.identifyPrimaryColumn(options.category3);\n            category2.subCategories = [];\n            this.allocateRowsToCategory(category2.categoryData, category2.subCategories, primaryColumn);        \n            category2.subCategories.forEach(category3 => {\n              this.calculateSummaryData(category3, options);\n            });\n          }  \n        });\n      }  \n    });\n    returnValue.isCategorized = true;\n    returnValue.categorizedData = categories;\n    return returnValue;\n  }\n\n  calculateSummaryData(category: Category, options: HoldingsCustomizationOptions) {\n    category.summaryData = {};\n    options.dataColumns.forEach(column => {\n      if(column.isNumber && column.isAdditive) {\n        let sum = 0;\n        for (let index = 0; index < category.categoryData.length; index++) {\n          const row = category.categoryData[index];\n          sum = sum + (+row[column.value]);\n        }\n        if (isNaN(sum)) { sum=0;}\n        category.summaryData[column.value] = sum;\n      }\n    });\n  }\n\n  allocateRowsToCategory(dataSet: any[], categories: Category[], primaryColumn: string){\n    dataSet.forEach(row => {\n      const primaryKey = row[primaryColumn];\n      if(primaryKey === null) {return;} // Ignore row as it cannot be categorized.\n      let found = false;\n      for (let index = 0; index < categories.length; index++) {\n        const category = categories[index];\n        if(category.categoryPrimaryKey === primaryKey) {\n          found = true;\n          category.categoryData.push(row);\n        }\n      }\n      if (!found) {\n        let newCategory: Category = new Category();\n        newCategory.categoryId = primaryColumn;\n        newCategory.categoryPrimaryKey = primaryKey;\n        newCategory.categoryData = [row];\n        categories.push(newCategory);\n      }\n    });\n  }\n\n  identifyPrimaryColumn(category: string) {\n    let primaryColumn = null;\n    switch (category) {\n      case \"account\":\n        primaryColumn = \"acctId\";\n      break;\n      case \"investor\":\n        primaryColumn = \"investorId\";\n      break;\n      case \"asset\":\n        primaryColumn = \"assetId\";\n      break;\n      case \"assetClass1\":\n        primaryColumn = \"assetClass1Id\";\n      break;\n      case \"assetClass2\":\n        primaryColumn = \"assetClass2Id\";\n      break;\n      case \"assetClass3\":\n        primaryColumn = \"acctClass3Id\";\n      break;\n      default:\n      break;\n    }\n    return primaryColumn;\n  }\n\n}\n",
            "properties": [
                {
                    "name": "columnOptions",
                    "defaultValue": "[\n    {value: 'quantity', viewValue: 'Quantity', parentValue: \"holding\", isNumber: true},\n    {value: 'price', viewValue: 'Price ($)', parentValue: \"holding\", isNumber: true},\n    {value: 'value', viewValue: 'Value ($)', parentValue: \"holding\", isNumber: true, isAdditive: true},\n    {value: 'ror', viewValue: 'Rate of Return', parentValue: \"holding\", isNumber: true},\n    {value: 'yield', viewValue: 'Current Yield (%)', parentValue: \"holding\", isNumber: true},\n    {value: 'percentageOfAccount', viewValue: '% of Account', parentValue: \"holding\", isNumber: true, isAdditive: true},\n    {value: 'estimatedAnnualIncome', viewValue: 'Estimated Annual Income ($)', parentValue: \"holding\", isNumber: true, isAdditive: true},\n    {value: 'cost', viewValue: 'Cost ($)', parentValue: \"holding\", isNumber: true, isAdditive: true},\n    {value: 'unrealizedGainLoss', viewValue: 'Unrealized Gain/Loss ($)', parentValue: \"holding\", isNumber: true, isAdditive: true},\n    {value: 'beginningValue', viewValue: 'Beginning Value', parentValue: \"holding\", isNumber: true, isAdditive: true},\n    {value: 'netContribution', viewValue: 'Net Contribution', parentValue: \"holding\", isNumber: true, isAdditive: true},\n    {value: 'changeInValue', viewValue: 'Change In Value', parentValue: \"holding\", isNumber: true, isAdditive: true},\n    {value: 'assetName', viewValue: 'Asset Name', parentValue: \"asset\"},\n    {value: 'ticker', viewValue: 'Ticker Synbol', parentValue: \"asset\"},\n    {value: 'mgmtCompany', viewValue: 'Management Company', parentValue: \"asset\"},\n    {value: 'morningstarRating', viewValue: 'Morningstar Rating', parentValue: \"asset\"},\n    {value: 'assetType', viewValue: 'Asset Type', parentValue: \"asset\"},\n    {value: 'assetClass1Name', viewValue: 'ACL 1 Name', parentValue: \"assetClass1\"},\n    {value: 'assetClass2Name', viewValue: 'ACL 2 Name', parentValue: \"assetClass2\"},\n    {value: 'assetClass3Name', viewValue: 'ACL 3 Name', parentValue: \"assetClass3\"},\n    {value: 'investorId', viewValue: 'Investor ID', parentValue: \"investor\"},\n    {value: 'investorName', viewValue: 'Investor Name', parentValue: \"investor\"},\n    {value: 'acctNum', viewValue: 'Account Number', parentValue: \"account\"},\n    {value: 'acctName', viewValue: 'Account Name', parentValue: \"account\"},\n    {value: 'combinedAccountName', viewValue: 'Account Name / Manager / Style Name as applicable', parentValue: \"account\"},\n    {value: 'mgrName', viewValue: 'Manager Name', parentValue: \"account\"},\n    {value: 'productName', viewValue: 'Product Name', parentValue: \"account\"},\n    {value: 'style', viewValue: 'Style', parentValue: \"account\"},\n    {value: 'accountType', viewValue: 'Account Type', parentValue: \"account\"},\n    {value: 'taxStatus', viewValue: 'Tax Status', parentValue: \"account\"},\n  ]",
                    "type": "DataColumn[]",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        115
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "BaseReportBuilderComponent",
            "id": "class-BaseReportBuilderComponent-fe403851b8bbb8de025b9fae9d19b0b2",
            "file": "projects/report-builder/src/app/component/base-report-builder-component.class.ts",
            "type": "class",
            "sourceCode": "import { Input, Output, EventEmitter } from '@angular/core';\r\nimport { GridsterItem } from 'angular-gridster2';\r\nimport { Subscription } from 'rxjs';\r\n\r\nexport class BaseReportBuilderComponent {\r\n  @Output()\r\n  optionsOuput = new EventEmitter<any>();\r\n  @Input()\r\n  widget: GridsterItem;\r\n  @Input()\r\n  resizeEvent : EventEmitter<any>;\r\n  @Input()\r\n  portraitOrientation: boolean;\r\n\r\n  resizeSub: Subscription;\r\n}",
            "properties": [
                {
                    "name": "resizeSub",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [
                {
                    "name": "portraitOrientation",
                    "line": 13,
                    "type": "boolean"
                },
                {
                    "name": "resizeEvent",
                    "line": 11,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "widget",
                    "line": 9,
                    "type": "GridsterItem"
                }
            ],
            "outputsClass": [
                {
                    "name": "optionsOuput",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 7,
                    "type": "EventEmitter"
                }
            ],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CategorizedData",
            "id": "class-CategorizedData-3f635220d58f15bbac368629a84a3cc0",
            "file": "projects/wri-holdings/src/lib/wri-holdings.service.ts",
            "type": "class",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { of, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { HttpParams, HttpHeaders, HttpClient, HttpErrorResponse } from '@angular/common/http';\n\nexport interface Selection {\n  value: string;\n  viewValue: string;\n}\n\nexport interface DataColumn extends Selection {\n  parentValue?: string;\n  isNumber?: boolean;\n  isAdditive?: boolean;\n}\n\nexport class AvailableColumnOptions {\n  static columnOptions: DataColumn[] = [\n    {value: 'quantity', viewValue: 'Quantity', parentValue: \"holding\", isNumber: true},\n    {value: 'price', viewValue: 'Price ($)', parentValue: \"holding\", isNumber: true},\n    {value: 'value', viewValue: 'Value ($)', parentValue: \"holding\", isNumber: true, isAdditive: true},\n    {value: 'ror', viewValue: 'Rate of Return', parentValue: \"holding\", isNumber: true},\n    {value: 'yield', viewValue: 'Current Yield (%)', parentValue: \"holding\", isNumber: true},\n    {value: 'percentageOfAccount', viewValue: '% of Account', parentValue: \"holding\", isNumber: true, isAdditive: true},\n    {value: 'estimatedAnnualIncome', viewValue: 'Estimated Annual Income ($)', parentValue: \"holding\", isNumber: true, isAdditive: true},\n    {value: 'cost', viewValue: 'Cost ($)', parentValue: \"holding\", isNumber: true, isAdditive: true},\n    {value: 'unrealizedGainLoss', viewValue: 'Unrealized Gain/Loss ($)', parentValue: \"holding\", isNumber: true, isAdditive: true},\n    {value: 'beginningValue', viewValue: 'Beginning Value', parentValue: \"holding\", isNumber: true, isAdditive: true},\n    {value: 'netContribution', viewValue: 'Net Contribution', parentValue: \"holding\", isNumber: true, isAdditive: true},\n    {value: 'changeInValue', viewValue: 'Change In Value', parentValue: \"holding\", isNumber: true, isAdditive: true},\n    {value: 'assetName', viewValue: 'Asset Name', parentValue: \"asset\"},\n    {value: 'ticker', viewValue: 'Ticker Synbol', parentValue: \"asset\"},\n    {value: 'mgmtCompany', viewValue: 'Management Company', parentValue: \"asset\"},\n    {value: 'morningstarRating', viewValue: 'Morningstar Rating', parentValue: \"asset\"},\n    {value: 'assetType', viewValue: 'Asset Type', parentValue: \"asset\"},\n    {value: 'assetClass1Name', viewValue: 'ACL 1 Name', parentValue: \"assetClass1\"},\n    {value: 'assetClass2Name', viewValue: 'ACL 2 Name', parentValue: \"assetClass2\"},\n    {value: 'assetClass3Name', viewValue: 'ACL 3 Name', parentValue: \"assetClass3\"},\n    {value: 'investorId', viewValue: 'Investor ID', parentValue: \"investor\"},\n    {value: 'investorName', viewValue: 'Investor Name', parentValue: \"investor\"},\n    {value: 'acctNum', viewValue: 'Account Number', parentValue: \"account\"},\n    {value: 'acctName', viewValue: 'Account Name', parentValue: \"account\"},\n    {value: 'combinedAccountName', viewValue: 'Account Name / Manager / Style Name as applicable', parentValue: \"account\"},\n    {value: 'mgrName', viewValue: 'Manager Name', parentValue: \"account\"},\n    {value: 'productName', viewValue: 'Product Name', parentValue: \"account\"},\n    {value: 'style', viewValue: 'Style', parentValue: \"account\"},\n    {value: 'accountType', viewValue: 'Account Type', parentValue: \"account\"},\n    {value: 'taxStatus', viewValue: 'Tax Status', parentValue: \"account\"},\n  ];\n}\n\nexport class Category {\n  categoryId: string;\n  categoryPrimaryKey: any;\n  subCategories: Category[] = [];\n  categoryData = [];\n  summaryData = {};\n}\n\nexport interface HoldingsCustomizationOptions {\n  category1?: string;\n  category2?: string;\n  category3?: string;\n  category1Data?: Array<DataColumn>;\n  category2Data?: Array<DataColumn>;\n  category3Data?: Array<DataColumn>;\n  dataColumns?: Array<DataColumn>;\n  showInsuranceData?: boolean;\n}\n\n\nexport class CategorizedData {\n  isCategorized: boolean;\n  uncategorizedData: Category;\n  categorizedData: Category[];\n}\n\n\n@Injectable()\nexport class WRIHoldingsService {\n  jwtToken: string = '';\n  serviceURL: string = '';\n  advisorID: string = '';\n  private dataSet1 = [];\n  private dataSet2 = [];\n\n  constructor(private http: HttpClient) {\n    const pageData = (<any> window).AppSettings;\n    if (pageData && pageData.jwtToken) this.jwtToken = pageData.jwtToken;\n    if (pageData && pageData.serviceBusURL) {\n      this.serviceURL = pageData.serviceBusURL + '/report-builder-service';\n    }\n    else {\n      this.serviceURL = 'https://dummylocation.com/report-builder-service';\n    }\n    if (pageData && pageData.advisorID) this.advisorID = pageData.advisorID;\n  }\n\n  getData(options: HoldingsCustomizationOptions, dummyData: boolean = false) {\n    if (dummyData) {\n      return of(this.getDummyData(options));\n    }\n\n    let postParams = new HttpParams();\n    postParams.append('srcDefConst','reportBuilder');\n    postParams.append('pageMode','componentData');\n    postParams.append('formatType','html');\n\n    let headers = new HttpHeaders();\n    headers = headers.set('Content-Type', 'application/json');\n    headers = headers.set('Authorization', `Bearer ${this.jwtToken}`);\n    headers = headers.set('X-JWT-Assertion', this.jwtToken);\n\n    const jsonRequestBody = {advisorTaxId: this.advisorID};\n    return this.http.post(this.serviceURL + '/get-default-reports-list-metadata', jsonRequestBody, {headers: headers})\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n  private handleError(error: HttpErrorResponse) {\n    return throwError(error.status);\n  }\n\n  getDummyData(options: HoldingsCustomizationOptions) {\n        // Dummy data setup.\n        this.dataSet1 = [\n          {quantity: 7318.06, price: 1.00, value: 7318.06, ror: 12.534, yield: 0   , percentageOfAccount: 0.31, estimatedAnnualIncome: 0,      unrealizedGainLoss: 0,        cost: 0,        beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Brokerage Money Market\", ticker:\"\", mgmtCompany: null, morningstarRating: \"5 star\", assetType: \"Stock\", assetClass1Name: \"Cash or Equivalents\", assetClass2Name: \"Growth\", assetClass3Name: \"Technology\", investorName: \"Sample Investor\", acctNum: \"03004721 000\", acctName: \"The Oliver Wendell\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Giftc Custodial IRA\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123456\", assetId: \"CUSIPv 12345\", assetClass1Id: \"ACL1 ID 1\", assetClass2Id: \"ACL2 ID 1\", assetClass3Id: \"ACL3 ID 1\" },\n          {quantity: 600, price: 50.94, value:  30564, ror: 12.5345365, yield: 1.88, percentageOfAccount: 1.29, estimatedAnnualIncome: 576.00, unrealizedGainLoss: 14534.99, cost: 16029.01, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Abbot Laboratories\", ticker:\"abt\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"Mutual Fund\", assetClass1Name: \"Mutual Fund\", assetClass2Name: \"Growth\", assetClass3Name: \"Technology\", investorName: \"Sample Investor\", acctNum: \"03004721 000\", acctName: \"The Oliver Wendell\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Giftc Custodial IRA\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123456\", assetId: \"CUSIPv 12346\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 1\", assetClass3Id: \"ACL3 ID 1\" },\n          {quantity: 200, price:132.82, value:  26564, ror: 12.5345365, yield: 2.44, percentageOfAccount: 1.12, estimatedAnnualIncome: 648.00, unrealizedGainLoss: 12219.86, cost: 14344.14, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Air Products & chemicals Inc\", ticker:\"apd\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"Mutual Fund\", assetClass1Name: \"Mutual Fund\", assetClass2Name: \"Growth\", assetClass3Name: \"Technology\", investorName: \"Sample Investor\", acctNum: \"03004721 000\", acctName: \"The Oliver Wendell\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Giftc Custodial IRA\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123456\", assetId: \"CUSIPv 12347\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 1\", assetClass3Id: \"ACL3 ID 1\" },\n          {quantity: 500, price: 29.36, value:  14680, ror: 12.5345365, yield: 2.04, percentageOfAccount: 0.62, estimatedAnnualIncome: 300.00, unrealizedGainLoss:  1096.30, cost: 13583.70, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Allison Transmission HLDGS Inc.\", ticker:\"alsn\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"Mutual Fund\", assetClass1Name: \"Mutual Fund\", assetClass2Name: \"Growth\", assetClass3Name: \"Technology\", investorName: \"Sample Investor\", acctNum: \"03004721 000\", acctName: \"The Oliver Wendell\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Giftc Custodial IRA\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123456\", assetId: \"CUSIPv 12348\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 1\", assetClass3Id: \"ACL3 ID 1\" },\n          {quantity:1000, price:  8.54, value:  8540 , ror: 12.5345365, yield: 2.43, percentageOfAccount: 0.36, estimatedAnnualIncome: 125.43, unrealizedGainLoss: -2182.30, cost: 10722.30, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Apigee Corp\", ticker:\"apic\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"Mutual Fund\", assetClass1Name: \"Mutual Fund\", assetClass2Name: \"Balanced\", assetClass3Name: \"Industry\", investorName: \"Sample Investor\", acctNum: \"03004721 000\", acctName: \"The Oliver Wendell\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Giftc Custodial IRA\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123456\", assetId: \"CUSIPv 12349\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 2\", assetClass3Id: \"ACL3 ID 3\" },\n          {quantity: 280, price:123.38, value:34546.4, ror: 12.5345365, yield: 1.69, percentageOfAccount: 1.46, estimatedAnnualIncome: 582.40, unrealizedGainLoss: 13549.60, cost: 20996.80, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"apple inc\", ticker:\"aapl\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"Mutual Fund\", assetClass1Name: \"Mutual Fund\", assetClass2Name: \"Balanced\", assetClass3Name: \"Industry\", investorName: \"Sample Investor\", acctNum: \"03004721 000\", acctName: \"The Oliver Wendell\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Giftc Custodial IRA\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123456\", assetId: \"CUSIPv 12340\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 2\", assetClass3Id: \"ACL3 ID 3\" },\n          {quantity: 400, price: 54.76, value:  21904, ror: 12.5345365, yield: 2.44, percentageOfAccount: 0.92, estimatedAnnualIncome: 306.00, unrealizedGainLoss:   297.08, cost: 21606.92, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Armstrong World Industries Inc New\", ticker:\"awi\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"Mutual Fund\", assetClass1Name: \"Mutual Fund\", assetClass2Name: \"Balanced\", assetClass3Name: \"Industry\", investorName: \"Sample Investor\", acctNum: \"03004721 000\", acctName: \"The Oliver Wendell\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Giftc Custodial IRA\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123456\", assetId: \"CUSIPv 12341\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 2\", assetClass3Id: \"ACL3 ID 3\" },\n          {quantity: 200, price: 80.58, value:  16116, ror: 12.5345365, yield: 2.43, percentageOfAccount: 0.68, estimatedAnnualIncome: 392.00, unrealizedGainLoss:  9829.22, cost: 16116.00, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Automatic Data Processing Inc\", ticker:\"adp\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"Mutual Fund\", assetClass1Name: \"Mutual Fund\", assetClass2Name: \"Balanced\", assetClass3Name: \"Industry\", investorName: \"Sample Investor\", acctNum: \"03004721 000\", acctName: \"The Oliver Wendell\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Giftc Custodial IRA\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123456\", assetId: \"CUSIPv 12342\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 2\", assetClass3Id: \"ACL3 ID 3\" },\n        ];\n        this.dataSet2 = [\n          {quantity: 1200000, price: 25.56, value: 5112, ror: 12.5345365, yield: 2.56, percentageOfAccount: 25.45655, estimatedAnnualIncome: 400.00, unrealizedGainLoss: 3000.00, cost: 3000.00, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Apple Inc.\", ticker:\"appl\", mgmtCompany: null, morningstarRating: \"5 star\", assetType: \"Stock\", assetClass1Name: \"Large Cap\", assetClass2Name: \"Growth\", assetClass3Name: \"Technology\", investorName: \"Investor Name 1\", acctNum: \"127635417236\", acctName: \"Short Account Name 1\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Retail\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123456\", assetId: \"CUSIPv 12345\", assetClass1Id: \"ACL1 ID 1\", assetClass2Id: \"ACL2 ID 1\", assetClass3Id: \"ACL3 ID 1\" },\n          {quantity: 200, price: 25.56, value: 5112, ror: 12.5345365, yield: 2.56, percentageOfAccount: 25.45655, estimatedAnnualIncome: 400.00, unrealizedGainLoss: 3000.00, cost: 3000.00, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Apple Inc.\", ticker:\"appl\", mgmtCompany: null, morningstarRating: \"5 star\", assetType: \"Stock\", assetClass1Name: \"Large Cap\", assetClass2Name: \"Growth\", assetClass3Name: \"Technology\", investorName: \"Investor Name 1\", acctNum: \"127635417237\", acctName: \"Short Account Name 2\", combinedAccountName: \"Lion Account\", mgrName: \"Blackrock\", productName: \"Lion Account\", style: \"Growth\", accountType: \"Retail\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123457\", assetId: \"CUSIPv 12345\", assetClass1Id: \"ACL1 ID 1\", assetClass2Id: \"ACL2 ID 1\", assetClass3Id: \"ACL3 ID 1\" },\n          {quantity: 200, price: 25.56, value: 5112, ror: 12.5345365, yield: 2.56, percentageOfAccount: 25.45655, estimatedAnnualIncome: 400.00, unrealizedGainLoss: 3000.00, cost: 3000.00, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Apple Inc.\", ticker:\"appl\", mgmtCompany: null, morningstarRating: \"5 star\", assetType: \"Stock\", assetClass1Name: \"Large Cap\", assetClass2Name: \"Growth\", assetClass3Name: \"Technology\", investorName: \"Investor Name 2\", acctNum: \"127635417236\", acctName: \"Short Account Name 1\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Retail\", taxStatus: \"Post Tax\", investorId: \"123457\", acctId: \"123456\", assetId: \"CUSIPv 12345\", assetClass1Id: \"ACL1 ID 1\", assetClass2Id: \"ACL2 ID 1\", assetClass3Id: \"ACL3 ID 1\" },\n          {quantity: 200, price: 25.56, value: 5112, ror: 12.5345365, yield: 2.56, percentageOfAccount: 25.45655, estimatedAnnualIncome: 400.00, unrealizedGainLoss: 3000.00, cost: 3000.00, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Apple Inc.\", ticker:\"appl\", mgmtCompany: null, morningstarRating: \"5 star\", assetType: \"Stock\", assetClass1Name: \"Large Cap\", assetClass2Name: \"Growth\", assetClass3Name: \"Technology\", investorName: \"Investor Name 2\", acctNum: \"127635417237\", acctName: \"Short Account Name 2\", combinedAccountName: \"Lion Account\", mgrName: \"Blackrock\", productName: \"Lion Account\", style: \"Growth\", accountType: \"Retail\", taxStatus: \"Post Tax\", investorId: \"123457\", acctId: \"123457\", assetId: \"CUSIPv 12345\", assetClass1Id: \"ACL1 ID 1\", assetClass2Id: \"ACL2 ID 1\", assetClass3Id: \"ACL3 ID 1\" },\n          {quantity: 200, price: 25.56, value: 5112, ror: 12.5345365, yield: 2.56, percentageOfAccount: 25.45655, estimatedAnnualIncome: 400.00, unrealizedGainLoss: 3000.00, cost: 3000.00, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"QQQ ETF\", ticker:\"QQQ\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"ETF\", assetClass1Name: \"Index Fund\", assetClass2Name: \"Balanced\", assetClass3Name: \"Industry\", investorName: \"Investor Name 1\", acctNum: \"127635417236\", acctName: \"Short Account Name 1\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Retail\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123456\", assetId: \"CUSIPv 12346\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 2\", assetClass3Id: \"ACL3 ID 3\" },\n          {quantity: 200, price: 25.56, value: 5112, ror: 12.5345365, yield: 2.56, percentageOfAccount: 25.45655, estimatedAnnualIncome: 400.00, unrealizedGainLoss: 3000.00, cost: 3000.00, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"QQQ ETF\", ticker:\"QQQ\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"ETF\", assetClass1Name: \"Index Fund\", assetClass2Name: \"Balanced\", assetClass3Name: \"Industry\", investorName: \"Investor Name 1\", acctNum: \"127635417237\", acctName: \"Short Account Name 2\", combinedAccountName: \"Lion Account\", mgrName: \"Blackrock\", productName: \"Lion Account\", style: \"Growth\", accountType: \"Retail\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123457\", assetId: \"CUSIPv 12346\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 2\", assetClass3Id: \"ACL3 ID 3\" },\n          {quantity: 200, price: 25.56, value: 5112, ror: 12.5345365, yield: 2.56, percentageOfAccount: 25.45655, estimatedAnnualIncome: 400.00, unrealizedGainLoss: 3000.00, cost: 3000.00, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"QQQ ETF\", ticker:\"QQQ\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"ETF\", assetClass1Name: \"Index Fund\", assetClass2Name: \"Balanced\", assetClass3Name: \"Industry\", investorName: \"Investor Name 2\", acctNum: \"127635417236\", acctName: \"Short Account Name 1\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Retail\", taxStatus: \"Post Tax\", investorId: \"123457\", acctId: \"123456\", assetId: \"CUSIPv 12346\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 2\", assetClass3Id: \"ACL3 ID 3\" },\n          {quantity: 200, price: 25.56, value: 5112, ror: 12.5345365, yield: 2.56, percentageOfAccount: 25.45655, estimatedAnnualIncome: 400.00, unrealizedGainLoss: 3000.00, cost: 3000.00, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"QQQ ETF\", ticker:\"QQQ\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"ETF\", assetClass1Name: \"Index Fund\", assetClass2Name: \"Balanced\", assetClass3Name: \"Industry\", investorName: \"Investor Name 2\", acctNum: \"127635417237\", acctName: \"Short Account Name 2\", combinedAccountName: \"Lion Account\", mgrName: \"Blackrock\", productName: \"Lion Account\", style: \"Growth\", accountType: \"Retail\", taxStatus: \"Post Tax\", investorId: \"123457\", acctId: \"123457\", assetId: \"CUSIPv 12346\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 2\", assetClass3Id: \"ACL3 ID 3\" },\n        ];\n        return this.separateDataIntoCategories(this.dataSet2, options);\n        // Dummy data setup complete.    \n    \n  }\n\n  separateDataIntoCategories(dataTable: Array<any>, options: HoldingsCustomizationOptions){\n    const categories: Category[] = [];\n    let returnValue = new CategorizedData();\n    returnValue.categorizedData = categories;\n    if (options.category1 === null) {\n      //Nocategories defined. So use full Data Table.\n      let uncategorized: Category = {\n        categoryId: \"\",\n        categoryPrimaryKey: \"\",\n        categoryData: [],\n        subCategories: [],\n        summaryData: {}\n      };\n      uncategorized.categoryData = dataTable;\n      this.calculateSummaryData(uncategorized, options);\n      returnValue.isCategorized = false;\n      returnValue.uncategorizedData = uncategorized;\n      return returnValue;\n    }\n    // Need to separate rows into categories\n    // identify Primary column in data.\n    let primaryColumn = this.identifyPrimaryColumn(options.category1);\n    this.allocateRowsToCategory(dataTable, categories, primaryColumn);\n    categories.forEach(category1 => {\n      this.calculateSummaryData(category1, options);\n      if (options.category2 !== null) {\n        //need to further categorize.\n        primaryColumn = this.identifyPrimaryColumn(options.category2);\n        category1.subCategories = [];\n        this.allocateRowsToCategory(category1.categoryData, category1.subCategories, primaryColumn);\n        category1.subCategories.forEach(category2 => {\n          this.calculateSummaryData(category2, options);\n          if (options.category3 !== null) {\n            //need to further categorize.\n            primaryColumn = this.identifyPrimaryColumn(options.category3);\n            category2.subCategories = [];\n            this.allocateRowsToCategory(category2.categoryData, category2.subCategories, primaryColumn);        \n            category2.subCategories.forEach(category3 => {\n              this.calculateSummaryData(category3, options);\n            });\n          }  \n        });\n      }  \n    });\n    returnValue.isCategorized = true;\n    returnValue.categorizedData = categories;\n    return returnValue;\n  }\n\n  calculateSummaryData(category: Category, options: HoldingsCustomizationOptions) {\n    category.summaryData = {};\n    options.dataColumns.forEach(column => {\n      if(column.isNumber && column.isAdditive) {\n        let sum = 0;\n        for (let index = 0; index < category.categoryData.length; index++) {\n          const row = category.categoryData[index];\n          sum = sum + (+row[column.value]);\n        }\n        if (isNaN(sum)) { sum=0;}\n        category.summaryData[column.value] = sum;\n      }\n    });\n  }\n\n  allocateRowsToCategory(dataSet: any[], categories: Category[], primaryColumn: string){\n    dataSet.forEach(row => {\n      const primaryKey = row[primaryColumn];\n      if(primaryKey === null) {return;} // Ignore row as it cannot be categorized.\n      let found = false;\n      for (let index = 0; index < categories.length; index++) {\n        const category = categories[index];\n        if(category.categoryPrimaryKey === primaryKey) {\n          found = true;\n          category.categoryData.push(row);\n        }\n      }\n      if (!found) {\n        let newCategory: Category = new Category();\n        newCategory.categoryId = primaryColumn;\n        newCategory.categoryPrimaryKey = primaryKey;\n        newCategory.categoryData = [row];\n        categories.push(newCategory);\n      }\n    });\n  }\n\n  identifyPrimaryColumn(category: string) {\n    let primaryColumn = null;\n    switch (category) {\n      case \"account\":\n        primaryColumn = \"acctId\";\n      break;\n      case \"investor\":\n        primaryColumn = \"investorId\";\n      break;\n      case \"asset\":\n        primaryColumn = \"assetId\";\n      break;\n      case \"assetClass1\":\n        primaryColumn = \"assetClass1Id\";\n      break;\n      case \"assetClass2\":\n        primaryColumn = \"assetClass2Id\";\n      break;\n      case \"assetClass3\":\n        primaryColumn = \"acctClass3Id\";\n      break;\n      default:\n      break;\n    }\n    return primaryColumn;\n  }\n\n}\n",
            "properties": [
                {
                    "name": "categorizedData",
                    "type": "Category[]",
                    "optional": false,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "isCategorized",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "uncategorizedData",
                    "type": "Category",
                    "optional": false,
                    "description": "",
                    "line": 74
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Category",
            "id": "class-Category-3f635220d58f15bbac368629a84a3cc0",
            "file": "projects/wri-holdings/src/lib/wri-holdings.service.ts",
            "type": "class",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { of, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { HttpParams, HttpHeaders, HttpClient, HttpErrorResponse } from '@angular/common/http';\n\nexport interface Selection {\n  value: string;\n  viewValue: string;\n}\n\nexport interface DataColumn extends Selection {\n  parentValue?: string;\n  isNumber?: boolean;\n  isAdditive?: boolean;\n}\n\nexport class AvailableColumnOptions {\n  static columnOptions: DataColumn[] = [\n    {value: 'quantity', viewValue: 'Quantity', parentValue: \"holding\", isNumber: true},\n    {value: 'price', viewValue: 'Price ($)', parentValue: \"holding\", isNumber: true},\n    {value: 'value', viewValue: 'Value ($)', parentValue: \"holding\", isNumber: true, isAdditive: true},\n    {value: 'ror', viewValue: 'Rate of Return', parentValue: \"holding\", isNumber: true},\n    {value: 'yield', viewValue: 'Current Yield (%)', parentValue: \"holding\", isNumber: true},\n    {value: 'percentageOfAccount', viewValue: '% of Account', parentValue: \"holding\", isNumber: true, isAdditive: true},\n    {value: 'estimatedAnnualIncome', viewValue: 'Estimated Annual Income ($)', parentValue: \"holding\", isNumber: true, isAdditive: true},\n    {value: 'cost', viewValue: 'Cost ($)', parentValue: \"holding\", isNumber: true, isAdditive: true},\n    {value: 'unrealizedGainLoss', viewValue: 'Unrealized Gain/Loss ($)', parentValue: \"holding\", isNumber: true, isAdditive: true},\n    {value: 'beginningValue', viewValue: 'Beginning Value', parentValue: \"holding\", isNumber: true, isAdditive: true},\n    {value: 'netContribution', viewValue: 'Net Contribution', parentValue: \"holding\", isNumber: true, isAdditive: true},\n    {value: 'changeInValue', viewValue: 'Change In Value', parentValue: \"holding\", isNumber: true, isAdditive: true},\n    {value: 'assetName', viewValue: 'Asset Name', parentValue: \"asset\"},\n    {value: 'ticker', viewValue: 'Ticker Synbol', parentValue: \"asset\"},\n    {value: 'mgmtCompany', viewValue: 'Management Company', parentValue: \"asset\"},\n    {value: 'morningstarRating', viewValue: 'Morningstar Rating', parentValue: \"asset\"},\n    {value: 'assetType', viewValue: 'Asset Type', parentValue: \"asset\"},\n    {value: 'assetClass1Name', viewValue: 'ACL 1 Name', parentValue: \"assetClass1\"},\n    {value: 'assetClass2Name', viewValue: 'ACL 2 Name', parentValue: \"assetClass2\"},\n    {value: 'assetClass3Name', viewValue: 'ACL 3 Name', parentValue: \"assetClass3\"},\n    {value: 'investorId', viewValue: 'Investor ID', parentValue: \"investor\"},\n    {value: 'investorName', viewValue: 'Investor Name', parentValue: \"investor\"},\n    {value: 'acctNum', viewValue: 'Account Number', parentValue: \"account\"},\n    {value: 'acctName', viewValue: 'Account Name', parentValue: \"account\"},\n    {value: 'combinedAccountName', viewValue: 'Account Name / Manager / Style Name as applicable', parentValue: \"account\"},\n    {value: 'mgrName', viewValue: 'Manager Name', parentValue: \"account\"},\n    {value: 'productName', viewValue: 'Product Name', parentValue: \"account\"},\n    {value: 'style', viewValue: 'Style', parentValue: \"account\"},\n    {value: 'accountType', viewValue: 'Account Type', parentValue: \"account\"},\n    {value: 'taxStatus', viewValue: 'Tax Status', parentValue: \"account\"},\n  ];\n}\n\nexport class Category {\n  categoryId: string;\n  categoryPrimaryKey: any;\n  subCategories: Category[] = [];\n  categoryData = [];\n  summaryData = {};\n}\n\nexport interface HoldingsCustomizationOptions {\n  category1?: string;\n  category2?: string;\n  category3?: string;\n  category1Data?: Array<DataColumn>;\n  category2Data?: Array<DataColumn>;\n  category3Data?: Array<DataColumn>;\n  dataColumns?: Array<DataColumn>;\n  showInsuranceData?: boolean;\n}\n\n\nexport class CategorizedData {\n  isCategorized: boolean;\n  uncategorizedData: Category;\n  categorizedData: Category[];\n}\n\n\n@Injectable()\nexport class WRIHoldingsService {\n  jwtToken: string = '';\n  serviceURL: string = '';\n  advisorID: string = '';\n  private dataSet1 = [];\n  private dataSet2 = [];\n\n  constructor(private http: HttpClient) {\n    const pageData = (<any> window).AppSettings;\n    if (pageData && pageData.jwtToken) this.jwtToken = pageData.jwtToken;\n    if (pageData && pageData.serviceBusURL) {\n      this.serviceURL = pageData.serviceBusURL + '/report-builder-service';\n    }\n    else {\n      this.serviceURL = 'https://dummylocation.com/report-builder-service';\n    }\n    if (pageData && pageData.advisorID) this.advisorID = pageData.advisorID;\n  }\n\n  getData(options: HoldingsCustomizationOptions, dummyData: boolean = false) {\n    if (dummyData) {\n      return of(this.getDummyData(options));\n    }\n\n    let postParams = new HttpParams();\n    postParams.append('srcDefConst','reportBuilder');\n    postParams.append('pageMode','componentData');\n    postParams.append('formatType','html');\n\n    let headers = new HttpHeaders();\n    headers = headers.set('Content-Type', 'application/json');\n    headers = headers.set('Authorization', `Bearer ${this.jwtToken}`);\n    headers = headers.set('X-JWT-Assertion', this.jwtToken);\n\n    const jsonRequestBody = {advisorTaxId: this.advisorID};\n    return this.http.post(this.serviceURL + '/get-default-reports-list-metadata', jsonRequestBody, {headers: headers})\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n  private handleError(error: HttpErrorResponse) {\n    return throwError(error.status);\n  }\n\n  getDummyData(options: HoldingsCustomizationOptions) {\n        // Dummy data setup.\n        this.dataSet1 = [\n          {quantity: 7318.06, price: 1.00, value: 7318.06, ror: 12.534, yield: 0   , percentageOfAccount: 0.31, estimatedAnnualIncome: 0,      unrealizedGainLoss: 0,        cost: 0,        beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Brokerage Money Market\", ticker:\"\", mgmtCompany: null, morningstarRating: \"5 star\", assetType: \"Stock\", assetClass1Name: \"Cash or Equivalents\", assetClass2Name: \"Growth\", assetClass3Name: \"Technology\", investorName: \"Sample Investor\", acctNum: \"03004721 000\", acctName: \"The Oliver Wendell\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Giftc Custodial IRA\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123456\", assetId: \"CUSIPv 12345\", assetClass1Id: \"ACL1 ID 1\", assetClass2Id: \"ACL2 ID 1\", assetClass3Id: \"ACL3 ID 1\" },\n          {quantity: 600, price: 50.94, value:  30564, ror: 12.5345365, yield: 1.88, percentageOfAccount: 1.29, estimatedAnnualIncome: 576.00, unrealizedGainLoss: 14534.99, cost: 16029.01, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Abbot Laboratories\", ticker:\"abt\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"Mutual Fund\", assetClass1Name: \"Mutual Fund\", assetClass2Name: \"Growth\", assetClass3Name: \"Technology\", investorName: \"Sample Investor\", acctNum: \"03004721 000\", acctName: \"The Oliver Wendell\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Giftc Custodial IRA\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123456\", assetId: \"CUSIPv 12346\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 1\", assetClass3Id: \"ACL3 ID 1\" },\n          {quantity: 200, price:132.82, value:  26564, ror: 12.5345365, yield: 2.44, percentageOfAccount: 1.12, estimatedAnnualIncome: 648.00, unrealizedGainLoss: 12219.86, cost: 14344.14, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Air Products & chemicals Inc\", ticker:\"apd\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"Mutual Fund\", assetClass1Name: \"Mutual Fund\", assetClass2Name: \"Growth\", assetClass3Name: \"Technology\", investorName: \"Sample Investor\", acctNum: \"03004721 000\", acctName: \"The Oliver Wendell\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Giftc Custodial IRA\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123456\", assetId: \"CUSIPv 12347\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 1\", assetClass3Id: \"ACL3 ID 1\" },\n          {quantity: 500, price: 29.36, value:  14680, ror: 12.5345365, yield: 2.04, percentageOfAccount: 0.62, estimatedAnnualIncome: 300.00, unrealizedGainLoss:  1096.30, cost: 13583.70, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Allison Transmission HLDGS Inc.\", ticker:\"alsn\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"Mutual Fund\", assetClass1Name: \"Mutual Fund\", assetClass2Name: \"Growth\", assetClass3Name: \"Technology\", investorName: \"Sample Investor\", acctNum: \"03004721 000\", acctName: \"The Oliver Wendell\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Giftc Custodial IRA\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123456\", assetId: \"CUSIPv 12348\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 1\", assetClass3Id: \"ACL3 ID 1\" },\n          {quantity:1000, price:  8.54, value:  8540 , ror: 12.5345365, yield: 2.43, percentageOfAccount: 0.36, estimatedAnnualIncome: 125.43, unrealizedGainLoss: -2182.30, cost: 10722.30, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Apigee Corp\", ticker:\"apic\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"Mutual Fund\", assetClass1Name: \"Mutual Fund\", assetClass2Name: \"Balanced\", assetClass3Name: \"Industry\", investorName: \"Sample Investor\", acctNum: \"03004721 000\", acctName: \"The Oliver Wendell\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Giftc Custodial IRA\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123456\", assetId: \"CUSIPv 12349\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 2\", assetClass3Id: \"ACL3 ID 3\" },\n          {quantity: 280, price:123.38, value:34546.4, ror: 12.5345365, yield: 1.69, percentageOfAccount: 1.46, estimatedAnnualIncome: 582.40, unrealizedGainLoss: 13549.60, cost: 20996.80, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"apple inc\", ticker:\"aapl\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"Mutual Fund\", assetClass1Name: \"Mutual Fund\", assetClass2Name: \"Balanced\", assetClass3Name: \"Industry\", investorName: \"Sample Investor\", acctNum: \"03004721 000\", acctName: \"The Oliver Wendell\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Giftc Custodial IRA\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123456\", assetId: \"CUSIPv 12340\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 2\", assetClass3Id: \"ACL3 ID 3\" },\n          {quantity: 400, price: 54.76, value:  21904, ror: 12.5345365, yield: 2.44, percentageOfAccount: 0.92, estimatedAnnualIncome: 306.00, unrealizedGainLoss:   297.08, cost: 21606.92, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Armstrong World Industries Inc New\", ticker:\"awi\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"Mutual Fund\", assetClass1Name: \"Mutual Fund\", assetClass2Name: \"Balanced\", assetClass3Name: \"Industry\", investorName: \"Sample Investor\", acctNum: \"03004721 000\", acctName: \"The Oliver Wendell\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Giftc Custodial IRA\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123456\", assetId: \"CUSIPv 12341\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 2\", assetClass3Id: \"ACL3 ID 3\" },\n          {quantity: 200, price: 80.58, value:  16116, ror: 12.5345365, yield: 2.43, percentageOfAccount: 0.68, estimatedAnnualIncome: 392.00, unrealizedGainLoss:  9829.22, cost: 16116.00, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Automatic Data Processing Inc\", ticker:\"adp\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"Mutual Fund\", assetClass1Name: \"Mutual Fund\", assetClass2Name: \"Balanced\", assetClass3Name: \"Industry\", investorName: \"Sample Investor\", acctNum: \"03004721 000\", acctName: \"The Oliver Wendell\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Giftc Custodial IRA\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123456\", assetId: \"CUSIPv 12342\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 2\", assetClass3Id: \"ACL3 ID 3\" },\n        ];\n        this.dataSet2 = [\n          {quantity: 1200000, price: 25.56, value: 5112, ror: 12.5345365, yield: 2.56, percentageOfAccount: 25.45655, estimatedAnnualIncome: 400.00, unrealizedGainLoss: 3000.00, cost: 3000.00, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Apple Inc.\", ticker:\"appl\", mgmtCompany: null, morningstarRating: \"5 star\", assetType: \"Stock\", assetClass1Name: \"Large Cap\", assetClass2Name: \"Growth\", assetClass3Name: \"Technology\", investorName: \"Investor Name 1\", acctNum: \"127635417236\", acctName: \"Short Account Name 1\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Retail\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123456\", assetId: \"CUSIPv 12345\", assetClass1Id: \"ACL1 ID 1\", assetClass2Id: \"ACL2 ID 1\", assetClass3Id: \"ACL3 ID 1\" },\n          {quantity: 200, price: 25.56, value: 5112, ror: 12.5345365, yield: 2.56, percentageOfAccount: 25.45655, estimatedAnnualIncome: 400.00, unrealizedGainLoss: 3000.00, cost: 3000.00, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Apple Inc.\", ticker:\"appl\", mgmtCompany: null, morningstarRating: \"5 star\", assetType: \"Stock\", assetClass1Name: \"Large Cap\", assetClass2Name: \"Growth\", assetClass3Name: \"Technology\", investorName: \"Investor Name 1\", acctNum: \"127635417237\", acctName: \"Short Account Name 2\", combinedAccountName: \"Lion Account\", mgrName: \"Blackrock\", productName: \"Lion Account\", style: \"Growth\", accountType: \"Retail\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123457\", assetId: \"CUSIPv 12345\", assetClass1Id: \"ACL1 ID 1\", assetClass2Id: \"ACL2 ID 1\", assetClass3Id: \"ACL3 ID 1\" },\n          {quantity: 200, price: 25.56, value: 5112, ror: 12.5345365, yield: 2.56, percentageOfAccount: 25.45655, estimatedAnnualIncome: 400.00, unrealizedGainLoss: 3000.00, cost: 3000.00, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Apple Inc.\", ticker:\"appl\", mgmtCompany: null, morningstarRating: \"5 star\", assetType: \"Stock\", assetClass1Name: \"Large Cap\", assetClass2Name: \"Growth\", assetClass3Name: \"Technology\", investorName: \"Investor Name 2\", acctNum: \"127635417236\", acctName: \"Short Account Name 1\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Retail\", taxStatus: \"Post Tax\", investorId: \"123457\", acctId: \"123456\", assetId: \"CUSIPv 12345\", assetClass1Id: \"ACL1 ID 1\", assetClass2Id: \"ACL2 ID 1\", assetClass3Id: \"ACL3 ID 1\" },\n          {quantity: 200, price: 25.56, value: 5112, ror: 12.5345365, yield: 2.56, percentageOfAccount: 25.45655, estimatedAnnualIncome: 400.00, unrealizedGainLoss: 3000.00, cost: 3000.00, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"Apple Inc.\", ticker:\"appl\", mgmtCompany: null, morningstarRating: \"5 star\", assetType: \"Stock\", assetClass1Name: \"Large Cap\", assetClass2Name: \"Growth\", assetClass3Name: \"Technology\", investorName: \"Investor Name 2\", acctNum: \"127635417237\", acctName: \"Short Account Name 2\", combinedAccountName: \"Lion Account\", mgrName: \"Blackrock\", productName: \"Lion Account\", style: \"Growth\", accountType: \"Retail\", taxStatus: \"Post Tax\", investorId: \"123457\", acctId: \"123457\", assetId: \"CUSIPv 12345\", assetClass1Id: \"ACL1 ID 1\", assetClass2Id: \"ACL2 ID 1\", assetClass3Id: \"ACL3 ID 1\" },\n          {quantity: 200, price: 25.56, value: 5112, ror: 12.5345365, yield: 2.56, percentageOfAccount: 25.45655, estimatedAnnualIncome: 400.00, unrealizedGainLoss: 3000.00, cost: 3000.00, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"QQQ ETF\", ticker:\"QQQ\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"ETF\", assetClass1Name: \"Index Fund\", assetClass2Name: \"Balanced\", assetClass3Name: \"Industry\", investorName: \"Investor Name 1\", acctNum: \"127635417236\", acctName: \"Short Account Name 1\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Retail\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123456\", assetId: \"CUSIPv 12346\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 2\", assetClass3Id: \"ACL3 ID 3\" },\n          {quantity: 200, price: 25.56, value: 5112, ror: 12.5345365, yield: 2.56, percentageOfAccount: 25.45655, estimatedAnnualIncome: 400.00, unrealizedGainLoss: 3000.00, cost: 3000.00, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"QQQ ETF\", ticker:\"QQQ\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"ETF\", assetClass1Name: \"Index Fund\", assetClass2Name: \"Balanced\", assetClass3Name: \"Industry\", investorName: \"Investor Name 1\", acctNum: \"127635417237\", acctName: \"Short Account Name 2\", combinedAccountName: \"Lion Account\", mgrName: \"Blackrock\", productName: \"Lion Account\", style: \"Growth\", accountType: \"Retail\", taxStatus: \"Post Tax\", investorId: \"123456\", acctId: \"123457\", assetId: \"CUSIPv 12346\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 2\", assetClass3Id: \"ACL3 ID 3\" },\n          {quantity: 200, price: 25.56, value: 5112, ror: 12.5345365, yield: 2.56, percentageOfAccount: 25.45655, estimatedAnnualIncome: 400.00, unrealizedGainLoss: 3000.00, cost: 3000.00, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"QQQ ETF\", ticker:\"QQQ\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"ETF\", assetClass1Name: \"Index Fund\", assetClass2Name: \"Balanced\", assetClass3Name: \"Industry\", investorName: \"Investor Name 2\", acctNum: \"127635417236\", acctName: \"Short Account Name 1\", combinedAccountName: \"Eagle Account\", mgrName: \"Blackrock\", productName: \"Eagle Account\", style: \"Growth\", accountType: \"Retail\", taxStatus: \"Post Tax\", investorId: \"123457\", acctId: \"123456\", assetId: \"CUSIPv 12346\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 2\", assetClass3Id: \"ACL3 ID 3\" },\n          {quantity: 200, price: 25.56, value: 5112, ror: 12.5345365, yield: 2.56, percentageOfAccount: 25.45655, estimatedAnnualIncome: 400.00, unrealizedGainLoss: 3000.00, cost: 3000.00, beginningValue: 4000.00, netContribution: 0, changeInValue: 1112.00, assetName: \"QQQ ETF\", ticker:\"QQQ\", mgmtCompany: null, morningstarRating: \"4 star\", assetType: \"ETF\", assetClass1Name: \"Index Fund\", assetClass2Name: \"Balanced\", assetClass3Name: \"Industry\", investorName: \"Investor Name 2\", acctNum: \"127635417237\", acctName: \"Short Account Name 2\", combinedAccountName: \"Lion Account\", mgrName: \"Blackrock\", productName: \"Lion Account\", style: \"Growth\", accountType: \"Retail\", taxStatus: \"Post Tax\", investorId: \"123457\", acctId: \"123457\", assetId: \"CUSIPv 12346\", assetClass1Id: \"ACL1 ID 2\", assetClass2Id: \"ACL2 ID 2\", assetClass3Id: \"ACL3 ID 3\" },\n        ];\n        return this.separateDataIntoCategories(this.dataSet2, options);\n        // Dummy data setup complete.    \n    \n  }\n\n  separateDataIntoCategories(dataTable: Array<any>, options: HoldingsCustomizationOptions){\n    const categories: Category[] = [];\n    let returnValue = new CategorizedData();\n    returnValue.categorizedData = categories;\n    if (options.category1 === null) {\n      //Nocategories defined. So use full Data Table.\n      let uncategorized: Category = {\n        categoryId: \"\",\n        categoryPrimaryKey: \"\",\n        categoryData: [],\n        subCategories: [],\n        summaryData: {}\n      };\n      uncategorized.categoryData = dataTable;\n      this.calculateSummaryData(uncategorized, options);\n      returnValue.isCategorized = false;\n      returnValue.uncategorizedData = uncategorized;\n      return returnValue;\n    }\n    // Need to separate rows into categories\n    // identify Primary column in data.\n    let primaryColumn = this.identifyPrimaryColumn(options.category1);\n    this.allocateRowsToCategory(dataTable, categories, primaryColumn);\n    categories.forEach(category1 => {\n      this.calculateSummaryData(category1, options);\n      if (options.category2 !== null) {\n        //need to further categorize.\n        primaryColumn = this.identifyPrimaryColumn(options.category2);\n        category1.subCategories = [];\n        this.allocateRowsToCategory(category1.categoryData, category1.subCategories, primaryColumn);\n        category1.subCategories.forEach(category2 => {\n          this.calculateSummaryData(category2, options);\n          if (options.category3 !== null) {\n            //need to further categorize.\n            primaryColumn = this.identifyPrimaryColumn(options.category3);\n            category2.subCategories = [];\n            this.allocateRowsToCategory(category2.categoryData, category2.subCategories, primaryColumn);        \n            category2.subCategories.forEach(category3 => {\n              this.calculateSummaryData(category3, options);\n            });\n          }  \n        });\n      }  \n    });\n    returnValue.isCategorized = true;\n    returnValue.categorizedData = categories;\n    return returnValue;\n  }\n\n  calculateSummaryData(category: Category, options: HoldingsCustomizationOptions) {\n    category.summaryData = {};\n    options.dataColumns.forEach(column => {\n      if(column.isNumber && column.isAdditive) {\n        let sum = 0;\n        for (let index = 0; index < category.categoryData.length; index++) {\n          const row = category.categoryData[index];\n          sum = sum + (+row[column.value]);\n        }\n        if (isNaN(sum)) { sum=0;}\n        category.summaryData[column.value] = sum;\n      }\n    });\n  }\n\n  allocateRowsToCategory(dataSet: any[], categories: Category[], primaryColumn: string){\n    dataSet.forEach(row => {\n      const primaryKey = row[primaryColumn];\n      if(primaryKey === null) {return;} // Ignore row as it cannot be categorized.\n      let found = false;\n      for (let index = 0; index < categories.length; index++) {\n        const category = categories[index];\n        if(category.categoryPrimaryKey === primaryKey) {\n          found = true;\n          category.categoryData.push(row);\n        }\n      }\n      if (!found) {\n        let newCategory: Category = new Category();\n        newCategory.categoryId = primaryColumn;\n        newCategory.categoryPrimaryKey = primaryKey;\n        newCategory.categoryData = [row];\n        categories.push(newCategory);\n      }\n    });\n  }\n\n  identifyPrimaryColumn(category: string) {\n    let primaryColumn = null;\n    switch (category) {\n      case \"account\":\n        primaryColumn = \"acctId\";\n      break;\n      case \"investor\":\n        primaryColumn = \"investorId\";\n      break;\n      case \"asset\":\n        primaryColumn = \"assetId\";\n      break;\n      case \"assetClass1\":\n        primaryColumn = \"assetClass1Id\";\n      break;\n      case \"assetClass2\":\n        primaryColumn = \"assetClass2Id\";\n      break;\n      case \"assetClass3\":\n        primaryColumn = \"acctClass3Id\";\n      break;\n      default:\n      break;\n    }\n    return primaryColumn;\n  }\n\n}\n",
            "properties": [
                {
                    "name": "categoryData",
                    "defaultValue": "[]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "categoryId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "categoryPrimaryKey",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "subCategories",
                    "defaultValue": "[]",
                    "type": "Category[]",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "summaryData",
                    "defaultValue": "{}",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 57
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "element",
            "id": "class-element-9a2da4fa87df7ffbf7590cc74651754d",
            "file": "projects/wri-common/src/lib/elements.ts",
            "type": "class",
            "sourceCode": "export class element {\r\n  elementId: number;\r\n}",
            "properties": [
                {
                    "name": "elementId",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "HttpErrorInterceptor",
            "id": "class-HttpErrorInterceptor-3ecce59fe5ad3133bdb39e732d7fc459",
            "file": "projects/report-builder/src/app/core/http-error.interceptor.ts",
            "type": "class",
            "sourceCode": "import { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs'; \nimport { retry, catchError } from 'rxjs/operators';\n\nexport class HttpErrorInterceptor implements HttpInterceptor { \n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return next.handle(request)\n      .pipe(\n        retry(1),\n        catchError((error: HttpErrorResponse) => {\n          let errorMessage = '';\n          if (error.error instanceof ErrorEvent) {\n            // client-side error\n            errorMessage = `Error: ${error.error.message}`;\n          } else {\n            // server-side error\n            errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n          }\n          // window.alert(errorMessage); // Best practice is to use a more graceful display of the error message rather than window alert.\n          // Also consider this area for logging of errors with a server based logger so as to enable better error tracking of front end.\n          return throwError(errorMessage);\n        })\n      )\n  };\n \n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>"
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<any>>",
                    "typeParameters": [],
                    "line": 6,
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "HttpRequest<any>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "HttpInterceptor"
            ]
        },
        {
            "name": "MultiSelectSet",
            "id": "class-MultiSelectSet-d1c5f882d91d0ed89488c1e81824b2e1",
            "file": "projects/report-builder/src/app/common/multi-selection/multi-selection.component.ts",
            "type": "class",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter, TemplateRef, OnChanges, SimpleChanges, ElementRef, ViewChild } from '@angular/core';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport {CdkDragDrop, moveItemInArray} from '@angular/cdk/drag-drop';\n\nexport interface SingleSelection{\n  name: String;\n  element: any;\n}\nexport interface SingleOptionSet {\n  options: SingleSelection[];\n  selectedOption: SingleSelection;\n}\nexport interface MultiSelectSelection extends SingleSelection{\n  selected:  boolean;\n  draggable: boolean;\n  disabled:  boolean;\n  subSelections?: MultiSelectSelection[];\n  subOptions?: SingleOptionSet;\n  selectionDetails?: string[];\n  showDetails?: boolean;\n}\n\nexport class MultiSelectSet {\n  selectionSet: MultiSelectSelection[] = [];\n  sortable: boolean = true;\n  name: string;\n  maxSelections: number;\n  minSelections: number = 0;\n  currentSelectedCount: number = 0;\n  sortableEndCount: number = 0; // Using end count because we are sorting the disabled items to the last of the sort list.\n  selectedAndNotDraggabledCount: number = 0; // This field is necessary to allow a set to have single selection set to have items that are diabled.\n}\n\n@Component({\n  selector: 'app-multi-selection',\n  templateUrl: './multi-selection.component.html',\n  styleUrls: ['./multi-selection.component.css']\n})\nexport class MultiSelectionComponent implements OnInit, OnChanges {\n  moveItemInArray = moveItemInArray;\n  @Input()\n  name: string;\n\n  @Input()\n  minimumSelections: number = 0;\n  disableSave: boolean = false;\n\n  @Input()\n  selectionSets: MultiSelectSet[];\n  internalSelectionSets: MultiSelectSet[] = [];\n\n  @Output()\n  newOptions = new EventEmitter<MultiSelectSet[]>();\n\n  dialogRef: MatDialogRef<any>;\n  \n  @ViewChild(\"myButton\", { read: ElementRef }) buttonRef: ElementRef;\n\n  constructor(public dialog: MatDialog) {\n  }\n\n  ngOnInit(): void {\n    this.setCurrentSelections(this.selectionSets);\n  }\n  ngOnChanges(changes: SimpleChanges) {\n    this.setCurrentSelections(changes.selectionSets.currentValue);\n  }\n\n  // This is the core of the logic to make the component work.\n  setCurrentSelections(selectionSets: MultiSelectSet[]){\n    this.internalSelectionSets = [];\n    for (const selectionSet of selectionSets) {\n      // Doing a deep copy manually here but with some logic to help do the counts necessary.\n      let newSelectionSet = new MultiSelectSet();\n      newSelectionSet.currentSelectedCount = 0;\n      newSelectionSet.maxSelections = +selectionSet.maxSelections;\n      newSelectionSet.minSelections = +selectionSet.minSelections;\n      newSelectionSet.sortable = selectionSet.sortable;\n      newSelectionSet.name = selectionSet.name;\n      for (const selection of selectionSet.selectionSet)\n      {\n        if(selection.selected) newSelectionSet.currentSelectedCount++;\n        if(selection.selected && !selection.draggable) newSelectionSet.selectedAndNotDraggabledCount++;\n        if(newSelectionSet.currentSelectedCount > selectionSet.maxSelections) {\n          selection.selected = false;\n          newSelectionSet.currentSelectedCount = selectionSet.maxSelections;\n        }\n        newSelectionSet.selectionSet.push({...selection});\n      }\n      if(selectionSet.sortable){\n        // The sort algorithm here is being done to ensure the sortable items (not disabled) are first in the list. In the sortable items, the selectable items are ahead again.\n        // The sequencing of the sort returns is critical to the algorithm.\n        newSelectionSet.selectionSet.sort((a,b) => {\n          if(a.selected && !b.selected) return -1;\n          if(a.draggable && !b.draggable) return -1;\n          if(!a.draggable && b.draggable) return 1;\n          if(!a.selected && b.selected) return 1;\n          return 0;\n        });\n        newSelectionSet.sortableEndCount = newSelectionSet.selectionSet.length;\n        for (const selection of newSelectionSet.selectionSet) {\n          if(!selection.draggable) newSelectionSet.sortableEndCount--;\n        }\n      }\n      this.internalSelectionSets.push(newSelectionSet);\n    }\n    this.checkMinimumSelections()\n  }\n\n  // The logic around initial max height is necessary because we are allowing the content to drive the height.\n  // Without this we have to set the height property to work and that makes it too long a dialog when the content is small.\n  // There is a side effect that the size of the open dialog box cannot be longer than the initially opened size.\n  initialMaxheight = 0;\n  innerContentDivHeight = 0;\n\n  show(dialogTemplate: TemplateRef<any>) {\n    const rect = this.buttonRef.nativeElement.getBoundingClientRect();\n    const h = window.innerHeight;\n    // Position logic uses a constant width box of 400px. Since the box is being right aligned, we actually right align unless the box is too close to the left side of the screen. \n    let position = {\n      left: '0px',\n      top: rect.bottom + 'px'\n    };\n    if(rect.right>300){\n      position = {\n        left: (rect.right - 300) + 'px',\n        top: rect.bottom + 'px'\n      };\n    }\n    let maxHeight = h - rect.bottom - 10;\n    this.initialMaxheight = maxHeight;\n    this.innerContentDivHeight = maxHeight - 90;\n    this.dialogRef = this.dialog.open(dialogTemplate, {\n      disableClose: false, //This allows closing the dialog box by clicking anywhere else. This allows the behaviour to mimick a true dropdown.\n      width: '300px',\n      maxHeight: maxHeight + 'px',\n      // height: maxHeight + 'px',\n      hasBackdrop: true, //This is necessary for the drag drop to work in a dialog box.\n      position: position,\n      backdropClass: 'dialog-overlay',\n      panelClass: 'multi-select-dialog-panel'\n    });\n    console.log('Initial window height: '+ h, rect, this.initialMaxheight, this.innerContentDivHeight);\n    // This code is necessary so that when a user clicks the backdrop, we can close the backdrop and reset the entries.\n    this.dialogRef.backdropClick().subscribe(() => {\n      this.setCurrentSelections(this.selectionSets); //Reset selections.\n    })\n  }\n\n  // The on resize event needs to be handled only for the case where the user changes the window size after inital open of the dialog.\n  // This makes the popup box behave like a true dropdown box.\n  onResize(event) {\n    const rect = this.buttonRef.nativeElement.getBoundingClientRect();\n    const h = window.innerHeight;\n    console.log('Resized window height: '+ h, rect, this.initialMaxheight, this.innerContentDivHeight);\n    //console.log(rect);\n    let position = {\n      left: '0px',\n      top: rect.bottom + 'px'\n    };\n    if(rect.right>300){\n      position = {\n        left: (rect.right - 300) + 'px',\n        top: rect.bottom + 'px'\n      };\n    }\n    let height = h - rect.bottom - 10;\n    // Because we are setting the maxHeight property when opening the dialog the height property cannot be longer than the maxHeight\n    if(height > this.initialMaxheight) height = this.initialMaxheight;\n    this.innerContentDivHeight = height - 90;\n    // console.log(maxHeight);\n    this.dialogRef.updatePosition(position);\n    this.dialogRef.updateSize('300px', height + 'px');\n  }\n\n  // Save emits the changes sets to the calling component.\n  save(){\n    this.newOptions.emit(this.internalSelectionSets);\n    this.dialogRef.close();\n  }\n\n  cancel() {\n    this.dialogRef.close();\n    this.setCurrentSelections(this.selectionSets); //Reset the selections.\n  }\n\n  drop(event: CdkDragDrop<string[]>, setIndex: number) {\n    const set = this.internalSelectionSets[setIndex];\n    const element = set.selectionSet[event.previousIndex];\n    if (element.selected && event.currentIndex < set.currentSelectedCount)  {\n      moveItemInArray(set.selectionSet, event.previousIndex, event.currentIndex);\n    }\n    if (!element.selected  && event.currentIndex < set.currentSelectedCount && set.currentSelectedCount < set.maxSelections) {\n      moveItemInArray(set.selectionSet, event.previousIndex, event.currentIndex);\n      element.selected = true;\n      set.currentSelectedCount++;\n    }\n    this.checkMinimumSelections()\n  }\n\n  validateAndMove(set:MultiSelectSet, fromIndex: number, toIndex: number) {\n    let fromItem = set.selectionSet[fromIndex];\n    let toItem = set.selectionSet[toIndex];\n    if((fromItem.selected && toItem.selected)\n    || (!fromItem.selected && !toItem.selected)) {\n      moveItemInArray(set.selectionSet, fromIndex, toIndex);\n      return;\n    }\n    if((!fromItem.selected && toItem.selected) && set.currentSelectedCount < set.maxSelections ) {\n      moveItemInArray(set.selectionSet, fromIndex, toIndex);\n      fromItem.selected = true;\n      set.currentSelectedCount++;\n      this.checkMinimumSelections()\n      return;\n    }\n  }\n\n  // Simple logic to handle checking and un checking for non sortable sets.\n  onCheckedNonSortable(i: number, isChecked: boolean, setIndex: number){\n    const set = this.internalSelectionSets[setIndex];\n    set.selectionSet[i].selected = isChecked;\n    if(isChecked) {\n      if (set.currentSelectedCount < set.maxSelections){\n        set.currentSelectedCount++;\n      } // else  condition is not necessary as this code is never triggered due to disabling selections.\n      else {\n        set.selectionSet[i].selected = false;\n      }\n    }\n    else {\n      set.currentSelectedCount--;\n    }\n    this.checkMinimumSelections()\n  }\n\n  // More complicated logic for sortable sets to move the selected item to the bottom of the selected area.\n  onChecked(i: number, isChecked: boolean, setIndex: number){\n    const set = this.internalSelectionSets[setIndex];\n    set.selectionSet[i].selected = isChecked;\n    console.log(i, isChecked,set.selectionSet[i].selected); // {}, true || false\n    if(isChecked) {\n      if (set.currentSelectedCount < set.maxSelections){\n        moveItemInArray(set.selectionSet, i, set.currentSelectedCount - set.selectedAndNotDraggabledCount);\n        set.currentSelectedCount++;\n      } // else  condition is not necessary as this code is never triggered due to disabling selections.\n      else {\n        set.selectionSet[i].selected = false;\n      }\n    }\n    else {\n      set.currentSelectedCount--;\n      //console.log(set);\n      moveItemInArray(set.selectionSet, i, set.currentSelectedCount - set.selectedAndNotDraggabledCount);\n    }\n    this.checkMinimumSelections()\n  }\n\n  // This function is to diable save if minimum selections are not done for the multiset.\n  checkMinimumSelections(){\n    if(this.minimumSelections <= 0) {\n      this.disableSave = false;\n      return;\n    }\n    let totalCount = 0;\n    this.internalSelectionSets.forEach(set => {\n      totalCount = totalCount + set.currentSelectedCount;\n    });\n    if(totalCount < this.minimumSelections) this.disableSave = true;\n    else this.disableSave = false;\n  }\n\n  showHideSelectionDetails(selection: MultiSelectSelection){\n    if(selection.showDetails) selection.showDetails = false;\n    else selection.showDetails = true; \n  }\n\n}\n",
            "properties": [
                {
                    "name": "currentSelectedCount",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "maxSelections",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "minSelections",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "selectedAndNotDraggabledCount",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "selectionSet",
                    "defaultValue": "[]",
                    "type": "MultiSelectSelection[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "sortable",
                    "defaultValue": "true",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "sortableEndCount",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Section",
            "id": "class-Section-8ba882b7e436b9570ff1dfa03309b89d",
            "file": "projects/report-builder/src/app/page/report-builder/section.ts",
            "type": "class",
            "sourceCode": "import { isArray, isUndefined } from 'util';\r\nimport {\r\n  DisplayGrid,\r\n  Draggable,\r\n  GridsterComponentInterface,\r\n  GridsterConfig,\r\n  GridsterItem,\r\n  GridType,\r\n  CompactType\r\n} from 'angular-gridster2';\r\n\r\nexport interface Safe extends GridsterConfig {\r\n  draggable: Draggable;\r\n}\r\n\r\nexport enum PageType {\r\n  SinglePage,\r\n  MultiPage\r\n}\r\n\r\nexport enum SectionType {\r\n  Header,\r\n  Footer,\r\n  Fixed,\r\n  Dynamic\r\n}\r\n\r\nexport class Section {\r\n  portraitOrientation: boolean = false;\r\n  type: SectionType;\r\n  dashboard: Array<GridsterItem> = [];\r\n  sectionOptions: Safe;\r\n  components: Array<GridsterItem>;\r\n  hasLayoutError: boolean = false;\r\n  height: number = 2;\r\n  constructor (type: SectionType){\r\n    this.type = type;\r\n\r\n    const baseoptions = {\r\n      displayGrid: DisplayGrid.Always,\r\n      pushItems: false,\r\n      disableWarnings: true,\r\n      swap: true,\r\n      margin: 5,\r\n      outerMargin: true,\r\n      minCols: 20,\r\n      maxCols: 20,\r\n      minRows: 1,\r\n      minItemCols: 1,\r\n      maxItemCols: 20,\r\n      minItemRows: 1,\r\n      minItemArea: 1,\r\n      defaultItemCols: 1,\r\n      defaultItemRows: 1\r\n    }\r\n    const headerOptions = {\r\n      ...baseoptions,\r\n      gridType: GridType.VerticalFixed,\r\n      fixedRowHeight: 135,\r\n      compactType: CompactType.None,\r\n      maxRows: 1,\r\n      maxItemRows: 1,\r\n      draggable: {\r\n        enabled: false\r\n      },\r\n      resizable: {\r\n        enabled: false\r\n      },\r\n    }\r\n    const footerOptions = {\r\n      ...baseoptions,\r\n      gridType: GridType.VerticalFixed,\r\n      fixedRowHeight: 83,\r\n      compactType: CompactType.None,\r\n      maxRows: 1,\r\n      maxItemRows: 1,\r\n      draggable: {\r\n        enabled: false\r\n      },\r\n      resizable: {\r\n        enabled: false\r\n      },\r\n    }\r\n    const dynamicOptions = {\r\n      ...baseoptions,\r\n      gridType: GridType.VerticalFixed,\r\n      fixedRowHeight: 80,\r\n      compactType: CompactType.CompactUp,\r\n      minRows: 5,\r\n      maxRows: 30,\r\n      maxItemRows: 10,\r\n      enableEmptyCellDrop: true,\r\n      enableOccupiedCellDrop: true,\r\n      pushItems: true,\r\n      pushResizeItems: true,\r\n      scrolltoNewItems: true,\r\n      draggable: {\r\n        delayStart: 0,\r\n        enabled: true,\r\n        ignoreContentClass: 'gridster-item-content',\r\n        ignoreContent: false,\r\n        dragHandleClass: 'drag-handler',\r\n        dropOverItems: true,\r\n      },\r\n      resizable: {\r\n        enabled: true\r\n      },\r\n    }\r\n    const fixedOptions = {\r\n      ...baseoptions,\r\n      gridType: GridType.Fit,\r\n      compactType: CompactType.None,\r\n      minRows: 24,\r\n      maxRows: 24,\r\n      maxItemRows: 24,\r\n      enableEmptyCellDrop: true,\r\n      enableOccupiedCellDrop: true,\r\n      pushItems: true,\r\n      pushResizeItems: true,\r\n      draggable: {\r\n        delayStart: 0,\r\n        enabled: true,\r\n        ignoreContentClass: 'gridster-item-content',\r\n        ignoreContent: false,\r\n        dragHandleClass: 'drag-handler',\r\n        dropOverItems: true,\r\n      },\r\n      resizable: {\r\n        enabled: true\r\n      },\r\n    }\r\n    \r\n    switch (type) {\r\n      case SectionType.Header:\r\n        this.sectionOptions = headerOptions;\r\n        this.height = 152;\r\n      break;\r\n      case SectionType.Footer:\r\n        this.sectionOptions = footerOptions;\r\n        this.height = 100;\r\n      break;\r\n      case SectionType.Dynamic:\r\n        this.sectionOptions = dynamicOptions;\r\n        this.height = 437;\r\n      break;\r\n      case SectionType.Fixed:\r\n        this.sectionOptions = fixedOptions;\r\n        this.gridLayoutChanged();\r\n      break;\r\n      default:\r\n      break;\r\n    }\r\n  }\r\n\r\n  gridLayoutChanged() {\r\n    if(this.type === SectionType.Fixed) {\r\n      if( this.portraitOrientation) this.height = 900;\r\n      else this.height = 650;\r\n    }\r\n  }\r\n  gridSizeChanged(grid: GridsterComponentInterface) {\r\n    // console.info('gridSizeChanged', grid);\r\n    if (this.type === SectionType.Dynamic) {this.height = grid.rows * 86 + 4; }\r\n  };\r\n  emptyCellDrop(event: DragEvent, item: GridsterItem) {\r\n    let index = +event.dataTransfer.getData('Text');\r\n    const component = this.components[index];\r\n    let newItem = {...component};\r\n    newItem.x = item.x;\r\n    newItem.y = item.y;\r\n    newItem.outputs = {optionsOuput: newOptions => this.handleOptionReturn.bind(newItem)(newOptions)};\r\n    this.dashboard.push(newItem);\r\n  }\r\n  // This function binding allows any options being returned to be saved to the right component so that save is trivial save of the dashboard list of items.\r\n  handleOptionReturn(this: any, newOptions: any) {\r\n    this.options = newOptions;\r\n  }\r\n  removeItem($event, item) {\r\n    $event.preventDefault();\r\n    $event.stopPropagation();\r\n    this.dashboard.splice(this.dashboard.indexOf(item), 1);\r\n  }\r\n  checkLayoutForSection(this: Section){\r\n    // Now check for layout errors\r\n    this.hasLayoutError = false;\r\n    let columns = {};\r\n    //organize widgets into columns based on starting x positions.\r\n    if (this.dashboard.length < 2) {return; }\r\n    for (let index = 0; index < this.dashboard.length; index++) {\r\n      const item = this.dashboard[index];\r\n      for (let index2 = 0; index2 < this.dashboard.length; index2++) {\r\n        const item2 = this.dashboard[index2];\r\n        if (item.x !== item2.x && item.x < item2.x && ((item.x + item.cols) > item2.x)) {\r\n          this.hasLayoutError = true;\r\n          return;\r\n        }\r\n      }\r\n      if (columns.hasOwnProperty(item.x) && isArray(columns[item.x])) {columns[item.x].push(item); }\r\n      else {columns[item.x] = [item]; }\r\n    }\r\n    for (const key in columns) {\r\n      if (columns.hasOwnProperty(key)) {\r\n        const column = columns[key];\r\n        if (isArray(column) && column.length > 1 ) {\r\n          const width = column[0].cols;\r\n          for (let index = 0; index < column.length; index++) {\r\n            const item = column[index];\r\n            if (item.cols !== width) {\r\n              this.hasLayoutError = true;\r\n              return;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "type",
                        "type": "SectionType"
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "type",
                        "type": "SectionType",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "components",
                    "type": "Array<GridsterItem>",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "dashboard",
                    "defaultValue": "[]",
                    "type": "Array<GridsterItem>",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "hasLayoutError",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "height",
                    "defaultValue": "2",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "portraitOrientation",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "sectionOptions",
                    "type": "Safe",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "type",
                    "type": "SectionType",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methods": [
                {
                    "name": "checkLayoutForSection",
                    "args": [
                        {
                            "name": "this",
                            "type": "Section"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 183,
                    "jsdoctags": [
                        {
                            "name": "this",
                            "type": "Section",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "emptyCellDrop",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent"
                        },
                        {
                            "name": "item",
                            "type": "GridsterItem"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 165,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "GridsterItem",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "gridLayoutChanged",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 155
                },
                {
                    "name": "gridSizeChanged",
                    "args": [
                        {
                            "name": "grid",
                            "type": "GridsterComponentInterface"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 161,
                    "jsdoctags": [
                        {
                            "name": "grid",
                            "type": "GridsterComponentInterface",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleOptionReturn",
                    "args": [
                        {
                            "name": "this",
                            "type": "any"
                        },
                        {
                            "name": "newOptions",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 175,
                    "jsdoctags": [
                        {
                            "name": "this",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "newOptions",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeItem",
                    "args": [
                        {
                            "name": "$event",
                            "type": ""
                        },
                        {
                            "name": "item",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 178,
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SimpleMessage",
            "id": "class-SimpleMessage-a4d495aeb2b26a566ad7f214af00a76e",
            "file": "projects/report-builder/src/app/common/messaging/messaging.component.ts",
            "type": "class",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter, OnChanges, SimpleChanges, TemplateRef, ViewChild } from '@angular/core';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\n\nexport enum MessageType {\n  CONFIRM = 'confirm',\n  INFORM = 'inform',\n  ERROR = 'error',\n  WARN = 'warn'\n}\n\nexport enum MessageDisplayType {\n  INPAGE = 'inpage',\n  MODAL = 'modal'\n}\n\nexport class SimpleMessage {\n  messageType: MessageType;\n  messageDesc: string;\n}\n\n@Component({\n  selector: 'common-messaging',\n  templateUrl: './messaging.component.html',\n  styleUrls: ['./messaging.component.scss']\n})\nexport class MessagingComponent implements OnInit, OnChanges {\n  // These Inputs provide different ways to wire the messaging component.\n  @Input() displayType: MessageDisplayType = MessageDisplayType.INPAGE; // Defaulted to inpage unless specified when using the component.\n  @Input() hideAfterInterval: number; // This input us only used for inline messaging. It can be any positive number between 0 and 5000 and represents the number of milliseconds.\n\n  @Input() buttonLabel: string = 'OK'; // This input is only used for modal windows style messaging.\n  @Input() width: string = \"350px\"; // This input is only used for modal windows style messaging.\n  @Output() notifyActionClicked: EventEmitter<string> = new EventEmitter(); // The output is provided as a service and is only used for modal windows style messaging.\n  @ViewChild('dialog') public dialogTemplateRef: TemplateRef<any>;\n\n  @Input() message: SimpleMessage; // This is the actual message. Changing this Input will trigger a message.\n\n  enableInpageMessage: boolean = false;\n  modaelDialogRef: MatDialogRef<TemplateRef<any>>;\n  MessageType = MessageType;\n\n  constructor(private matDialog: MatDialog) { }\n\n  ngOnInit(): void {\n  }\n\n  ngOnChanges(simpleChange: SimpleChanges) {\n    this.initMessage();\n  }\n\n  initMessage() {\n    if (this.message.messageDesc == null || this.message.messageDesc == '') return;\n    if (this.message.messageType != MessageType.CONFIRM && this.message.messageType != MessageType.INFORM && this.message.messageType != MessageType.ERROR && this.message.messageType != MessageType.WARN) return;\n    if (this.displayType == MessageDisplayType.INPAGE) this.showInpageMessage();\n    else if (this.displayType == MessageDisplayType.MODAL) this.showModalMessage();\n  }\n\n  showInpageMessage() {\n    this.enableInpageMessage = true;\n    let interval = Number(this.hideAfterInterval);\n    if (interval && interval !== null &&interval > 0 && interval <= 5000) {\n      setTimeout( () => {\n        this.enableInpageMessage = false;;\n      }, interval);\n    }\n  }\n\n  showModalMessage() {\n    this.enableInpageMessage = false;\n    this.modaelDialogRef = this.matDialog.open(this.dialogTemplateRef, {\n      disableClose: true,\n      autoFocus: false,\n      width: this.width\n    });\n    this.modaelDialogRef.afterClosed().subscribe( result => {\n      this.notifyActionClicked.emit(result);\n    });\n  }\n\n  hideMessage() {\n    this.enableInpageMessage = false;\n  }\n\n}\n",
            "properties": [
                {
                    "name": "messageDesc",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "messageType",
                    "type": "MessageType",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-6ff364c1046fb38ba0163beb93d3cf7b",
            "file": "projects/report-builder/src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'report-builder'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'report-builder';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "  <div>&nbsp;</div>\n  <router-outlet></router-outlet>"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-642c6c4e474cd5a0ac760dfda26b2fc9",
            "file": "stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "description": "<p>Button contents</p>\n",
                    "line": 40
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "FooterReportBuilderComponent",
            "id": "component-FooterReportBuilderComponent-222b8d486b69d653ecabeb1008970b07",
            "file": "projects/report-builder/src/app/component/footer-report-builder/footer-report-builder.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-footer-report-builder",
            "styleUrls": [
                "./footer-report-builder.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./footer-report-builder.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-footer-report-builder',\n  templateUrl: './footer-report-builder.component.html',\n  styleUrls: ['./footer-report-builder.component.scss']\n})\nexport class FooterReportBuilderComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./footer-report-builder.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<wri-footer></wri-footer>\n"
        },
        {
            "name": "GraphReportBuilderComponent",
            "id": "component-GraphReportBuilderComponent-116bba6b661f8f04220fa36980dab153",
            "file": "projects/report-builder/src/app/component/graph-report-builder/graph-report-builder.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-graph-report-builder",
            "styleUrls": [
                "./graph-report-builder.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./graph-report-builder.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-graph-report-builder',\n  templateUrl: './graph-report-builder.component.html',\n  styleUrls: ['./graph-report-builder.component.scss']\n})\nexport class GraphReportBuilderComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./graph-report-builder.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>graph-report-builder works!</p>\n"
        },
        {
            "name": "GraphTableReportBuilderComponent",
            "id": "component-GraphTableReportBuilderComponent-84597ffd97bc875af2c38c8d8f1e7b56",
            "file": "projects/report-builder/src/app/component/graph-table-report-builder/graph-table-report-builder.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-graph-table-report-builder",
            "styleUrls": [
                "./graph-table-report-builder.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./graph-table-report-builder.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "rowMultiSelection",
                    "type": "MultiSelectSelection[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "rowMultiSelection2",
                    "type": "MultiSelectSelection[]",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "sets",
                    "defaultValue": "[]",
                    "type": "MultiSelectSet[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { MultiSelectSelection, MultiSelectSet } from '../../common/multi-selection/multi-selection.component';\n\n@Component({\n  selector: 'app-graph-table-report-builder',\n  templateUrl: './graph-table-report-builder.component.html',\n  styleUrls: ['./graph-table-report-builder.component.scss']\n})\nexport class GraphTableReportBuilderComponent implements OnInit {\n  rowMultiSelection: MultiSelectSelection[];  \n  rowMultiSelection2: MultiSelectSelection[];\n  sets: MultiSelectSet[] = [];\n  constructor() {\n  }\n\n  ngOnInit(): void {\n    let PortfolioReturnSetsR1: MultiSelectSet[] = [];\n    let netContributionSubSelections: MultiSelectSelection[] =[\n      {name: 'Show Details', selected: true, disabled: false, draggable: true, element:null},\n    ];\n    let changeInValueSubSelections: MultiSelectSelection[] =[\n      {name: 'Show Details', selected: true, disabled: false, draggable: true, element:null},\n    ];\n    let rowMultiSelection3: MultiSelectSelection[] = [\n      {name: 'Beginning Value', selected: true, disabled: false, draggable: true, element:null},\n      {name: 'Net Contribution', selected: true, disabled: false, draggable: true, element:null, subSelections:netContributionSubSelections },\n      {name: 'Change in Value', selected: true, disabled: false, draggable: true, element:null, subSelections:changeInValueSubSelections},\n      {name: 'Ending Value', selected: true, disabled: false, draggable: true, element:null},\n      {name: 'Return', selected: true, disabled: false, draggable: true, element:null},\n    ];\n      let rowMultiSelection4: MultiSelectSelection[] = [\n        {name: 'Show Portfolio level Benchmarks', selected: true, disabled: false, draggable: true, element:null},\n    //    {name: 'Show Contribution and Change Details ', selected: false, disabled: false, draggable: true, element:null},  \n    ];\n    let set3 = new MultiSelectSet();\n    set3.maxSelections  = 5;\n    set3.sortable = true;\n    set3.selectionSet = rowMultiSelection3;\n    PortfolioReturnSetsR1.push(set3);\n    let set4 = new MultiSelectSet();\n    set4.maxSelections  = 3;\n    set4.sortable = false;\n    set4.selectionSet = rowMultiSelection4;\n    PortfolioReturnSetsR1.push(set4);    \n    \n    this.sets = PortfolioReturnSetsR1\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./graph-table-report-builder.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 12
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"columnComp\">\n<app-multi-selection\n  [name]=\"'Rows'\"\n  [selectionSets]=\"sets\"\n  [minimumSelections]=1\n></app-multi-selection>\n</div>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-246e2a69dc126a3bd76c6328dd3b93e2",
            "file": "stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 53,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 62,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "HeaderReportBuilderComponent",
            "id": "component-HeaderReportBuilderComponent-0092e914d2d4947cf4c67ed6b013b429",
            "file": "projects/report-builder/src/app/component/header-report-builder/header-report-builder.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header-report-builder",
            "styleUrls": [
                "./header-report-builder.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header-report-builder.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "portraitOrientation",
                    "line": 13,
                    "type": "boolean",
                    "inheritance": {
                        "file": "BaseReportBuilderComponent"
                    }
                },
                {
                    "name": "resizeEvent",
                    "line": 11,
                    "type": "EventEmitter<any>",
                    "inheritance": {
                        "file": "BaseReportBuilderComponent"
                    }
                },
                {
                    "name": "widget",
                    "line": 9,
                    "type": "GridsterItem",
                    "inheritance": {
                        "file": "BaseReportBuilderComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "optionsOuput",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 7,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "BaseReportBuilderComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "resizeSub",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "inheritance": {
                        "file": "BaseReportBuilderComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { BaseReportBuilderComponent } from '../base-report-builder-component.class';\n\n@Component({\n  selector: 'app-header-report-builder',\n  templateUrl: './header-report-builder.component.html',\n  styleUrls: ['./header-report-builder.component.scss']\n})\nexport class HeaderReportBuilderComponent extends BaseReportBuilderComponent implements OnInit {\n\n  constructor() {\n    super();\n  }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../base-report-builder-component.scss';",
                    "styleUrl": "./header-report-builder.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "extends": "BaseReportBuilderComponent",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"widget.edit\" class=\"edit\">\n  <a class=\"drag-handler\">\n    <img class=\"icon\" src=\"assets/edit.png\"/>&nbsp;\n  </a>\n</div>\n<wri-header></wri-header>\n"
        },
        {
            "name": "HoldingsCustomizationComponent",
            "id": "component-HoldingsCustomizationComponent-36fdd66a1fcae1cebf792958bc058bf4",
            "file": "projects/report-builder/src/app/component/holdings-report-builder/holdings-customization.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-holdings-customization",
            "styleUrls": [
                "./holdings-customization.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./holdings-customization.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "accountAvailableDataColumns",
                    "defaultValue": "[]",
                    "type": "DataColumn[]",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "assetAvailableDataColumns",
                    "defaultValue": "[]",
                    "type": "DataColumn[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "assetClass1AvailableDataColumns",
                    "defaultValue": "[]",
                    "type": "DataColumn[]",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "assetClass2AvailableDataColumns",
                    "defaultValue": "[]",
                    "type": "DataColumn[]",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "assetClass3AvailableDataColumns",
                    "defaultValue": "[]",
                    "type": "DataColumn[]",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "buttonRef",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'myButton', {read: ElementRef}"
                        }
                    ]
                },
                {
                    "name": "categories",
                    "defaultValue": "[\r\n    {value: null, viewValue: 'No Category Selected'},\r\n    {value: 'investor', viewValue: 'Investor'},\r\n    {value: 'asset', viewValue: 'Asset Holdings'},\r\n    {value: 'account', viewValue: 'Account'},\r\n    {value: 'assetClass1', viewValue: 'Asset Classification 1'},\r\n    {value: 'assetClass2', viewValue: 'Asset Classification 2'},\r\n    {value: 'assetClass3', viewValue: 'Asset Classification 3'},\r\n  ]",
                    "type": "Selection[]",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "categoriesDialogRef",
                    "type": "MatDialogRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "category1MultiSelections",
                    "defaultValue": "[]",
                    "type": "MultiSelectSelection[]",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "category1PanelOpen",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "category2MultiSelections",
                    "defaultValue": "[]",
                    "type": "MultiSelectSelection[]",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "category2PanelOpen",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "category3MultiSelections",
                    "defaultValue": "[]",
                    "type": "MultiSelectSelection[]",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "category3PanelOpen",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "columnMultiSelection",
                    "defaultValue": "[]",
                    "type": "MultiSelectSelection[]",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "columnOptions",
                    "defaultValue": "[]",
                    "type": "Selection[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "columnSets",
                    "defaultValue": "[]",
                    "type": "MultiSelectSet[]",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "dialog",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "investorAvailableDataColumns",
                    "defaultValue": "[]",
                    "type": "DataColumn[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "params",
                    "type": "HoldingsCustomizationOptions",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "saveDisabled",
                    "defaultValue": "true",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "selfDialogRef",
                    "type": "MatDialogRef<HoldingsCustomizationComponent>",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99
                },
                {
                    "name": "category1ColumnsSelected",
                    "args": [
                        {
                            "name": "newSelections",
                            "type": "MultiSelectSelection[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117,
                    "jsdoctags": [
                        {
                            "name": "newSelections",
                            "type": "MultiSelectSelection[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "category2ColumnsSelected",
                    "args": [
                        {
                            "name": "newSelections",
                            "type": "MultiSelectSelection[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 127,
                    "jsdoctags": [
                        {
                            "name": "newSelections",
                            "type": "MultiSelectSelection[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "category3ColumnsSelected",
                    "args": [
                        {
                            "name": "newSelections",
                            "type": "MultiSelectSelection[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 137,
                    "jsdoctags": [
                        {
                            "name": "newSelections",
                            "type": "MultiSelectSelection[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "columnsSelected",
                    "args": [
                        {
                            "name": "newSelectionSets",
                            "type": "MultiSelectSet[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "jsdoctags": [
                        {
                            "name": "newSelectionSets",
                            "type": "MultiSelectSet[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "disableSaveIfRequiredColumnsNotSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 227
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 235
                },
                {
                    "name": "onChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 257
                },
                {
                    "name": "onChange1",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 244
                },
                {
                    "name": "onChange2",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 248
                },
                {
                    "name": "onChange3",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 252
                },
                {
                    "name": "onNoClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 239
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95
                },
                {
                    "name": "setupAndFixSelections",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 184
                },
                {
                    "name": "setupMultiSelections",
                    "args": [
                        {
                            "name": "selectedDataColumns",
                            "type": "DataColumn[]"
                        },
                        {
                            "name": "availableDataColumns",
                            "type": "DataColumn[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 148,
                    "jsdoctags": [
                        {
                            "name": "selectedDataColumns",
                            "type": "DataColumn[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "availableDataColumns",
                            "type": "DataColumn[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "show",
                    "args": [
                        {
                            "name": "dialogTemplate",
                            "type": "TemplateRef<any>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "jsdoctags": [
                        {
                            "name": "dialogTemplate",
                            "type": "TemplateRef<any>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sortSelectedColumns",
                    "args": [
                        {
                            "name": "availableColumns",
                            "type": "DataColumn[]"
                        },
                        {
                            "name": "selectedColumns",
                            "type": "DataColumn[]"
                        },
                        {
                            "name": "unSelectedColumns",
                            "type": "DataColumn[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 215,
                    "jsdoctags": [
                        {
                            "name": "availableColumns",
                            "type": "DataColumn[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "selectedColumns",
                            "type": "DataColumn[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "unSelectedColumns",
                            "type": "DataColumn[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Inject, TemplateRef, ViewChild, ElementRef } from '@angular/core';\r\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { Selection, DataColumn, HoldingsCustomizationOptions, AvailableColumnOptions } from 'wri-holdings';\r\nimport { MultiSelectSelection, MultiSelectSet } from '../../common/multi-selection/multi-selection.component';\r\n\r\n@Component({\r\n  selector: 'app-holdings-customization',\r\n  templateUrl: './holdings-customization.component.html',\r\n  styleUrls: ['./holdings-customization.component.scss']\r\n})\r\nexport class HoldingsCustomizationComponent implements OnInit {\r\n  saveDisabled: boolean = true;\r\n  categories: Selection[] = [\r\n    {value: null, viewValue: 'No Category Selected'},\r\n    {value: 'investor', viewValue: 'Investor'},\r\n    {value: 'asset', viewValue: 'Asset Holdings'},\r\n    {value: 'account', viewValue: 'Account'},\r\n    {value: 'assetClass1', viewValue: 'Asset Classification 1'},\r\n    {value: 'assetClass2', viewValue: 'Asset Classification 2'},\r\n    {value: 'assetClass3', viewValue: 'Asset Classification 3'},\r\n  ];\r\n  columnOptions: Selection[] = [];\r\n  investorAvailableDataColumns: DataColumn[] = [];\r\n  assetAvailableDataColumns: DataColumn[] = [];\r\n  accountAvailableDataColumns: DataColumn[] = [];\r\n  assetClass1AvailableDataColumns: DataColumn[] = [];\r\n  assetClass2AvailableDataColumns: DataColumn[] = [];\r\n  assetClass3AvailableDataColumns: DataColumn[] = [];\r\n  columnMultiSelection: MultiSelectSelection[] = [];\r\n  columnSets: MultiSelectSet[] = [];\r\n  category1MultiSelections: MultiSelectSelection[] = [];\r\n  category2MultiSelections: MultiSelectSelection[] = [];\r\n  category3MultiSelections: MultiSelectSelection[] = [];\r\n\r\n  categoriesDialogRef: MatDialogRef<any>;\r\n  @ViewChild(\"myButton\", { read: ElementRef }) buttonRef: ElementRef;\r\n  category1PanelOpen = false;\r\n  category2PanelOpen = false;\r\n  category3PanelOpen = false;\r\n\r\n  constructor(public selfDialogRef: MatDialogRef<HoldingsCustomizationComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public params: HoldingsCustomizationOptions, public dialog: MatDialog) {\r\n    // Setup the column options from previous selection.\r\n    for (const option of AvailableColumnOptions.columnOptions) {\r\n      let found = false;\r\n      for (let index = 0; index < params.dataColumns.length; index++) {\r\n        const element = params.dataColumns[index];\r\n        if (element.value === option.value) {found = true;}\r\n      }\r\n      if (!found) {this.columnOptions.push(option); }\r\n      // Setup columns for different grouping categories.\r\n      switch (option.parentValue) {\r\n        case \"account\":\r\n          this.accountAvailableDataColumns.push(option);\r\n        break;\r\n        case \"investor\":\r\n          this.investorAvailableDataColumns.push(option);\r\n        break;\r\n        case \"asset\":\r\n          this.assetAvailableDataColumns.push(option);\r\n        break;\r\n        case \"assetClass1\":\r\n          this.assetClass1AvailableDataColumns.push(option);\r\n        break;\r\n        case \"assetClass2\":\r\n          this.assetClass2AvailableDataColumns.push(option);\r\n        break;\r\n        case \"assetClass3\":\r\n          this.assetClass3AvailableDataColumns.push(option);\r\n        break;\r\n        default:\r\n        break;\r\n      }\r\n    }\r\n    // Available options and basic column option selection is complete. Now separate the available data columns based on the category selections and selected columsn for the category.\r\n    this.setupAndFixSelections();\r\n  }\r\n\r\n  show(dialogTemplate: TemplateRef<any>) {\r\n    const rect = this.buttonRef.nativeElement.getBoundingClientRect();\r\n    let position = {\r\n      left: (rect.right - 400) + 'px',\r\n      top: (rect.bottom) + 'px'\r\n    };\r\n    this.categoriesDialogRef = this.dialog.open(dialogTemplate, {\r\n      disableClose: false,\r\n      width: '400px',\r\n      maxHeight: '600px',\r\n      hasBackdrop: true,\r\n      position: position\r\n    });\r\n    // Positioning the drop down appropriately needs more work\r\n  }\r\n\r\n  save(){\r\n    this.categoriesDialogRef.close();\r\n  }\r\n\r\n  cancel() {\r\n    this.categoriesDialogRef.close();\r\n  }\r\n\r\n\r\n  columnsSelected(newSelectionSets: MultiSelectSet[]){\r\n    if(!newSelectionSets || newSelectionSets.length === 0) return;\r\n    let newDataColumns: DataColumn[] = [];\r\n    let newSelections = newSelectionSets[0].selectionSet;\r\n    for (const selection of newSelections) {\r\n      if(selection.selected) {\r\n        newDataColumns.push(selection.element);\r\n      }\r\n    }\r\n    this.params.dataColumns = newDataColumns;\r\n    this.disableSaveIfRequiredColumnsNotSelected()\r\n  }\r\n\r\n  category1ColumnsSelected(newSelections: MultiSelectSelection[]){\r\n    let newDataColumns: DataColumn[] = [];\r\n    for (const selection of newSelections) {\r\n      if(selection.selected) {\r\n        newDataColumns.push(selection.element);\r\n      }\r\n    }\r\n    this.params.category1Data = newDataColumns;\r\n    this.disableSaveIfRequiredColumnsNotSelected()\r\n  }\r\n  category2ColumnsSelected(newSelections: MultiSelectSelection[]){\r\n    let newDataColumns: DataColumn[] = [];\r\n    for (const selection of newSelections) {\r\n      if(selection.selected) {\r\n        newDataColumns.push(selection.element);\r\n      }\r\n    }\r\n    this.params.category2Data = newDataColumns;\r\n    this.disableSaveIfRequiredColumnsNotSelected()\r\n  }\r\n  category3ColumnsSelected(newSelections: MultiSelectSelection[]){\r\n    let newDataColumns: DataColumn[] = [];\r\n    for (const selection of newSelections) {\r\n      if(selection.selected) {\r\n        newDataColumns.push(selection.element);\r\n      }\r\n    }\r\n    this.params.category3Data = newDataColumns;\r\n    this.disableSaveIfRequiredColumnsNotSelected()\r\n  }\r\n\r\n  setupMultiSelections(selectedDataColumns: DataColumn[], availableDataColumns: DataColumn[]) {\r\n    let list: MultiSelectSelection[] = [];\r\n    let multiSelectSelection: MultiSelectSelection = null;\r\n    for (const selectedColumn of selectedDataColumns) {\r\n      multiSelectSelection = {\r\n        selected: true,\r\n        draggable: true,\r\n        disabled: false,\r\n        element: selectedColumn,\r\n        name: selectedColumn.viewValue\r\n      };\r\n      list.push(multiSelectSelection);\r\n    }\r\n    for (const avaiableColumn of availableDataColumns) {\r\n      let found = false;\r\n      for (const selectedColumn of selectedDataColumns) {\r\n        if (selectedColumn.value === avaiableColumn.value) {\r\n          found = true;\r\n          break\r\n        }\r\n      }\r\n      if(!found) {\r\n        multiSelectSelection = {\r\n          selected: false,\r\n          draggable: true,\r\n          disabled: false,\r\n          element: avaiableColumn,\r\n          name: avaiableColumn.viewValue\r\n        };\r\n        list.push(multiSelectSelection);\r\n      }\r\n\r\n    }\r\n    return list;\r\n  }\r\n\r\n  setupAndFixSelections() {\r\n    this.disableSaveIfRequiredColumnsNotSelected();\r\n\r\n    if(this.params.category1 === \"account\") {this.category1MultiSelections = this.setupMultiSelections(this.params.category1Data, this.accountAvailableDataColumns);}\r\n    if(this.params.category2 === \"account\") {this.category2MultiSelections = this.setupMultiSelections(this.params.category2Data, this.accountAvailableDataColumns);}\r\n    if(this.params.category3 === \"account\") {this.category3MultiSelections = this.setupMultiSelections(this.params.category3Data, this.accountAvailableDataColumns);}\r\n    if(this.params.category1 === \"investor\") {this.category1MultiSelections = this.setupMultiSelections(this.params.category1Data, this.investorAvailableDataColumns);}\r\n    if(this.params.category2 === \"investor\") {this.category2MultiSelections = this.setupMultiSelections(this.params.category2Data, this.investorAvailableDataColumns);}\r\n    if(this.params.category3 === \"investor\") {this.category3MultiSelections = this.setupMultiSelections(this.params.category3Data, this.investorAvailableDataColumns);}\r\n    if(this.params.category1 === \"asset\") {this.category1MultiSelections = this.setupMultiSelections(this.params.category1Data, this.assetAvailableDataColumns);}\r\n    if(this.params.category2 === \"asset\") {this.category2MultiSelections = this.setupMultiSelections(this.params.category2Data, this.assetAvailableDataColumns);}\r\n    if(this.params.category3 === \"asset\") {this.category3MultiSelections = this.setupMultiSelections(this.params.category3Data, this.assetAvailableDataColumns);}\r\n    if(this.params.category1 === \"assetClass1\") {this.category1MultiSelections = this.setupMultiSelections(this.params.category1Data, this.assetClass1AvailableDataColumns);}\r\n    if(this.params.category2 === \"assetClass1\") {this.category2MultiSelections = this.setupMultiSelections(this.params.category2Data, this.assetClass1AvailableDataColumns);}\r\n    if(this.params.category3 === \"assetClass1\") {this.category3MultiSelections = this.setupMultiSelections(this.params.category3Data, this.assetClass1AvailableDataColumns);}\r\n    if(this.params.category1 === \"assetClass2\") {this.category1MultiSelections = this.setupMultiSelections(this.params.category1Data, this.assetClass2AvailableDataColumns);}\r\n    if(this.params.category2 === \"assetClass2\") {this.category2MultiSelections = this.setupMultiSelections(this.params.category2Data, this.assetClass2AvailableDataColumns);}\r\n    if(this.params.category3 === \"assetClass2\") {this.category3MultiSelections = this.setupMultiSelections(this.params.category3Data, this.assetClass2AvailableDataColumns);}\r\n    if(this.params.category1 === \"assetClass3\") {this.category1MultiSelections = this.setupMultiSelections(this.params.category1Data, this.assetClass3AvailableDataColumns);}\r\n    if(this.params.category2 === \"assetClass3\") {this.category2MultiSelections = this.setupMultiSelections(this.params.category2Data, this.assetClass3AvailableDataColumns);}\r\n    if(this.params.category3 === \"assetClass3\") {this.category3MultiSelections = this.setupMultiSelections(this.params.category3Data, this.assetClass3AvailableDataColumns);}\r\n    this.columnMultiSelection = this.setupMultiSelections(this.params.dataColumns, AvailableColumnOptions.columnOptions);\r\n    this.columnSets = [];\r\n    const columnSet: MultiSelectSet = new MultiSelectSet();\r\n    columnSet.selectionSet = this.columnMultiSelection;\r\n    columnSet.maxSelections = 10;\r\n    columnSet.sortable = true;\r\n    this.columnSets.push(columnSet);\r\n    console.log(this.columnSets);\r\n\r\n  }\r\n  sortSelectedColumns(availableColumns: DataColumn[], selectedColumns: DataColumn[], unSelectedColumns: DataColumn[]) {\r\n    for (let index = 0; index < availableColumns.length; index++) {\r\n      const availableElement = availableColumns[index];\r\n      let found=false;\r\n      for (let index = 0; index < selectedColumns.length; index++) {\r\n        const selectedElement = selectedColumns[index];\r\n        if(availableElement.value === selectedElement.value) {found = true; }\r\n      }\r\n      if(!found) {unSelectedColumns.push(availableElement);}\r\n    }\r\n  }\r\n\r\n  disableSaveIfRequiredColumnsNotSelected(){\r\n    this.saveDisabled = false;\r\n    if (this.params.category1 !== null && this.params.category1Data.length === 0) {this.saveDisabled = true; }\r\n    if (this.params.category2 !== null && this.params.category2Data.length === 0) {this.saveDisabled = true; }\r\n    if (this.params.category3 !== null && this.params.category3Data.length === 0) {this.saveDisabled = true; }\r\n    if (this.params.dataColumns.length === 0) {this.saveDisabled = true; }\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    // console.log('The dialog is being opened with:' + JSON.stringify(this.params));\r\n\r\n  }\r\n  onNoClick(): void {\r\n    // console.log('The dialog is being closed:' + JSON.stringify(this.params));\r\n    this.selfDialogRef.close();\r\n  }\r\n\r\n  onChange1(){\r\n    this.params.category1Data=[];\r\n    this.onChange();\r\n  }\r\n  onChange2(){\r\n    this.params.category2Data=[];\r\n    this.onChange();\r\n  }\r\n  onChange3(){\r\n    this.params.category3Data=[];\r\n    this.onChange();\r\n  }\r\n\r\n  onChange(){\r\n    if (this.params.category3 === this.params.category2) {\r\n      //Category 2 was selected to be the same as category 3. So clean category 3 and move it's setting to category 2.\r\n      this.params.category3 = null;\r\n      this.params.category2Data = this.params.category3Data;\r\n      this.params.category3Data = [];\r\n      this.setupAndFixSelections();\r\n      return;\r\n    }\r\n    if (this.params.category3 === this.params.category1) {\r\n      //Category 1 was selected to be the same as category 3. So clean category 3 and move it's setting to category 1.\r\n      this.params.category3 = null;\r\n      this.params.category1Data = this.params.category3Data;\r\n      this.params.category3Data = [];\r\n      this.setupAndFixSelections();\r\n      return;\r\n    }\r\n    if (this.params.category2 === this.params.category1) {\r\n      //Category 1 was selected to be the same as category 2. So clean category 2 and move it's setting to category 1.\r\n      this.params.category2 = null;\r\n      this.params.category3 = null;\r\n      this.params.category1Data = this.params.category2Data;\r\n      this.params.category2Data = [];\r\n      this.params.category3Data = [];\r\n      this.setupAndFixSelections();\r\n      return;\r\n    }\r\n    if (this.params.category1 === null) {\r\n      // Category 1 is unselected after selecting category 2. So clean category 2 and move it's setting to category 1.\r\n      this.params.category2 = null;\r\n      this.params.category3 = null;\r\n      this.params.category2Data = [];\r\n      this.params.category3Data = [];\r\n      this.setupAndFixSelections();\r\n      return;\r\n    }\r\n    if (this.params.category2 === null) {\r\n      // Category 2 is unselected after selecting category 3. So clean category 3 and move it's setting to category 2.\r\n      //This might happen in the previous if block since category 1 was unselected after selecting both 2 and 3.\r\n      this.params.category3 = null;\r\n      this.params.category3Data = [];\r\n      this.setupAndFixSelections();\r\n      return;\r\n    }\r\n    this.setupAndFixSelections();\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".column-list {\r\n  border: solid 1px #ccc;\r\n  min-height: 180px;\r\n  background: white;\r\n  border-radius: 4px;\r\n  overflow: hidden;\r\n  display: block;\r\n}\r\n\r\n.column-box {\r\n  padding: 5px;\r\n  border-bottom: solid 1px #ccc;\r\n  color: rgba(0, 0, 0, 0.87);\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  box-sizing: border-box;\r\n  cursor: move;\r\n  background: white;\r\n  font-size: 14px;\r\n}\r\n\r\n",
                    "styleUrl": "./holdings-customization.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "selfDialogRef",
                        "type": "MatDialogRef<HoldingsCustomizationComponent>"
                    },
                    {
                        "name": "params",
                        "type": "HoldingsCustomizationOptions"
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog"
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "selfDialogRef",
                        "type": "MatDialogRef<HoldingsCustomizationComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "params",
                        "type": "HoldingsCustomizationOptions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div mat-dialog-title class=\"container-fluid\">\r\n  <div class=\"row\">\r\n    <h2 class=\"col\">Customize Holdings Component</h2>\r\n  </div>\r\n  <div class=\"row justify-content-end\">\r\n    <div class=\"col-auto\">\r\n      <button mat-stroked-button class=\"show-tiles pl-2 pr-2 ml-1 mr-1\" (click)=\"show(dialog)\" #myButton>\r\n        <span class=\"name\">Group Holdings By</span>\r\n        <mat-icon>arrow_drop_down</mat-icon>\r\n      </button>\r\n    </div>\r\n    <div class=\"col-auto\">\r\n      <div class=\"columnComp\">\r\n        <app-multi-selection\r\n          [name]=\"'Columns'\"\r\n          [selectionSets]=\"columnSets\"\r\n          (newOptions)=\"columnsSelected($event)\"\r\n        ></app-multi-selection>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n<div mat-dialog-content class=\"container-fluid m-1 p-1\">\r\n  <wri-holdings\r\n    [options]=\"params\"\r\n    [numberOfColumnsToShow]=\"params.dataColumns.length\"\r\n    [useDummyData]=\"true\"\r\n  ></wri-holdings>\r\n</div>\r\n<div mat-dialog-actions class=\"float-right\">\r\n  <button mat-button color=\"primary\" [mat-dialog-close]=\"params\" cdkFocusInitial [disabled]=\"saveDisabled\">Save</button>\r\n  <button mat-button color=\"primary\" outline=\"true\" (click)=\"onNoClick()\">Cancel</button>\r\n</div>\r\n\r\n<ng-template #dialog>\r\n  <mat-dialog-content>\r\n    <div class=\"container-fluid\">\r\n      <div class=\"row align-items-center border\">\r\n        <div class=\"col-auto\">\r\n          <a *ngIf=\"!category1PanelOpen && params.category1 !== null\" (click)=\"category1PanelOpen = true\"><mat-icon>add_circle</mat-icon></a>\r\n          <a *ngIf=\"category1PanelOpen && params.category1 !== null\" (click)=\"category1PanelOpen = false\"><mat-icon>remove_circle</mat-icon></a>\r\n        </div>\r\n        <div class=\"col\">\r\n          <mat-form-field>\r\n            <mat-select [(ngModel)]=\"params.category1\" name=\"category\" (selectionChange)=\"onChange1()\">\r\n              <mat-option *ngFor=\"let category of categories\" [value]=\"category.value\">\r\n                {{category.viewValue}}\r\n              </mat-option>\r\n            </mat-select>\r\n          </mat-form-field>\r\n        </div>\r\n        <div class=\"w-100\"></div>\r\n        <ng-container *ngIf=\"category1PanelOpen && params.category1 !== null\">\r\n          <div class=\"col-6\" *ngFor=\"let selection of category1MultiSelections\">\r\n            <div>\r\n              <input type=\"checkbox\" [disabled]=\"selection.disabled\" [(ngModel)]=\"selection.selected\" (ngModelChange)=\"category1ColumnsSelected(category1MultiSelections)\">\r\n              <span class=\"ml-1\">{{selection.name}}</span>\r\n            </div>\r\n          </div>\r\n        </ng-container>\r\n      </div>\r\n\r\n      <div class=\"row align-items-center border\">\r\n        <div class=\"col-auto\">\r\n          <a *ngIf=\"!category2PanelOpen && params.category2 !== null\" (click)=\"category2PanelOpen = true\"><mat-icon>add_circle</mat-icon></a>\r\n          <a *ngIf=\"category2PanelOpen && params.category2 !== null\" (click)=\"category2PanelOpen = false\"><mat-icon>remove_circle</mat-icon></a>\r\n        </div>\r\n        <div class=\"col\">\r\n          <mat-form-field>\r\n            <mat-select [(ngModel)]=\"params.category2\" name=\"category\" (selectionChange)=\"onChange2()\">\r\n              <ng-container *ngFor=\"let category of categories\">\r\n                <mat-option *ngIf=\"category.value !== params.category1\" [value]=\"category.value\">\r\n                  {{category.viewValue}}\r\n                </mat-option>\r\n              </ng-container>\r\n          </mat-select>\r\n          </mat-form-field>\r\n        </div>\r\n        <div class=\"w-100\"></div>\r\n        <ng-container *ngIf=\"category2PanelOpen && params.category2 !== null\">\r\n          <div class=\"col-6\" *ngFor=\"let selection of category2MultiSelections\">\r\n            <div>\r\n              <input type=\"checkbox\" [disabled]=\"selection.disabled\" [(ngModel)]=\"selection.selected\" (ngModelChange)=\"category2ColumnsSelected(category2MultiSelections)\">\r\n              <span class=\"ml-1\">{{selection.name}}</span>\r\n            </div>\r\n          </div>\r\n        </ng-container>\r\n      </div>\r\n\r\n      <div class=\"row align-items-center border\">\r\n        <div class=\"col-auto\">\r\n          <a *ngIf=\"!category3PanelOpen && params.category3 !== null\" (click)=\"category3PanelOpen = true\"><mat-icon>add_circle</mat-icon></a>\r\n          <a *ngIf=\"category3PanelOpen && params.category3 !== null\" (click)=\"category3PanelOpen = false\"><mat-icon>remove_circle</mat-icon></a>\r\n        </div>\r\n        <div class=\"col\">\r\n          <mat-form-field>\r\n            <mat-select [(ngModel)]=\"params.category3\" name=\"category\" (selectionChange)=\"onChange3()\">\r\n              <ng-container *ngFor=\"let category of categories\">\r\n                <mat-option *ngIf=\"category.value !== params.category1 && category.value !== params.category2\" [value]=\"category.value\">\r\n                  {{category.viewValue}}\r\n                </mat-option>\r\n              </ng-container>\r\n          </mat-select>\r\n          </mat-form-field>\r\n        </div>\r\n        <div class=\"w-100\"></div>\r\n        <ng-container *ngIf=\"category3PanelOpen && params.category3 !== null\">\r\n          <div class=\"col-6\" *ngFor=\"let selection of category3MultiSelections\">\r\n            <div>\r\n              <input type=\"checkbox\" [disabled]=\"selection.disabled\" [(ngModel)]=\"selection.selected\" (ngModelChange)=\"category3ColumnsSelected(category3MultiSelections)\">\r\n              <span class=\"ml-1\">{{selection.name}}</span>\r\n            </div>\r\n          </div>\r\n        </ng-container>\r\n      </div>\r\n    </div>\r\n  </mat-dialog-content>\r\n</ng-template>"
        },
        {
            "name": "HoldingsReportBuilderComponent",
            "id": "component-HoldingsReportBuilderComponent-714bcf4e9dfd12e5c5a6f4a139905dad",
            "file": "projects/report-builder/src/app/component/holdings-report-builder/holdings-report-builder.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-holdings-report-builder",
            "styleUrls": [
                "./holdings-report-builder.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./holdings-report-builder.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "portraitOrientation",
                    "line": 13,
                    "type": "boolean",
                    "inheritance": {
                        "file": "BaseReportBuilderComponent"
                    }
                },
                {
                    "name": "resizeEvent",
                    "line": 11,
                    "type": "EventEmitter<any>",
                    "inheritance": {
                        "file": "BaseReportBuilderComponent"
                    }
                },
                {
                    "name": "widget",
                    "line": 9,
                    "type": "GridsterItem",
                    "inheritance": {
                        "file": "BaseReportBuilderComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "optionsOuput",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 7,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "BaseReportBuilderComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "dialog",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "numberOfColumnsToShow",
                    "defaultValue": "10",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "options",
                    "type": "HoldingsCustomizationOptions",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "resizeSub",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "inheritance": {
                        "file": "BaseReportBuilderComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49
                },
                {
                    "name": "openDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65
                },
                {
                    "name": "sizing",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { BaseReportBuilderComponent } from '../base-report-builder-component.class';\nimport { MatDialog } from '@angular/material/dialog';\nimport { HoldingsCustomizationComponent } from './holdings-customization.component';\nimport { HoldingsCustomizationOptions, AvailableColumnOptions } from 'wri-holdings';\n@Component({\n  selector: 'app-holdings-report-builder',\n  templateUrl: './holdings-report-builder.component.html',\n  styleUrls: ['./holdings-report-builder.component.scss']\n})\nexport class HoldingsReportBuilderComponent extends BaseReportBuilderComponent implements OnInit, OnDestroy {\n  options: HoldingsCustomizationOptions;\n  numberOfColumnsToShow: number = 10;\n  constructor(public dialog: MatDialog) {\n    super();\n    this.options = {\n      category1: \"investor\",\n      category2: \"account\",\n      category3: \"assetClass1\",\n      category1Data: [],\n      category2Data: [],\n      category3Data: [],\n      dataColumns: []\n    };\n        // Starting default configuration being loadeed. If configuration is loaded from server, you need to find the right objects from Available Column Options to use it properly.\n        this.options.dataColumns.push(AvailableColumnOptions.columnOptions[12]);\n        this.options.dataColumns.push(AvailableColumnOptions.columnOptions[13]);\n        this.options.dataColumns.push(AvailableColumnOptions.columnOptions[5]);\n        this.options.dataColumns.push(AvailableColumnOptions.columnOptions[0]);\n        this.options.dataColumns.push(AvailableColumnOptions.columnOptions[1]);\n        this.options.dataColumns.push(AvailableColumnOptions.columnOptions[2]);\n        this.options.dataColumns.push(AvailableColumnOptions.columnOptions[7]);\n        this.options.dataColumns.push(AvailableColumnOptions.columnOptions[8]);\n        this.options.dataColumns.push(AvailableColumnOptions.columnOptions[4]);\n        this.options.dataColumns.push(AvailableColumnOptions.columnOptions[6]);\n    \n        this.options.category1Data.push(AvailableColumnOptions.columnOptions[21]);\n        this.options.category2Data.push(AvailableColumnOptions.columnOptions[23]);\n        this.options.category2Data.push(AvailableColumnOptions.columnOptions[22]);\n        this.options.category2Data.push(AvailableColumnOptions.columnOptions[28]);\n        this.options.category3Data.push(AvailableColumnOptions.columnOptions[17]);\n        // End default configuration.\n    \n  }\n  ngOnDestroy() {\n    //Cleanup subscriptions.\n    this.resizeSub.unsubscribe();\n  }\n  ngOnInit(): void {\n    this.optionsOuput.emit(this.options);\n    this.resizeSub = this.resizeEvent.subscribe((widget) => {\n      if (widget === this.widget) { // or check id , type or whatever you have there\n        // resize your widget, chart, map , etc.\n        // console.log(\"Old Size:\\nRows: \" + widget.rows + \"\\nColumns: \" + widget.cols);\n        setTimeout(this.sizing.bind(this), 1000);\n      }\n    });\n    this.sizing();\n  }\n\n  sizing() {\n    const mincolumns = [0,0,0,0,1,1,2,2,3,4,4,5,6,6,7,8,8,8,9,9,10];\n    if (this.widget.cols <=20) {this.numberOfColumnsToShow = mincolumns[this.widget.cols]; }\n  }\n  openDialog(): void {\n    const doc = document.documentElement;\n    const left = (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0);\n    const top = (window.pageYOffset || doc.scrollTop) - (doc.clientTop || 0);\n\n    if (top != 0 || left != 0) {\n      window.scrollTo({\n        top : 0,\n        left: 0\n      });\n    }\n    const newOptions: HoldingsCustomizationOptions = {\n      category1: this.options.category1,\n      category2: this.options.category2,\n      category3: this.options.category3,\n      category1Data: [...this.options.category1Data],\n      category2Data: [...this.options.category2Data],\n      category3Data: [...this.options.category3Data],\n      dataColumns: [...this.options.dataColumns]\n    };\n    const dialogRef = this.dialog.open(HoldingsCustomizationComponent, {\n      disableClose: true,\n      width: '1100px',\n      data: newOptions\n    });\n    dialogRef.afterClosed().subscribe(result => {\n      // Result is only sent when user does not click cancel.\n      if (top != 0 || left != 0) {\n        window.scroll({\n          top : top,\n          left : left\n        });\n      }\n      if(result) {\n        this.options = {...result};\n        this.options.dataColumns = [...result.dataColumns]\n        this.optionsOuput.emit(this.options);\n        // this.separateDataIntoCategories();\n        // console.log(this.options);\n      }\n    });\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../base-report-builder-component.scss';\r\n\r\nwri-holdings {\r\n  --wri-header-color: #343434\r\n}",
                    "styleUrl": "./holdings-report-builder.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseReportBuilderComponent",
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div *ngIf=\"widget.edit\" class=\"edit\">\n  <a class=\"drag-handler\" (click)=\"openDialog()\">\n    <img class=\"icon\" src=\"assets/edit.png\"/>&nbsp;\n  </a>\n</div>\n<wri-holdings\n  [options]=\"options\"\n  [numberOfColumnsToShow]=\"numberOfColumnsToShow\"\n  [useDummyData]=\"true\"\n></wri-holdings>\n"
        },
        {
            "name": "MessagingComponent",
            "id": "component-MessagingComponent-a4d495aeb2b26a566ad7f214af00a76e",
            "file": "projects/report-builder/src/app/common/messaging/messaging.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "common-messaging",
            "styleUrls": [
                "./messaging.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./messaging.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "buttonLabel",
                    "defaultValue": "'OK'",
                    "line": 31,
                    "type": "string"
                },
                {
                    "name": "displayType",
                    "defaultValue": "MessageDisplayType.INPAGE",
                    "line": 28,
                    "type": "MessageDisplayType"
                },
                {
                    "name": "hideAfterInterval",
                    "line": 29,
                    "type": "number"
                },
                {
                    "name": "message",
                    "line": 36,
                    "type": "SimpleMessage"
                },
                {
                    "name": "width",
                    "defaultValue": "\"350px\"",
                    "line": 32,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "notifyActionClicked",
                    "defaultValue": "new EventEmitter()",
                    "line": 33,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "dialogTemplateRef",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'dialog'"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "enableInpageMessage",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "MessageType",
                    "defaultValue": "MessageType",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "modaelDialogRef",
                    "type": "MatDialogRef<TemplateRef<any>>",
                    "optional": false,
                    "description": "",
                    "line": 39
                }
            ],
            "methodsClass": [
                {
                    "name": "hideMessage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80
                },
                {
                    "name": "initMessage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "simpleChange",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "jsdoctags": [
                        {
                            "name": "simpleChange",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44
                },
                {
                    "name": "showInpageMessage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58
                },
                {
                    "name": "showModalMessage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter, OnChanges, SimpleChanges, TemplateRef, ViewChild } from '@angular/core';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\n\nexport enum MessageType {\n  CONFIRM = 'confirm',\n  INFORM = 'inform',\n  ERROR = 'error',\n  WARN = 'warn'\n}\n\nexport enum MessageDisplayType {\n  INPAGE = 'inpage',\n  MODAL = 'modal'\n}\n\nexport class SimpleMessage {\n  messageType: MessageType;\n  messageDesc: string;\n}\n\n@Component({\n  selector: 'common-messaging',\n  templateUrl: './messaging.component.html',\n  styleUrls: ['./messaging.component.scss']\n})\nexport class MessagingComponent implements OnInit, OnChanges {\n  // These Inputs provide different ways to wire the messaging component.\n  @Input() displayType: MessageDisplayType = MessageDisplayType.INPAGE; // Defaulted to inpage unless specified when using the component.\n  @Input() hideAfterInterval: number; // This input us only used for inline messaging. It can be any positive number between 0 and 5000 and represents the number of milliseconds.\n\n  @Input() buttonLabel: string = 'OK'; // This input is only used for modal windows style messaging.\n  @Input() width: string = \"350px\"; // This input is only used for modal windows style messaging.\n  @Output() notifyActionClicked: EventEmitter<string> = new EventEmitter(); // The output is provided as a service and is only used for modal windows style messaging.\n  @ViewChild('dialog') public dialogTemplateRef: TemplateRef<any>;\n\n  @Input() message: SimpleMessage; // This is the actual message. Changing this Input will trigger a message.\n\n  enableInpageMessage: boolean = false;\n  modaelDialogRef: MatDialogRef<TemplateRef<any>>;\n  MessageType = MessageType;\n\n  constructor(private matDialog: MatDialog) { }\n\n  ngOnInit(): void {\n  }\n\n  ngOnChanges(simpleChange: SimpleChanges) {\n    this.initMessage();\n  }\n\n  initMessage() {\n    if (this.message.messageDesc == null || this.message.messageDesc == '') return;\n    if (this.message.messageType != MessageType.CONFIRM && this.message.messageType != MessageType.INFORM && this.message.messageType != MessageType.ERROR && this.message.messageType != MessageType.WARN) return;\n    if (this.displayType == MessageDisplayType.INPAGE) this.showInpageMessage();\n    else if (this.displayType == MessageDisplayType.MODAL) this.showModalMessage();\n  }\n\n  showInpageMessage() {\n    this.enableInpageMessage = true;\n    let interval = Number(this.hideAfterInterval);\n    if (interval && interval !== null &&interval > 0 && interval <= 5000) {\n      setTimeout( () => {\n        this.enableInpageMessage = false;;\n      }, interval);\n    }\n  }\n\n  showModalMessage() {\n    this.enableInpageMessage = false;\n    this.modaelDialogRef = this.matDialog.open(this.dialogTemplateRef, {\n      disableClose: true,\n      autoFocus: false,\n      width: this.width\n    });\n    this.modaelDialogRef.afterClosed().subscribe( result => {\n      this.notifyActionClicked.emit(result);\n    });\n  }\n\n  hideMessage() {\n    this.enableInpageMessage = false;\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n.informMsg, .successMsg, .failureMsg, .warningMsg{\r\n  vertical-align: middle;\r\n  background-color: #F0F0F0;\r\n  border-radius: 3px;\r\n  min-height: 25px;\r\n  color: #333;\r\n  border: 1px solid;\r\n}\r\n.informMsg {\r\n  border-color: #0066FF;\r\n}\r\n.confirmMsg {\r\n  border-color: #08AB05;\r\n}\r\n.errorMsg {\r\n  border-color: #E35205;\r\n}\r\n.warnMsg {\r\n  border-color: #FEBF00;\r\n}\r\n.informMsg i, .confirmMsg i, .errorMsg i, .warnMsg i{\r\n  font-size: 20px;\r\n}\r\n\r\n.informMsg i {\r\n  color: #0066FF;\r\n}\r\n.confirmMsg i {\r\n  color: #08AB05;\r\n}\r\n.errorMsg i {\r\n  color: #E35205;\r\n}\r\n.warnMsg i {\r\n  color: #FEBF00;\r\n}\r\n\r\n.textArea {\r\n  line-height: 20px;\r\n}",
                    "styleUrl": "./messaging.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "matDialog",
                        "type": "MatDialog"
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "matDialog",
                        "type": "MatDialog",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<div class=\"{{message.messageType + 'Msg'}} border border-rounded p-2\" *ngIf=\"enableInpageMessage\">\n  <i class=\"fa fa-check-circle\" *ngIf=\"message.messageType === MessageType.CONFIRM\"></i>\n  <i class=\"fa fa-exclamation-triangle\" *ngIf=\"message.messageType === MessageType.WARN\"></i>\n  <i class=\"fa fa-times-circle\" *ngIf=\"message.messageType === MessageType.ERROR\"></i>\n  <i class=\"fa fa-info-circle\" *ngIf=\"message.messageType === MessageType.INFORM\"></i>  \n  <span class=\"pl-3 textArea\" [innerHTML]=\"message.messageDesc | purifyHTML\"></span>\n  <span class=\"pl-3\"><a (click)=\"hideMessage()\"><span class=\"fa fa-times\"></span></a></span>\n</div>\n\n<ng-template #dialog>\n  <mat-dialog-content>\n    <div class=\"{{message.messageType + 'Msg'}} border border-rounded p-2\">\n      <i class=\"fa fa-check-circle\" *ngIf=\"message.messageType === MessageType.CONFIRM\"></i>\n      <i class=\"fa fa-exclamation-triangle\" *ngIf=\"message.messageType === MessageType.WARN\"></i>\n      <i class=\"fa fa-times-circle\" *ngIf=\"message.messageType === MessageType.ERROR\"></i>\n      <i class=\"fa fa-info-circle\" *ngIf=\"message.messageType === MessageType.INFORM\"></i>  \n      <span class=\"pl-3 textArea\" [innerHTML]=\"message.messageDesc | purifyHTML\"></span>\n    </div>\n  </mat-dialog-content>\n  <mat-dialog-actions align=\"end\">\n    <button mat-raised-button matDialogClose=\"OK\" color=\"primary\" class=\"small-button\">{{buttonLabel}}</button>\n  </mat-dialog-actions>\n</ng-template>"
        },
        {
            "name": "MultiSelectionComponent",
            "id": "component-MultiSelectionComponent-d1c5f882d91d0ed89488c1e81824b2e1",
            "file": "projects/report-builder/src/app/common/multi-selection/multi-selection.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-multi-selection",
            "styleUrls": [
                "./multi-selection.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./multi-selection.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "minimumSelections",
                    "defaultValue": "0",
                    "line": 45,
                    "type": "number"
                },
                {
                    "name": "name",
                    "line": 42,
                    "type": "string"
                },
                {
                    "name": "selectionSets",
                    "line": 49,
                    "type": "MultiSelectSet[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "newOptions",
                    "defaultValue": "new EventEmitter<MultiSelectSet[]>()",
                    "line": 53,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "buttonRef",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'myButton', {read: ElementRef}"
                        }
                    ]
                },
                {
                    "name": "dialog",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "dialogRef",
                    "type": "MatDialogRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "disableSave",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "initialMaxheight",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 113
                },
                {
                    "name": "innerContentDivHeight",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 114
                },
                {
                    "name": "internalSelectionSets",
                    "defaultValue": "[]",
                    "type": "MultiSelectSet[]",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "moveItemInArray",
                    "defaultValue": "moveItemInArray",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 182
                },
                {
                    "name": "checkMinimumSelections",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 259
                },
                {
                    "name": "drop",
                    "args": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<string[]>"
                        },
                        {
                            "name": "setIndex",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 187,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<string[]>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "setIndex",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62
                },
                {
                    "name": "onChecked",
                    "args": [
                        {
                            "name": "i",
                            "type": "number"
                        },
                        {
                            "name": "isChecked",
                            "type": "boolean"
                        },
                        {
                            "name": "setIndex",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 237,
                    "jsdoctags": [
                        {
                            "name": "i",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isChecked",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "setIndex",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onCheckedNonSortable",
                    "args": [
                        {
                            "name": "i",
                            "type": "number"
                        },
                        {
                            "name": "isChecked",
                            "type": "boolean"
                        },
                        {
                            "name": "setIndex",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 219,
                    "jsdoctags": [
                        {
                            "name": "i",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isChecked",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "setIndex",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onResize",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 152,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 177
                },
                {
                    "name": "setCurrentSelections",
                    "args": [
                        {
                            "name": "selectionSets",
                            "type": "MultiSelectSet[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "jsdoctags": [
                        {
                            "name": "selectionSets",
                            "type": "MultiSelectSet[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "show",
                    "args": [
                        {
                            "name": "dialogTemplate",
                            "type": "TemplateRef<any>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "jsdoctags": [
                        {
                            "name": "dialogTemplate",
                            "type": "TemplateRef<any>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showHideSelectionDetails",
                    "args": [
                        {
                            "name": "selection",
                            "type": "MultiSelectSelection"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 272,
                    "jsdoctags": [
                        {
                            "name": "selection",
                            "type": "MultiSelectSelection",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateAndMove",
                    "args": [
                        {
                            "name": "set",
                            "type": "MultiSelectSet"
                        },
                        {
                            "name": "fromIndex",
                            "type": "number"
                        },
                        {
                            "name": "toIndex",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 201,
                    "jsdoctags": [
                        {
                            "name": "set",
                            "type": "MultiSelectSet",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fromIndex",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "toIndex",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter, TemplateRef, OnChanges, SimpleChanges, ElementRef, ViewChild } from '@angular/core';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport {CdkDragDrop, moveItemInArray} from '@angular/cdk/drag-drop';\n\nexport interface SingleSelection{\n  name: String;\n  element: any;\n}\nexport interface SingleOptionSet {\n  options: SingleSelection[];\n  selectedOption: SingleSelection;\n}\nexport interface MultiSelectSelection extends SingleSelection{\n  selected:  boolean;\n  draggable: boolean;\n  disabled:  boolean;\n  subSelections?: MultiSelectSelection[];\n  subOptions?: SingleOptionSet;\n  selectionDetails?: string[];\n  showDetails?: boolean;\n}\n\nexport class MultiSelectSet {\n  selectionSet: MultiSelectSelection[] = [];\n  sortable: boolean = true;\n  name: string;\n  maxSelections: number;\n  minSelections: number = 0;\n  currentSelectedCount: number = 0;\n  sortableEndCount: number = 0; // Using end count because we are sorting the disabled items to the last of the sort list.\n  selectedAndNotDraggabledCount: number = 0; // This field is necessary to allow a set to have single selection set to have items that are diabled.\n}\n\n@Component({\n  selector: 'app-multi-selection',\n  templateUrl: './multi-selection.component.html',\n  styleUrls: ['./multi-selection.component.css']\n})\nexport class MultiSelectionComponent implements OnInit, OnChanges {\n  moveItemInArray = moveItemInArray;\n  @Input()\n  name: string;\n\n  @Input()\n  minimumSelections: number = 0;\n  disableSave: boolean = false;\n\n  @Input()\n  selectionSets: MultiSelectSet[];\n  internalSelectionSets: MultiSelectSet[] = [];\n\n  @Output()\n  newOptions = new EventEmitter<MultiSelectSet[]>();\n\n  dialogRef: MatDialogRef<any>;\n  \n  @ViewChild(\"myButton\", { read: ElementRef }) buttonRef: ElementRef;\n\n  constructor(public dialog: MatDialog) {\n  }\n\n  ngOnInit(): void {\n    this.setCurrentSelections(this.selectionSets);\n  }\n  ngOnChanges(changes: SimpleChanges) {\n    this.setCurrentSelections(changes.selectionSets.currentValue);\n  }\n\n  // This is the core of the logic to make the component work.\n  setCurrentSelections(selectionSets: MultiSelectSet[]){\n    this.internalSelectionSets = [];\n    for (const selectionSet of selectionSets) {\n      // Doing a deep copy manually here but with some logic to help do the counts necessary.\n      let newSelectionSet = new MultiSelectSet();\n      newSelectionSet.currentSelectedCount = 0;\n      newSelectionSet.maxSelections = +selectionSet.maxSelections;\n      newSelectionSet.minSelections = +selectionSet.minSelections;\n      newSelectionSet.sortable = selectionSet.sortable;\n      newSelectionSet.name = selectionSet.name;\n      for (const selection of selectionSet.selectionSet)\n      {\n        if(selection.selected) newSelectionSet.currentSelectedCount++;\n        if(selection.selected && !selection.draggable) newSelectionSet.selectedAndNotDraggabledCount++;\n        if(newSelectionSet.currentSelectedCount > selectionSet.maxSelections) {\n          selection.selected = false;\n          newSelectionSet.currentSelectedCount = selectionSet.maxSelections;\n        }\n        newSelectionSet.selectionSet.push({...selection});\n      }\n      if(selectionSet.sortable){\n        // The sort algorithm here is being done to ensure the sortable items (not disabled) are first in the list. In the sortable items, the selectable items are ahead again.\n        // The sequencing of the sort returns is critical to the algorithm.\n        newSelectionSet.selectionSet.sort((a,b) => {\n          if(a.selected && !b.selected) return -1;\n          if(a.draggable && !b.draggable) return -1;\n          if(!a.draggable && b.draggable) return 1;\n          if(!a.selected && b.selected) return 1;\n          return 0;\n        });\n        newSelectionSet.sortableEndCount = newSelectionSet.selectionSet.length;\n        for (const selection of newSelectionSet.selectionSet) {\n          if(!selection.draggable) newSelectionSet.sortableEndCount--;\n        }\n      }\n      this.internalSelectionSets.push(newSelectionSet);\n    }\n    this.checkMinimumSelections()\n  }\n\n  // The logic around initial max height is necessary because we are allowing the content to drive the height.\n  // Without this we have to set the height property to work and that makes it too long a dialog when the content is small.\n  // There is a side effect that the size of the open dialog box cannot be longer than the initially opened size.\n  initialMaxheight = 0;\n  innerContentDivHeight = 0;\n\n  show(dialogTemplate: TemplateRef<any>) {\n    const rect = this.buttonRef.nativeElement.getBoundingClientRect();\n    const h = window.innerHeight;\n    // Position logic uses a constant width box of 400px. Since the box is being right aligned, we actually right align unless the box is too close to the left side of the screen. \n    let position = {\n      left: '0px',\n      top: rect.bottom + 'px'\n    };\n    if(rect.right>300){\n      position = {\n        left: (rect.right - 300) + 'px',\n        top: rect.bottom + 'px'\n      };\n    }\n    let maxHeight = h - rect.bottom - 10;\n    this.initialMaxheight = maxHeight;\n    this.innerContentDivHeight = maxHeight - 90;\n    this.dialogRef = this.dialog.open(dialogTemplate, {\n      disableClose: false, //This allows closing the dialog box by clicking anywhere else. This allows the behaviour to mimick a true dropdown.\n      width: '300px',\n      maxHeight: maxHeight + 'px',\n      // height: maxHeight + 'px',\n      hasBackdrop: true, //This is necessary for the drag drop to work in a dialog box.\n      position: position,\n      backdropClass: 'dialog-overlay',\n      panelClass: 'multi-select-dialog-panel'\n    });\n    console.log('Initial window height: '+ h, rect, this.initialMaxheight, this.innerContentDivHeight);\n    // This code is necessary so that when a user clicks the backdrop, we can close the backdrop and reset the entries.\n    this.dialogRef.backdropClick().subscribe(() => {\n      this.setCurrentSelections(this.selectionSets); //Reset selections.\n    })\n  }\n\n  // The on resize event needs to be handled only for the case where the user changes the window size after inital open of the dialog.\n  // This makes the popup box behave like a true dropdown box.\n  onResize(event) {\n    const rect = this.buttonRef.nativeElement.getBoundingClientRect();\n    const h = window.innerHeight;\n    console.log('Resized window height: '+ h, rect, this.initialMaxheight, this.innerContentDivHeight);\n    //console.log(rect);\n    let position = {\n      left: '0px',\n      top: rect.bottom + 'px'\n    };\n    if(rect.right>300){\n      position = {\n        left: (rect.right - 300) + 'px',\n        top: rect.bottom + 'px'\n      };\n    }\n    let height = h - rect.bottom - 10;\n    // Because we are setting the maxHeight property when opening the dialog the height property cannot be longer than the maxHeight\n    if(height > this.initialMaxheight) height = this.initialMaxheight;\n    this.innerContentDivHeight = height - 90;\n    // console.log(maxHeight);\n    this.dialogRef.updatePosition(position);\n    this.dialogRef.updateSize('300px', height + 'px');\n  }\n\n  // Save emits the changes sets to the calling component.\n  save(){\n    this.newOptions.emit(this.internalSelectionSets);\n    this.dialogRef.close();\n  }\n\n  cancel() {\n    this.dialogRef.close();\n    this.setCurrentSelections(this.selectionSets); //Reset the selections.\n  }\n\n  drop(event: CdkDragDrop<string[]>, setIndex: number) {\n    const set = this.internalSelectionSets[setIndex];\n    const element = set.selectionSet[event.previousIndex];\n    if (element.selected && event.currentIndex < set.currentSelectedCount)  {\n      moveItemInArray(set.selectionSet, event.previousIndex, event.currentIndex);\n    }\n    if (!element.selected  && event.currentIndex < set.currentSelectedCount && set.currentSelectedCount < set.maxSelections) {\n      moveItemInArray(set.selectionSet, event.previousIndex, event.currentIndex);\n      element.selected = true;\n      set.currentSelectedCount++;\n    }\n    this.checkMinimumSelections()\n  }\n\n  validateAndMove(set:MultiSelectSet, fromIndex: number, toIndex: number) {\n    let fromItem = set.selectionSet[fromIndex];\n    let toItem = set.selectionSet[toIndex];\n    if((fromItem.selected && toItem.selected)\n    || (!fromItem.selected && !toItem.selected)) {\n      moveItemInArray(set.selectionSet, fromIndex, toIndex);\n      return;\n    }\n    if((!fromItem.selected && toItem.selected) && set.currentSelectedCount < set.maxSelections ) {\n      moveItemInArray(set.selectionSet, fromIndex, toIndex);\n      fromItem.selected = true;\n      set.currentSelectedCount++;\n      this.checkMinimumSelections()\n      return;\n    }\n  }\n\n  // Simple logic to handle checking and un checking for non sortable sets.\n  onCheckedNonSortable(i: number, isChecked: boolean, setIndex: number){\n    const set = this.internalSelectionSets[setIndex];\n    set.selectionSet[i].selected = isChecked;\n    if(isChecked) {\n      if (set.currentSelectedCount < set.maxSelections){\n        set.currentSelectedCount++;\n      } // else  condition is not necessary as this code is never triggered due to disabling selections.\n      else {\n        set.selectionSet[i].selected = false;\n      }\n    }\n    else {\n      set.currentSelectedCount--;\n    }\n    this.checkMinimumSelections()\n  }\n\n  // More complicated logic for sortable sets to move the selected item to the bottom of the selected area.\n  onChecked(i: number, isChecked: boolean, setIndex: number){\n    const set = this.internalSelectionSets[setIndex];\n    set.selectionSet[i].selected = isChecked;\n    console.log(i, isChecked,set.selectionSet[i].selected); // {}, true || false\n    if(isChecked) {\n      if (set.currentSelectedCount < set.maxSelections){\n        moveItemInArray(set.selectionSet, i, set.currentSelectedCount - set.selectedAndNotDraggabledCount);\n        set.currentSelectedCount++;\n      } // else  condition is not necessary as this code is never triggered due to disabling selections.\n      else {\n        set.selectionSet[i].selected = false;\n      }\n    }\n    else {\n      set.currentSelectedCount--;\n      //console.log(set);\n      moveItemInArray(set.selectionSet, i, set.currentSelectedCount - set.selectedAndNotDraggabledCount);\n    }\n    this.checkMinimumSelections()\n  }\n\n  // This function is to diable save if minimum selections are not done for the multiset.\n  checkMinimumSelections(){\n    if(this.minimumSelections <= 0) {\n      this.disableSave = false;\n      return;\n    }\n    let totalCount = 0;\n    this.internalSelectionSets.forEach(set => {\n      totalCount = totalCount + set.currentSelectedCount;\n    });\n    if(totalCount < this.minimumSelections) this.disableSave = true;\n    else this.disableSave = false;\n  }\n\n  showHideSelectionDetails(selection: MultiSelectSelection){\n    if(selection.showDetails) selection.showDetails = false;\n    else selection.showDetails = true; \n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/* settings the colors for the arrows to be consistent and not use link colors*/\r\na {\r\n  cursor: pointer;\r\n  text-decoration: none;\r\n}\r\n\r\na:not([href]):not([tabindex]), a:not([href]):not([tabindex]):focus, a:not([href]):not([tabindex]):hover {\r\n  color: inherit;\r\n  text-decoration: none;\r\n}\r\n\r\n/* Each set gets its own div to control spacing. */\r\n.set-box {\r\n  margin-top: 5px;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n/*Item box is used for sortable sets for each item separately.*/\r\n.item-box {\r\n  padding:7px 10px;\r\n  margin-right: 4px;\r\n  margin-bottom: 5px;\r\n  border: solid 1px rgba(0, 0, 0, 0.2);\r\n  border-radius: 4px; /*This can be made brandable if necessary.*/\r\n  color: rgba(0, 0, 0, 0.87);\r\n  display: flex;\r\n  flex-direction: column; /*This is necessary for when details need to be shown for each item.*/\r\n  align-items: stretch;\r\n  justify-content: space-around;\r\n  box-sizing: border-box;\r\n  background: white;\r\n  font-size: 12px;\r\n  min-height: 34px;\r\n  overflow-x: hidden;/*This is necessary to get the details sections to the edge of the item box.*/\r\n}\r\n/*Items in a sortable set that are actually draggable are given the sortable box class to enable different icon.*/\r\n.sortable-box {\r\n  cursor: move;\r\n}\r\n.sortable-box:hover {\r\n  border: 1px solid #E6E6E6;\r\n  background-color: #E6E6E6;\r\n  box-shadow: 1px 1px 4px 0 rgba(0, 0, 0, 0.29)\r\n}\r\n/*These classes are used while dragging an item and are coming from the cdkDrag component. Class names cannot be changed.*/\r\n.cdk-drag-preview {\r\n  box-sizing: border-box;\r\n  border-radius: 4px;\r\n  box-shadow: 0 5px 5px -3px rgba(0, 0, 0, 0.2),\r\n              0 8px 10px 1px rgba(0, 0, 0, 0.14),\r\n              0 3px 14px 2px rgba(0, 0, 0, 0.12);\r\n}\r\n\r\n.cdk-drag-placeholder {\r\n  opacity: 0;\r\n}\r\n\r\n.cdk-drag-animating {\r\n  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\r\n}\r\n\r\n.sortable-list.cdk-drop-list-dragging .sortable-box:not(.cdk-drag-placeholder) {\r\n  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\r\n}\r\n\r\n/*These next few settings are to set the spacings properly and the colors for the different elements of an item.*/\r\n.sortable-item-input{\r\n  margin-top: 0px;\r\n}\r\n.item-box .row-box .selection-name{\r\n  margin-left: 10px !important;\r\n  font-size: 12px;\r\n  color: #333333;\r\n  margin-top: -2px;\r\n}\r\n.item-box .row-box .fa-grip-vertical{\r\n  margin-right: 15px;\r\n  color:#686666;\r\n  font-size: 12px;\r\n}\r\n.arrow-icon{\r\n  font-size: 12px;\r\n  color:#686666;\r\n  margin-left: 10px;\r\n}\r\n.arrows {\r\n  width: 50px;\r\n  float: right;\r\n  margin-top: 2px;\r\n}\r\n.arrows a{\r\n  text-align: right;\r\n}\r\n/*\r\n.item-box  .rowBox .arrows a{\r\n  margin-left: 10px;\r\n}\r\n*/\r\n.disabled-icon {\r\n  opacity: 25% !important;\r\n}\r\n\r\n.hidden-icon {\r\n  visibility: hidden;\r\n}\r\n.main-selection { /*Main selection is used for a sortable item that is draggable only. The width allows the arrows to be next to each other.*/\r\n  width: 155px;\r\n}\r\n\r\n/*Set headings are shown with set name and maximum selections if applicable.*/\r\n.set-name {\r\n  font-weight: bold;\r\n  font-size: 13px;\r\n  padding-left: 0px;\r\n  flex-basis: 0;\r\n  flex-grow: 1;\r\n  max-width: 100%;\r\n}\r\n.max-selections{\r\n  font-size: 12px;\r\n  text-align: right;\r\n  margin-right: 4px;\r\n  padding: 0px;\r\n  flex: 0 0 50%;\r\n  max-width: 40%;\r\n  float: right;\r\n}\r\n.set-name-row {\r\n  align-items: center;\r\n  justify-content: space-between;\r\n}\r\n\r\n/*hr is used only to separate sets. \r\nThis hr is not always visible.\r\nThis is visible only when there are more than one set and \r\nthe set has no name and max selections equal the number of items sent in the set.*/\r\nhr {\r\n  margin-top: 8px;\r\n  margin-bottom: 10px;\r\n  height: 1px;\r\n}\r\n\r\n/*These next few classes are to stlye the details of an item correctly.*/\r\n.sub-detail {\r\n  padding: 5px 5px 5px 50px;\r\n  border-top: solid 1px rgba(0, 0, 0, 0.2);\r\n  font-size: 12px;\r\n  min-height: 29px;\r\n}\r\n.sub-selection-input {\r\n  margin-left: 10px;\r\n  margin-top: 3px;\r\n  font-size: 12px;\r\n}\r\n\r\n.sub-detail-main-box {/*This class is used to remove the padding from the item box so that the detail section can have end to end color and border on top.*/\r\n  margin: 7px 0 -7px -10px;\r\n  width: calc(1200% + 20px);\r\n}\r\n.link-pointer{\r\n  cursor: pointer;\r\n}\r\n.link-pointer .fas{\r\n  font-size: 14px;\r\n  margin-top: 3px;\r\n}\r\n.sub-detail-selection-name{\r\n  margin-left: 10px !important;\r\n  font-size: 12px;\r\n  color: #333333;\r\n  width: 165px;\r\n}\r\n\r\n.details-showing {\r\n  background-color: #E6E6E6;\r\n}\r\n/*This is the third level of details within an item.*/\r\n.sub-detail-selection-details {\r\n  border-top: 1px solid #CCCCCC;\r\n  padding-left: 100px;\r\n  background-color: #F6F6F6;\r\n  height: 30px;\r\n  display: flex;\r\n  align-items: center;\r\n  font-size: 12px;\r\n}\r\n\r\n/*This property is set to ensure that the minimum width of the box is 130 px when the multi select is not being shown.*/\r\n.customDropdown {\r\n  min-width: 130px;\r\n}\r\n\r\n/*These properties set the overall properties of the dialog box*/\r\n.dialog-overlay {\r\n  background-color: white;\r\n}\r\n.content-area{\r\n  overflow-y: auto;\r\n}\r\n/*ng-deep is a special angular selector that might be deprecated.\r\nIf so please move this to the application level CSS. The class names have been made sepcific to make it work without issues*/\r\n::ng-deep .multi-select-dialog-panel .mat-dialog-container {\r\n  padding: 10px !important;\r\n  box-shadow: 0 1px 6px 0 rgba(0,0,0,0.3);\r\n  overflow: unset;\r\n}\r\n\r\n/* Custome Scrollbar for Div Starts */\r\ndiv::-webkit-scrollbar, .mat-dialog-content::-webkit-scrollbar {\r\n  width: 8px;\r\n}\r\n\r\n/* Track */\r\ndiv::-webkit-scrollbar-track, .mat-dialog-content::-webkit-scrollbar-track {\r\n  background: #f7f7f7;\r\n              \r\n} \r\n/* Handle */\r\ndiv::-webkit-scrollbar-thumb, .mat-dialog-content::-webkit-scrollbar-thumb {\r\n  background: #b2b2b2;\r\n}\r\ndiv::-webkit-scrollbar-thumb:window-inactive, .mat-dialog-content::-webkit-scrollbar-thumb:window-inactive  {\r\n  background: #b2b2b2;\r\n}\r\n/* Custome Scrollbar for Div Ends */\r\n\r\n/*Non sortable items are styled with non sortable box.*/\r\n.non-sortable-box{\r\n  border-top: 1px solid rgba(0,0,0,0.2);\r\n  padding: 5px 0px 5px 10px;\r\n  margin-right: 4px;\r\n  color: rgba(0, 0, 0, 0.87);\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  min-height: 24px;\r\n}\r\n.non-sortable-item-input{\r\n  margin-bottom: 4px;\r\n  margin-top: 2px;\r\n}\r\n.non-sortable-selection-name{\r\n  margin-left: 10px;\r\n  font-size: 12px;\r\n}\r\n\r\n/*Utility classes*/\r\n.row-box {\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: flex-start;\r\n  margin-top: 3px;\r\n}\r\n\r\n.justify-between{\r\n  justify-content: space-between;\r\n}\r\n\r\n.multi-select-ml-1 {\r\n  margin-left:   0.25rem !important; \r\n}\r\n/*\r\n.multi-select-ml-2 {\r\n  margin-left:   0.5rem !important; \r\n}\r\n.multi-select-ml-3 {\r\n  margin-left:   0.75rem !important; \r\n}\r\n.multi-select-mr-1 {\r\n  margin-right:   0.25rem !important; \r\n}*/\r\n.multi-select-mt-3 {\r\n  margin-top: 0.75rem !important;\r\n}\r\n.multi-select-mb-1 {\r\n  margin-bottom: 5px;\r\n}\r\n\r\n\r\n/* Unused classes to be removed after next build.\r\n.name {\r\n  font-size: 14px;\r\n}\r\n.sortable-list {\r\n  min-height: 30px;\r\n  border-width: 0px;\r\n  display: block;\r\n  background: white;\r\n  border-radius: 4px;\r\n  overflow: hidden;\r\n}\r\n*/",
                    "styleUrl": "./multi-selection.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog"
                    }
                ],
                "line": 57,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<div  class=\"customDropdown\" (click)=\"show(dialog)\" #myButton>\n  <span>{{name}}</span>\n  <i class=\"fas fa-caret-down multi-select-ml-1\"></i>\n</div>\n\n<ng-template #dialog>\n  <div class=\"content-area\" [style.maxHeight]=\"innerContentDivHeight + 'px'\" (window:resize)=\"onResize($event)\">\n    <div class=\"set-box\" *ngFor=\"let set of internalSelectionSets; index as setIndex\">\n      <div class=\"container-fluid\" *ngIf=\"set.name || set.maxSelections < set.selectionSet.length\">\n        <div class=\"row set-name-row multi-select-mb-1\" [class.multi-select-mt-3]=\"setIndex !==0\">\n          <div class=\"set-name\" >{{set.name}} </div>\n          <div class=\"max-selections\" *ngIf=\"set.maxSelections < set.selectionSet.length\">Select up to {{set.maxSelections}}</div>\n        </div>\n      </div>\n      <!--This section is for non sortable listing. The look is different for this section with each row not being covered by a box etc and shorter selection items-->\n      <ng-container *ngIf=\"!set.sortable\">\n        <ng-container *ngFor=\"let selection of set.selectionSet; index as i\">\n          <div class=\"non-sortable-box\" [style.border-width]=\"(i === 0 && !(set.name || set.maxSelections < set.selectionSet.length))?'0':'1px'\">\n            <input class=\"non-sortable-item-input\" type=\"checkbox\" [disabled]=\"selection.disabled || (!selection.selected && set.currentSelectedCount === set.maxSelections)\" [ngModel]=\"selection.selected\" (ngModelChange)=\"onCheckedNonSortable(i, $event,setIndex)\">\n            <div class=\"non-sortable-selection-name\">{{selection.name}}</div>\n          </div>\n        </ng-container>\n      </ng-container>\n      <!--The next three divs are sortable listings. The look for all of them includes a box item-box class.-->\n      <!--First section is for the items in the sortable list that are selected but disabled and not draggable.-->\n      <!--Second section is for the draggble items. The items shown here have been sorted as per the setCurrentSelections function-->        \n      <!--Third section is for those items that are not draggable and are not disabled.-->\n      <!--Note items sent in with the settings of not selected, and disabled are not shown in any of the three sections.-->\n      <div *ngIf=\"set.sortable\">\n        <div *ngFor=\"let selection of set.selectionSet; index as i\">\n          <div class=\"item-box\" *ngIf=\"set.sortable && selection.disabled && selection.selected && !selection.draggable\">\n            <div class=\"row-box\">\n              <i class=\"fas fa-grip-vertical hidden-icon\" ></i>\n              <input class=\"sortable-item-input\" type=\"checkbox\" [disabled]=\"selection.disabled || (!selection.selected && set.currentSelectedCount === set.maxSelections)\" [ngModel]=\"selection.selected\" (ngModelChange)=\"onCheckedNonSortable(i, $event,setIndex)\">\n              <div class=\"selection-name\">{{selection.name}}</div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <!--hr *ngIf=\"set.sortable && set.sortableEndCount !== set.selectionSet.length\"-->\n      <div cdkDropList class=\"sortable-list\" (cdkDropListDropped)=\"drop($event, setIndex)\" *ngIf=\"set.sortable && set.sortableEndCount !== 0\">\n        <div *ngFor=\"let selection of set.selectionSet; index as i\">\n          <div class=\"item-box\" [class.sortable-box]=\"selection.selected || set.currentSelectedCount < set.maxSelections\" \n          *ngIf=\"selection.draggable\" \n          cdkDrag [cdkDragDisabled]=\"(!selection.draggable || (!selection.selected  && set.currentSelectedCount >= set.maxSelections))\">\n            <div class=\"row-box justify-between\">\n              <div class=\"row-box\">\n                <i class=\"fas fa-grip-vertical\" [class.disabledIcon]=\"!selection.selected && set.currentSelectedCount >= set.maxSelections\" ></i>\n                <input class=\"sortable-item-input\" type=\"checkbox\" [disabled]=\"selection.disabled || (!selection.selected && set.currentSelectedCount == set.maxSelections)\" [ngModel]=\"selection.selected\" (ngModelChange)=\"onChecked(i, $event, setIndex)\">\n                <div class=\"selection-name main-selection\">{{selection.name}}</div>\n              </div>\n              <div class=\"arrows multi-select-mr-1\">\n                <!--The logic in this section is dependent on the sort order of the sortable set.-->\n                <a *ngIf=\"i  >  0 && ( selection.selected || set.currentSelectedCount <  set.maxSelections)\" (click)=\"validateAndMove(set,i,i-1)\"><i class=\"arrow-icon fas fa-arrow-up multi-select-mr-2\"></i></a>\n                <a *ngIf=\"i === 0 || (!selection.selected && set.currentSelectedCount >= set.maxSelections)\"><i class=\"arrow-icon fas fa-arrow-up disabled-icon multi-select-mr-2\"></i></a>\n                <!--The logic below is to show the disabled arrow if it is the last of the sortable items or the item is not selected and max selections have been done or item is selected as well as the index is not equal to the max number of selections  excluding the disabled and selected items-->\n                <a *ngIf=\"(i === (set.sortableEndCount -1 ) || (!selection.selected && set.currentSelectedCount === set.maxSelections) || ( selection.selected && i === (set.maxSelections - set.selectedAndNotDraggabledCount - 1)))\"><i class=\"arrow-icon fas fa-arrow-down disabled-icon\"></i></a>\n                <!--The logic below is the opposite of when to show an enabled arrow-->\n                <a *ngIf=\"(i !== (set.sortableEndCount -1 ) && ( selection.selected || set.currentSelectedCount  <  set.maxSelections) && (!selection.selected || i  <  (set.maxSelections - set.selectedAndNotDraggabledCount - 1)))\" (click)=\"validateAndMove(set,i,i+1)\"><i class=\"arrow-icon fas fa-arrow-down\"></i></a>\n              </div>\n            </div>              \n            <ng-container \n              [ngTemplateOutlet]=\"subSelections\" \n              [ngTemplateOutletContext]=\"{parentSelection: selection}\">\n            </ng-container>\n          </div>\n        </div>\n      </div>\n      <!--This section is a repeat of the code above for non sortable section so that we can put the disabled, unchecked items at the bottom of the set.-->\n      <div *ngIf=\"set.sortable\">\n        <div *ngFor=\"let selection of set.selectionSet; index as i\">\n          <div class=\"item-box\" *ngIf=\"(set.sortable && !selection.draggable && !selection.disabled)\">\n            <div class=\"row-box\">\n              <i class=\"fas fa-grip-vertical hidden-icon\" ></i>\n              <input class=\"sortable-item-input\" type=\"checkbox\" [disabled]=\"selection.disabled || (!selection.selected && set.currentSelectedCount == set.maxSelections)\" [ngModel]=\"selection.selected\" (ngModelChange)=\"onCheckedNonSortable(i, $event,setIndex)\">\n              <div class=\"selection-name\">{{selection.name}}</div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <hr *ngIf=\"setIndex !== internalSelectionSets.length - 1 && (setIndex < internalSelectionSets.length - 1 && !internalSelectionSets[setIndex+1].name)\">\n    </div> <!--Set End-->\n  </div> <!-- Content Div End-->\n  <div class=\"button_row_popup\">\n    <input type=\"submit\" value=\"Apply\"  title=\"Apply\" class=\"btn\" (click)=\"save()\" [disabled]=\"disableSave\">\n    <input type=\"submit\" value=\"Cancel\" title=\"Cancel\" class=\"btn neg\" (click)=\"cancel()\">\n  </div>\n</ng-template>\n\n<!--This section is to be used only for the sub section-->\n<ng-template #subSelections let-parentSelection='parentSelection'>\n  <div *ngIf=\"parentSelection.selected && parentSelection.subSelections\" class=\"sub-detail-main-box\">\n    <ng-container *ngFor=\"let selection of parentSelection.subSelections; index as i\">\n      <div class=\"sub-detail row-box\" [class.details-showing]=\"selection.showDetails\" >\n        <div class=\"link-pointer\" *ngIf=\"selection.selectionDetails && !selection.showDetails\" (click)=\"showHideSelectionDetails(selection)\"><i class=\"multi-select-ml-1 fas fa-plus-circle\" ></i></div>\n        <div class=\"link-pointer\" *ngIf=\"selection.selectionDetails &&  selection.showDetails\" (click)=\"showHideSelectionDetails(selection)\"><i class=\"multi-select-ml-1 fas fa-minus-circle\"></i></div>\n        <div *ngIf=\"!selection.selectionDetails\"> <i class=\"hidden-icon multi-select-ml-1 fas fa-minus-circle\"></i></div>\n        <input class=\"sub-selection-input\" type=\"checkbox\" [disabled]=\"selection.disabled\" [(ngModel)]=\"selection.selected\" >\n        <div class=\"sub-detail-selection-name\">{{selection.name}}</div>\n      </div>\n      <ng-container *ngIf=\"selection.selectionDetails && selection.showDetails\">\n        <ng-container *ngFor=\"let detail of selection.selectionDetails\">\n          <div class=\"sub-detail-selection-details\">{{detail}}</div>\n        </ng-container>\n      </ng-container>\n    </ng-container>\n  </div>\n</ng-template>"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-cca1a8911321fa17756ce90c90de65cc",
            "file": "stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 66,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 72,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nh2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\np {\n  margin: 1em 0;\n}\n\na {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nli {\n  margin-bottom: 8px;\n}\n\n.tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "ReportBuilderComponent",
            "id": "component-ReportBuilderComponent-b0f096f1a278519ba927a0514bae5dbe",
            "file": "projects/report-builder/src/app/page/report-builder/report-builder.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-report-builder",
            "styleUrls": [
                "./report-builder.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./report-builder.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "components",
                    "defaultValue": "[]",
                    "type": "Array<GridsterItem>",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "gridWidth",
                    "defaultValue": "1100",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "message",
                    "defaultValue": "{\n    messageDesc:  '',\n    messageType: MessageType.INFORM\n  }",
                    "type": "SimpleMessage",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "MessageType",
                    "defaultValue": "MessageType",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "moveItemInArray",
                    "defaultValue": "moveItemInArray",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "pageType",
                    "defaultValue": "PageType.SinglePage",
                    "type": "PageType",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "PageType",
                    "defaultValue": "PageType",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "portraitOrientation",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "resizeEvent",
                    "defaultValue": "new EventEmitter<any>()",
                    "type": "EventEmitter<any>",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "sections",
                    "defaultValue": "[]",
                    "type": "Section[]",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "SectionType",
                    "defaultValue": "SectionType",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "showComponents",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "timerId",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 37
                }
            ],
            "methodsClass": [
                {
                    "name": "addNewSection",
                    "args": [
                        {
                            "name": "type",
                            "type": "SectionType"
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "SectionType",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeOrientation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84
                },
                {
                    "name": "changePageType",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120
                },
                {
                    "name": "deleteSection",
                    "args": [
                        {
                            "name": "section",
                            "type": "Section"
                        },
                        {
                            "name": "index",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "jsdoctags": [
                        {
                            "name": "section",
                            "type": "Section",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dragStartHandler",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent"
                        },
                        {
                            "name": "index",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57
                },
                {
                    "name": "showHideTiles",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95
                },
                {
                    "name": "showMessage",
                    "args": [
                        {
                            "name": "message",
                            "type": "SimpleMessage"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "SimpleMessage",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateOptions",
                    "args": [
                        {
                            "name": "options",
                            "type": "Safe"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "Safe",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, EventEmitter } from '@angular/core';\nimport { GraphReportBuilderComponent } from '../../component/graph-report-builder/graph-report-builder.component';\nimport { HoldingsReportBuilderComponent } from '../../component/holdings-report-builder/holdings-report-builder.component';\nimport { FooterReportBuilderComponent } from '../../component/footer-report-builder/footer-report-builder.component';\nimport { HeaderReportBuilderComponent } from '../../component/header-report-builder/header-report-builder.component';\nimport { SummaryComponent } from '../../component/summary/summary.component';\nimport { GraphTableReportBuilderComponent } from '../../component/graph-table-report-builder/graph-table-report-builder.component';\nimport { Safe, Section, SectionType, PageType } from './section';\nimport { MessageType, SimpleMessage } from '../../common/messaging/messaging.component';\nimport { moveItemInArray } from '@angular/cdk/drag-drop';\nimport {\n  GridsterItem,\n  GridsterItemComponentInterface,\n} from 'angular-gridster2';\nimport { ActivatedRoute } from '@angular/router';\nimport { isUndefined, isNull } from 'util';\n\n@Component({\n  selector: 'app-report-builder',\n  templateUrl: './report-builder.component.html',\n  styleUrls: ['./report-builder.component.scss']\n})\nexport class ReportBuilderComponent implements OnInit {\n  portraitOrientation: boolean = false;\n  pageType: PageType = PageType.SinglePage;\n  gridWidth: number = 1100;\n  sections: Section[] = [];\n  resizeEvent: EventEmitter<any> = new EventEmitter<any>();\n  showComponents = true;\n  components: Array<GridsterItem> = [];\n  message: SimpleMessage = {\n    messageDesc:  '',\n    messageType: MessageType.INFORM\n  };\n\n  MessageType = MessageType;\n  timerId: any;\n  SectionType = SectionType;\n  PageType = PageType;\n  moveItemInArray = moveItemInArray;\n\n  constructor( private route: ActivatedRoute) {\n    // Initialize componenets that can be added.\n    this.components = [\n      {cols: 4, rows: 2, y: 0, x: 0, hasContent: true,  dragEnabled: true, resizeEnabled: true, delete: true, label: 'Summary', type: SummaryComponent, edit: true},\n      {cols: 6, rows: 2, y: 0, x: 0, hasContent: true,  dragEnabled: true, resizeEnabled: true, delete: true, label: 'Multi Page Holdings', type: HoldingsReportBuilderComponent, edit: true},\n      {cols: 3, rows: 2, y: 0, x: 0, hasContent: true,  dragEnabled: true, resizeEnabled: true, delete: true, label: 'Graph', type: GraphReportBuilderComponent, edit: true},\n      {cols: 4, rows: 2, y: 0, x: 0, hasContent: true,  dragEnabled: true, resizeEnabled: true, delete: true, label: 'Graph and Table', type: GraphTableReportBuilderComponent, edit: true},\n      {cols: 6, rows: 2, y: 0, x: 0, hasContent: true,  dragEnabled: true, resizeEnabled: true, delete: true, label: 'Multi Page Holdings', type: HoldingsReportBuilderComponent, edit: true},\n      {cols: 3, rows: 2, y: 0, x: 0, hasContent: true,  dragEnabled: true, resizeEnabled: true, delete: true, label: 'Graph', type: GraphReportBuilderComponent, edit: true},\n      {cols: 4, rows: 2, y: 0, x: 0, hasContent: true,  dragEnabled: true, resizeEnabled: true, delete: true, label: 'Graph and Table', type: GraphTableReportBuilderComponent, edit: true},\n      {cols: 6, rows: 2, y: 0, x: 0, hasContent: true,  dragEnabled: true, resizeEnabled: true, delete: true, label: 'Multi Page Holdings', type: HoldingsReportBuilderComponent, edit: true},\n      {cols: 3, rows: 2, y: 0, x: 0, hasContent: true,  dragEnabled: true, resizeEnabled: true, delete: true, label: 'Graph', type: GraphReportBuilderComponent, edit: true},\n    ];\n  }\n\n  ngOnInit(): void {\n    let headerSection: Section = new Section(SectionType.Header);\n    let footerSection: Section = new Section(SectionType.Footer);\n    // Setup header and footer.\n    headerSection.dashboard = [\n      {cols: headerSection.sectionOptions.maxCols, rows: 1, y: 0, x: 0, hasContent: true, dragEnabled: false, resizeEnabled: false, label: 'Header', delete: false,  type: HeaderReportBuilderComponent, edit: true},\n    ];\n    footerSection.dashboard = [\n      {cols: footerSection.sectionOptions.maxCols, rows: 1, y: 0, x: 0, hasContent: true, dragEnabled: false, resizeEnabled: false, label: 'footer', delete: false,  type: FooterReportBuilderComponent, edit: false},\n    ];\n  \n    this.sections.push(headerSection);\n    this.sections.push(footerSection);\n    this.changePageType();\n  }\n\n  dragStartHandler(event: DragEvent, index: number) {\n    event.dataTransfer.setData('Text', index.toString());\n    event.dataTransfer.dropEffect = 'copy';\n  }\n\n  updateOptions(options: Safe) {\n    if (options.api && options.api.optionsChanged) {\n      options.api.optionsChanged();\n    }\n  }\n\n  changeOrientation(){\n    this.portraitOrientation = !this.portraitOrientation;\n    if(this.portraitOrientation) {this.gridWidth = 850; }\n    else {this.gridWidth = 1100; }\n    this.sections.forEach(section => {\n      this.updateOptions(section.sectionOptions);\n      section.portraitOrientation = this.portraitOrientation;\n      section.gridLayoutChanged();\n    });\n  }\n\n  showHideTiles() {\n    this.showComponents = !this.showComponents;\n  }\n\n  addNewSection(type: SectionType, index?: number) {\n    if(isUndefined(index) || isNull(index) || index===0) index = this.sections.length-1;\n    const newSection = new Section(type);\n    newSection.dashboard = [];\n    newSection.sectionOptions.emptyCellDropCallback = newSection.emptyCellDrop.bind(newSection);\n    newSection.sectionOptions.draggable.stop = (item: GridsterItem, itemComponent: GridsterItemComponentInterface, event: MouseEvent) => {\n      this.resizeEvent.emit(item);\n      if(newSection.type === SectionType.Dynamic) setTimeout(newSection.checkLayoutForSection.bind(newSection), 1000);\n    };\n    newSection.sectionOptions.itemResizeCallback = (item) => {\n      this.resizeEvent.emit(item);\n      if(newSection.type === SectionType.Dynamic) setTimeout(newSection.checkLayoutForSection.bind(newSection), 1000);\n    };\n    newSection.sectionOptions.itemRemovedCallback = (item) => {\n      if(newSection.type === SectionType.Dynamic) setTimeout(newSection.checkLayoutForSection.bind(newSection), 1000);\n    };\n    newSection.components = this.components;\n    newSection.sectionOptions.gridSizeChangedCallback = (grid) => {newSection.gridSizeChanged(grid); }\n    this.sections.splice(index, 0, newSection);\n  }\n\n  changePageType() {\n    this.sections.splice(1, this.sections.length-2);\n    if (this.pageType === PageType.SinglePage) {\n      this.pageType = PageType.MultiPage;\n      this.addNewSection(SectionType.Dynamic);\n    } else {\n      this.pageType = PageType.SinglePage;\n      this.addNewSection(SectionType.Fixed);\n    }\n  }\n\n  showMessage(message: SimpleMessage) {\n    this.message = message;\n  }\n\n  deleteSection(section: Section, index: number) {\n    const location = this.sections.indexOf(section);\n    this.sections.splice(index,1);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '~@angular/material/theming';\r\n.icon {\r\n  max-width: 20px;\r\n}\r\n\r\n.gridsterStyles {\r\n  background-color: #333333;\r\n  overflow: hidden;\r\n}\r\n\r\n.hide-tiles {\r\n  font-size: 11px;\r\n  font-weight: 400;\r\n  color: #A29060\r\n}\r\n\r\n.show-tiles {\r\n  font-size: 11px;\r\n  font-weight: 400;\r\n  background-color: #A29060;\r\n  color: #FFF;\r\n}\r\n\r\nhr {\r\n  background: #A29060;\r\n  height: 1px;\r\n}\r\n\r\n.componentPreview {\r\n  width: 190px;\r\n  height: 190px;\r\n  border: solid 1px #ccc;\r\n  color: rgba(0, 0, 0, 0.87);\r\n  cursor: move;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  text-align: center;\r\n  background: #fff;\r\n  border-radius: 4px;\r\n  position: relative;\r\n  z-index: 5;\r\n  transition: box-shadow 200ms cubic-bezier(0, 0, 0.2, 1);\r\n  box-shadow: 0 3px 1px -2px rgba(0, 0, 0, 0.2),\r\n              0 2px 2px 0 rgba(0, 0, 0, 0.14),\r\n              0 1px 5px 0 rgba(0, 0, 0, 0.12);\r\n}\r\n\r\n.componentPreview:active {\r\n  box-shadow: 0 5px 5px -3px rgba(0, 0, 0, 0.2),\r\n              0 8px 10px 1px rgba(0, 0, 0, 0.14),\r\n              0 3px 14px 2px rgba(0, 0, 0, 0.12);\r\n}\r\n\r\n.componentContainer {\r\n  min-width: 230px;\r\n  max-width: 230px;\r\n  max-height: 100%;\r\n}\r\n.fixedPosition {\r\n  position: fixed;\r\n  overflow-y: auto;\r\n  max-height: 88vh;\r\n  border-right: 1px solid #333333;\r\n  padding-right: 10px;\r\n}\r\n.spacer {\r\n  min-width: 10px;\r\n}\r\n\r\n.controlsSection {\r\n  margin-left: -8px;\r\n  margin-right: -8px;\r\n  margin-top: -8px;\r\n  padding-top: 10px;\r\n  background-color: #FFFFFF;\r\n  position: sticky;\r\n  top: 0;\r\n  z-index: 20;\r\n}\r\n\r\n.report-builder {\r\n  min-height: 95vh;\r\n}\r\n\r\n.designer {\r\n  min-width: 1400px;\r\n}\r\n\r\n.editableArea {\r\n  background-color: #FBFBFB;\r\n  border-width: 1px;\r\n  border-style: dashed;\r\n  border-color: #979797;\r\n  padding: 10px;\r\n}\r\n.section {\r\n  background-color: #FBFBFB;\r\n  border-width: 1px;\r\n  border-style: dashed;\r\n  border-color: #979797;\r\n  border-top: none;\r\n  margin-left: 0px;\r\n  margin-right: 0px;\r\n}\r\n.simpleSection {\r\n  border: 1px dashed #979797;\r\n}\r\n.gridsterActions {\r\n  min-height: 30px;\r\n  margin-left: 0px;\r\n  margin-right: 0px;\r\n}\r\n\r\n.disabledIcon {\r\n  color: #BBBBBB\r\n}\r\n",
                    "styleUrl": "./report-builder.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"ml-3 mr-3 designer\">\n  <common-messaging class=\"mb-2\"\n  displayType=\"inpage\"\n    [message]=\"message\"\n  >\n  </common-messaging>\n  <div class=\"container-fluid report-builder rounded-lg p-2\">\n    <div class=\"row align-items-center controlsSection\">\n      <div class=\"col-auto\" *ngIf=\"showComponents\">\n        <button mat-stroked-button class=\"hide-tiles pl-2 pr-2\" (click)=\"showHideTiles()\">Hide Tiles&nbsp;&nbsp;<mdb-icon fas icon=\"angle-double-left\" size=\"lg\"></mdb-icon></button>\n      </div>\n      <div class=\"col-auto\" *ngIf=\"!showComponents\">\n        <button mat-stroked-button class=\"show-tiles pl-2 pr-2\" (click)=\"showHideTiles()\">Show Tiles&nbsp;&nbsp;<mdb-icon fas icon=\"angle-double-right\" size=\"lg\"></mdb-icon></button>\n      </div>\n      <div class=\"col-auto\">\n        Orientation:\n      </div>\n      <div class=\"col-auto\" *ngIf=\"!portraitOrientation\">\n        <button mat-stroked-button  (click)=\"changeOrientation()\">Landscape&nbsp;&nbsp;<mat-icon>arrow_drop_down</mat-icon></button>\n      </div>\n      <div class=\"col-auto\" *ngIf=\"portraitOrientation\">\n        <button mat-stroked-button  (click)=\"changeOrientation()\">Portrait&nbsp;&nbsp;<mat-icon>arrow_drop_down</mat-icon></button>\n      </div>\n      <div class=\"col-auto\">\n        Page Type:\n      </div>\n      <div class=\"col-auto\" *ngIf=\"pageType === PageType.SinglePage\">\n        <button mat-stroked-button  (click)=\"changePageType()\">Single Page&nbsp;&nbsp;<mat-icon>arrow_drop_down</mat-icon></button>\n      </div>\n      <div class=\"col-auto\" *ngIf=\"pageType === PageType.MultiPage\">\n        <button mat-stroked-button  (click)=\"changePageType()\">Multi Page&nbsp;&nbsp;<mat-icon>arrow_drop_down</mat-icon></button>\n      </div>\n      <div class=\"col-auto\" *ngIf=\"pageType === PageType.MultiPage\">\n        <button mat-stroked-button  (click)=\"addNewSection(SectionType.Dynamic)\">Add new section</button>\n      </div>\n      <div class=\"col\"> &nbsp;</div>\n      <div class=\"col-auto\">\n        <button mat-stroked-button class=\"show-tiles pl-2 pr-2 ml-1 mr-1\">Preview</button>\n        <app-save-report\n          [sections]=\"sections\"\n          [portraitOrientation]=\"portraitOrientation\"\n          [pageType]=\"pageType\"\n          (message)=\"showMessage($event)\"\n        ></app-save-report>\n        <button mat-stroked-button class=\"hide-tiles pl-2 pr-2 ml-1 mr-1\">Cancel</button>\n      </div>\n      <div class=\"col-12\">\n        <hr />\n      </div>\n    </div>\n    <div class=\"row justify-content-start\">\n      <div class=\"col-auto ml-3 pt-0 pl-0 pr-0 componentContainer\" *ngIf=\"showComponents\">\n        <div class=\"fixedPosition\">\n          <ng-container *ngFor=\"let component of components; index as i\">\n            <div class=\"componentPreview border mb-2 mt-2\" draggable=\"true\" (dragstart)=\"dragStartHandler($event, i)\">\n              {{component.label}}<br>\n              Minimum Columns: {{component.cols}}\n            </div>  \n          </ng-container>  \n        </div>\n      </div>\n      <div class=\"col-auto\">\n        <div class=\"editableArea\">\n          <ng-container *ngFor=\" let section of sections; index as i\">\n            <!--Section Component Grid-->\n            <div class=\"mt-2 mb-2\" *ngIf=\"section.type !== SectionType.Header && pageType === PageType.MultiPage\">\n              <button mat-stroked-button  (click)=\"addNewSection(SectionType.Dynamic,i)\">+Add New Section</button>\n            </div>\n            <div class=\"row justify-content-between align-items-center gridsterActions border\" *ngIf=\"section.type === SectionType.Dynamic || section.type === SectionType.Fixed\">\n              <div class=\"col-auto\">\n                <span  *ngIf=\"section.hasLayoutError\">Error! The Section below has components laid out in a way that cannot be rendered. Make sure components are aligned.</span>\n              </div>\n              <div class=\"col-auto\">\n                <ng-container *ngIf=\"pageType === PageType.MultiPage\">\n                  <a *ngIf=\"i > 1\" (click)=\"moveItemInArray(sections,i,i-1)\"><i class=\"fa fa-arrow-up\"></i></a>\n                  <a *ngIf=\"i <= 1\"><i class=\"fa fa-arrow-up disabledIcon\"></i></a>\n                  &nbsp;&nbsp;\n                  <a *ngIf=\"(i < (sections.length - 2))\" (click)=\"moveItemInArray(sections,i+1,i)\"><i class=\"fa fa-arrow-down\"></i></a>\n                  <a *ngIf=\"(i === (sections.length - 2))\"><i class=\"fa fa-arrow-down disabledIcon\"></i></a>\n                  <a class=\" ml-4 pl-4 border-left\" (click)=\"deleteSection(section,i)\"><i class=\"fa fa-trash-alt\" ></i> Remove Section</a>  \n                </ng-container>\n              </div>\n            </div>\n            <div class=\"row section mt-2 mb-2\" [class.simpleSection]=\"section.type === SectionType.Header || section.type === SectionType.Footer\">\n              <div class=\"col-auto p-1 m-0\" [style.min-width.px]=\"gridWidth\" [style.max-width.px]=\"gridWidth\" [style.min-height.px]=\"section.height\" [style.max-height.px]=\"section.height\">\n                <gridster [options]=\"section.sectionOptions\" class=\"gridsterStyles\">\n                  <gridster-item [item]=\"item\" *ngFor=\"let item of section.dashboard\">\n                    <div class=\"container-fluid pl-0 pr-0\">\n                      <div class=\"d-flex justify-content-between row pl-0 pr-0 pt-1 pb-1 border-bottom gridsterActions\" style=\"position: relative\" *ngIf=\"item.dragEnabled || item.delete || item.edit\">\n                        <div class=\"item-buttons col-auto\">\n                          <a class=\"drag-handler\" *ngIf=\"item.dragEnabled\">\n                            <img class=\"icon\" src=\"assets/move.png\"/>\n                          </a>\n                        </div>\n                        <div class=\"item-buttons col-auto\">\n                          <a *ngIf=\"item.delete\" (mousedown)=\"section.removeItem($event, item)\"\n                            (touchstart)=\"section.removeItem($event, item)\">\n                            <img class=\"icon\" src=\"assets/remove.png\"/>\n                          </a>\n                        </div>\n                      </div>\n                      <div class=\"row\">\n                        <div *ngIf=\"!item.hasContent\" class=\"gridster-item-content col\">\n                          <textarea matInput rows=\"4\" placeholder=\"Label will be:\" class=\"font-weight-bold blue-text\">{{item.label}}</textarea>\n                        </div>\n                        <div *ngIf=\"item.hasContent\" class=\"gridster-item-content col\">\n                          <ndc-dynamic [ndcDynamicComponent]=\"item.type\"\n                            [ndcDynamicInputs]=\"{widget: item, resizeEvent: resizeEvent, portraitOrientation: portraitOrientation}\"\n                            [ndcDynamicOutputs]=\"item.outputs\"\n                          >\n                          </ndc-dynamic>\n                        </div>\n                      </div>\n                    </div>\n                  </gridster-item>\n                </gridster>\n              </div>\n            </div>\n            <!--End Section Component-->\n          </ng-container>  \n        </div>\n      </div>\n    </div>\n  </div>\n</div>"
        },
        {
            "name": "ReportListComponent",
            "id": "component-ReportListComponent-b1e3fbc7ed77e093db8c1c681b15452e",
            "file": "projects/report-builder/src/app/page/report-list/report-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-report-list",
            "styleUrls": [
                "./report-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./report-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "allReportPanelOpenState",
                    "defaultValue": "true",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "myReportPanelOpenState",
                    "defaultValue": "true",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "reportList",
                    "type": "ReportList",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "searchText",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "createNewReport",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                },
                {
                    "name": "editReport",
                    "args": [
                        {
                            "name": "reportId",
                            "type": ""
                        },
                        {
                            "name": "method",
                            "type": ""
                        },
                        {
                            "name": "reportType",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "jsdoctags": [
                        {
                            "name": "reportId",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "method",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "reportType",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ReportListService, ReportList } from './report-list.service';\nimport { Router, ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'app-report-list',\n  templateUrl: './report-list.component.html',\n  styleUrls: ['./report-list.component.scss']\n})\nexport class ReportListComponent implements OnInit {\n  reportList: ReportList;\n  myReportPanelOpenState: boolean = true;\n  allReportPanelOpenState: boolean = true;\n  searchText: string = '';\n\n  constructor(private service: ReportListService, private router: Router, private route: ActivatedRoute) { }\n\n  ngOnInit(): void {\n    this.service.getReportList().subscribe(\n      (reportList) => {\n        this.reportList = reportList;\n        console.log(reportList);\n      }\n    );\n  }\n\n  createNewReport() {\n    const navigationParams = {\n      reportId: 0,\n      method: 'C',\n      reportType: 'C'\n    };\n    this.router.navigate(['../design'], {relativeTo: this.route, skipLocationChange: false, replaceUrl: false, state: navigationParams});\n  }\n\n  editReport(reportId, method, reportType) {\n    const navigationParams = {\n      reportId,\n      method,\n      reportType\n    };\n    this.router.navigate(['../design'], {relativeTo: this.route, skipLocationChange: false, replaceUrl: false, state: navigationParams});\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".designer {\r\n  min-width: 1450px;\r\n}\r\n.sectionTitle {\r\n  font-size: 16px;\r\n  color: #333333;\r\n}\r\n\r\n.square {\r\n  float:left;\r\n  position: relative;\r\n  width: 100%;\r\n  padding-bottom: 100%; /* = width for a 1:1 aspect ratio */\r\n  margin:1.66%;\r\n  overflow:hidden;\r\n  background-color: #F3F3F3;\r\n}\r\n\r\n.squareContent {\r\n  position:absolute;\r\n  height:98%; /* = 100% - 2*10% padding */\r\n  width:96%; /* = 100% - 2*5% padding */\r\n  padding: 1% 2%;\r\n}\r\n\r\n.reportTitle {\r\n  width: 70%;\r\n  font-size: 12px;\r\n}\r\n\r\n.reportActions {\r\n  position: absolute;\r\n  right: 2px;\r\n  top: 10px;\r\n}\r\n\r\n.yellowStar {\r\n  color: yellow;\r\n}\r\n\r\n.searchBox{\r\n  width: 80%;\r\n}\r\n\r\n.searchIcon {\r\n  position: absolute;\r\n  right: 20px;\r\n  top: 5px;\r\n}",
                    "styleUrl": "./report-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "service",
                        "type": "ReportListService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "ReportListService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"ml-3 mr-3 designer\">\n  <div class=\"container-fluid report-builder rounded-lg p-2\">\n    <div class=\"row\">\n      <div class=\"col pl-2 border-right\">\n        <div class=\"row\">\n          <div class=\"col-auto\">\n            <div class=\"sectionTitle\">\n              <button mat-button *ngIf=\"!myReportPanelOpenState\" (click)=\"myReportPanelOpenState = true\"><mat-icon>add_circle</mat-icon></button>\n              <button mat-button *ngIf=\"myReportPanelOpenState\" (click)=\"myReportPanelOpenState = false\"><mat-icon>remove_circle</mat-icon></button>\n              My Reports ({{reportList.customReportCount}})\n            </div>\n          </div>\n          <div class=\"col\">&nbsp;</div>\n          <div class=\"col-auto\">\n            <input [(ngModel)]=\"searchText\" placeHolder=\"Search Reports\">\n          </div>\n          <div class=\"col-auto\">\n            <div class=\"thinButton\" (click)=\"createNewReport()\">Create New Report</div>\n          </div>\n        </div>\n        <div class=\"row\">\n          <div class=\"col ml-2\">\n            <mat-expansion-panel\n              [expanded]=\"myReportPanelOpenState\"\n              (opened)=\"myReportPanelOpenState = true\"\n              (closed)=\"myReportPanelOpenState = false\"\n              hideToggle>\n              <ng-container *ngFor=\"let category of reportList.categoryList\">\n                <div class=\"row\" *ngIf=\"(category.categoryId === 9999)\">\n                  <ng-container *ngFor=\"let report of category.reportsList | filterArray: 'reportName' : searchText\">\n                    <div class=\"col-3\">\n                      <div class=\"square\">\n                        <div class=\"squareContent\">\n                          <div class=\"reportTitle pl-1 pt-2\">{{report.reportName}}</div>\n                          <div class=\"reportActions\">\n                            <a><i class=\"fas fa-star pr-2\" [class.orange-text]=\"(report.popularReport === 'Y' || report.reportType === 'C')\"></i></a>\n                            <a (click)=\"editReport(report.reportId, 'U', 'C')\"><i class=\"fas fa-pencil-alt\"></i></a>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </ng-container>\n                </div>\n              </ng-container>\n            </mat-expansion-panel>\n          </div>\n        </div>\n        <div class=\"row\">\n          <div class=\"col-auto\">\n            <div class=\"sectionTitle\">\n              <button mat-button *ngIf=\"!allReportPanelOpenState\" (click)=\"allReportPanelOpenState = true\"><mat-icon>add_circle</mat-icon></button>\n              <button mat-button *ngIf=\"allReportPanelOpenState\" (click)=\"allReportPanelOpenState = false\"><mat-icon>remove_circle</mat-icon></button>\n              Base Reports ({{reportList.totalReportCount}})\n            </div>\n          </div>\n        </div>\n        <div class=\"row\">\n          <div class=\"col ml-2\">\n            <mat-expansion-panel\n              [expanded]=\"allReportPanelOpenState\"\n              (opened)=\"allReportPanelOpenState = true\"\n              (closed)=\"allReportPanelOpenState = false\"\n              hideToggle>\n              <mat-tab-group animationDuration=\"0ms\">\n                <ng-container *ngFor=\"let category of reportList.categoryList\">\n                  <ng-container *ngIf=\"!(category.categoryId === 9999) && (category.reportsList | filterArray: 'reportName' : searchText).length !== 0\">\n                    <mat-tab label=\"{{category.categoryName}}\">\n                      <div class=\"row\">\n                        <ng-container *ngFor=\"let report of category.reportsList | filterArray: 'reportName' : searchText\">\n                          <div class=\"col-3\">\n                            <div class=\"square\">\n                              <div class=\"squareContent\">\n                                <div class=\"reportTitle pl-1 pt-2\">{{report.reportName}}</div>\n                                <div class=\"reportActions\">\n                                  <a><i class=\"fas fa-star pr-2\" [class.orange-text]=\"(report.popularReport === 'Y' || report.reportType === 'C')\"></i></a>\n                                  <a (click)=\"editReport(report.reportId, 'U', 'C')\"><i class=\"fas fa-pencil-alt\"></i></a>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                        </ng-container>    \n                      </div>\n                    </mat-tab>\n                  </ng-container>\n                </ng-container>\n              </mat-tab-group>\n            </mat-expansion-panel>\n          </div>\n        </div>\n      </div>\n      <div class=\"col-2\">\n        <div class=\"border\">&nbsp;\n          <input name=\"text\" type=\"text\" readonly placeholder=\"Report Name\" autocomplete=\"off\" class=\"border border-0 searchBox\">\n          <i class=\"fas fa-search searchIcon\"></i>  \n        </div>\n      </div>\n    </div>\n  </div>\n</div>"
        },
        {
            "name": "SaveReportComponent",
            "id": "component-SaveReportComponent-dc2a92ee81d3449c2e0c9af1c91fa190",
            "file": "projects/report-builder/src/app/page/report-builder/save-report/save-report.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-save-report",
            "styleUrls": [
                "./save-report.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./save-report.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "pageType",
                    "line": 21,
                    "type": "PageType"
                },
                {
                    "name": "portraitOrientation",
                    "line": 18,
                    "type": "boolean"
                },
                {
                    "name": "sections",
                    "line": 15,
                    "type": "Section[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "message",
                    "defaultValue": "new EventEmitter<SimpleMessage>()",
                    "line": 24,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "dialog",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "reportSaveEnabled",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "checkIfReportCanBeSaved",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 60
                },
                {
                    "name": "ngDoCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34
                },
                {
                    "name": "save",
                    "args": [
                        {
                            "name": "dialogTemplate",
                            "type": "TemplateRef<any>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "jsdoctags": [
                        {
                            "name": "dialogTemplate",
                            "type": "TemplateRef<any>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveReort",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80
                },
                {
                    "name": "showMessage",
                    "args": [
                        {
                            "name": "type",
                            "type": "MessageType"
                        },
                        {
                            "name": "msg",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "MessageType",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "msg",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter, TemplateRef, DoCheck } from '@angular/core';\nimport { Section, PageType } from '../section';\nimport { MessageType, SimpleMessage } from '../../../common/messaging/messaging.component';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ReportService } from '../report.service';\n\n@Component({\n  selector: 'app-save-report',\n  templateUrl: './save-report.component.html',\n  styleUrls: ['./save-report.component.scss']\n})\nexport class SaveReportComponent implements OnInit, DoCheck {\n\n  @Input()\n  sections: Section[];\n\n  @Input()\n  portraitOrientation: boolean;\n\n  @Input()\n  pageType: PageType;\n\n  @Output()\n  message = new EventEmitter<SimpleMessage>();\n\n  reportSaveEnabled = true;\n\n  constructor(public dialog: MatDialog, private service: ReportService) { }\n\n  ngDoCheck() {\n    this.checkIfReportCanBeSaved();\n  }\n\n  ngOnInit(): void {\n  }\n\n  save(dialogTemplate: TemplateRef<any>) {\n    if (!this.reportSaveEnabled) {\n      this.showMessage(MessageType.ERROR, 'Report Has Errors');\n      return;\n    }\n    this.sections.forEach(section => {\n      console.log(JSON.stringify(section.dashboard));\n    });\n    const dialogRef = this.dialog.open(dialogTemplate);\n\n    dialogRef.afterClosed().subscribe(result => {\n      console.log(`Dialog result: ${result}`);\n      if( result === 'yes') {\n        this.saveReort();\n      } else{\n        this.showMessage(MessageType.INFORM, 'Report Not Saved');\n      }\n    });\n  \n\n  }\n\n\n  checkIfReportCanBeSaved(){\n    this.reportSaveEnabled = true;\n    for (let index = 0; index < this.sections.length; index++) {\n      const element = this.sections[index];\n      if (element.hasLayoutError){\n        this.reportSaveEnabled = false;\n        return this.reportSaveEnabled;\n      }\n      \n    }\n    return this.reportSaveEnabled;\n  }\n\n  showMessage(type: MessageType, msg: string) {\n    const message = new SimpleMessage();\n    message.messageDesc = msg;\n    message.messageType = type;\n    this.message.emit(message)\n  }\n\n  saveReort() {\n    this.service.saveReport().subscribe(\n      (returnMsg) => {\n        this.showMessage(MessageType.CONFIRM, 'Saved Successfully');\n      },\n      (err) => {\n        this.showMessage(MessageType.ERROR, 'Could Not Save Report');\n      }\n    );\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./save-report.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog"
                    },
                    {
                        "name": "service",
                        "type": "ReportService"
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "service",
                        "type": "ReportService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "DoCheck"
            ],
            "templateData": "<button mat-stroked-button class=\"show-tiles pl-2 pr-2 ml-1 mr-1\" (click)=\"save(dialog)\" *ngIf=\"reportSaveEnabled\">Save</button>\n<button mat-stroked-button class=\"show-tiles pl-2 pr-2 ml-1 mr-1\" disabled *ngIf=\"!reportSaveEnabled\">Save</button>\n\n<ng-template #dialog>\n  <h2 matDialogTitle>Dialog!</h2>\n  <mat-dialog-content>\n    <p>The content of this dialog came from an <code>ng-template</code>! Amazing, right?</p>\n  </mat-dialog-content>\n  <mat-dialog-actions align=\"end\">\n    <button mat-button matDialogClose=\"yes\" color=\"primary\">Save</button>\n    <button mat-button matDialogClose color=\"primary\">Cancel</button>\n  </mat-dialog-actions>\n</ng-template>"
        },
        {
            "name": "SummaryComponent",
            "id": "component-SummaryComponent-82e186cff5e8a6bdd7e75b7da328dcb4",
            "file": "projects/report-builder/src/app/component/summary/summary.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-summary",
            "styleUrls": [
                "./summary.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./summary.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "portraitOrientation",
                    "line": 13,
                    "type": "boolean",
                    "inheritance": {
                        "file": "BaseReportBuilderComponent"
                    }
                },
                {
                    "name": "resizeEvent",
                    "line": 11,
                    "type": "EventEmitter<any>",
                    "inheritance": {
                        "file": "BaseReportBuilderComponent"
                    }
                },
                {
                    "name": "widget",
                    "line": 9,
                    "type": "GridsterItem",
                    "inheritance": {
                        "file": "BaseReportBuilderComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "optionsOuput",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 7,
                    "type": "EventEmitter",
                    "inheritance": {
                        "file": "BaseReportBuilderComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "dialog",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "resizeSub",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "inheritance": {
                        "file": "BaseReportBuilderComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                },
                {
                    "name": "openDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { BaseReportBuilderComponent } from '../base-report-builder-component.class';\nimport { MatDialog } from '@angular/material/dialog';\nimport { SummaryCustomizationComponent } from './summary-customization.component';\n\n@Component({\n  selector: 'app-summary',\n  templateUrl: './summary.component.html',\n  styleUrls: ['./summary.component.scss']\n})\nexport class SummaryComponent extends BaseReportBuilderComponent implements OnInit {\n\n  constructor(public dialog: MatDialog) {\n    super();\n   }\n\n  ngOnInit(): void {\n  }\n\n  openDialog(): void {\n    const doc = document.documentElement;\n    const left = (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0);\n    const top = (window.pageYOffset || doc.scrollTop) - (doc.clientTop || 0);\n\n    if (top != 0 || left != 0) {\n      window.scrollTo({\n        top : 0,\n        left: 0\n      });\n    }\n   \n    const dialogRef = this.dialog.open(SummaryCustomizationComponent, {\n      disableClose: false,\n      width: '1100px',\n    });\n    dialogRef.afterClosed().subscribe(result => {\n      // Result is only sent when user does not click cancel.\n      if (top != 0 || left != 0) {\n        window.scroll({\n          top : top,\n          left : left\n        });\n      }\n    });\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../base-report-builder-component.scss';\r\n",
                    "styleUrl": "./summary.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseReportBuilderComponent",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"widget.edit\" class=\"edit\">\n  <a class=\"drag-handler\" (click)=\"openDialog()\">\n    <img class=\"icon\" src=\"assets/edit.png\"/>&nbsp;\n  </a>\n</div>\n<p>summary works!</p>\n"
        },
        {
            "name": "SummaryCustomizationComponent",
            "id": "component-SummaryCustomizationComponent-40d20bedb7d961978f456c22a1618f0f",
            "file": "projects/report-builder/src/app/component/summary/summary-customization.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-summary-customization",
            "styleUrls": [
                "./summary-customization.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./summary-customization.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "allData",
                    "defaultValue": "['Beginnning Value', 'Return', 'Ending Value', 'Realized Gain/Loss', 'Unrealized Gain/Loss']",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "baseOptions",
                    "defaultValue": "{\n    displayGrid: DisplayGrid.OnDragAndResize,\n    disableWarnings: true,\n    swap: true,\n    margin: 5,\n    outerMargin: true,\n    minCols: 3,\n    maxCols: 3,\n    minRows: 1,\n    maxRows: 3,\n    minItemCols: 1,\n    maxItemCols: 1,\n    minItemRows: 1,\n    maxItemRows: 1,\n    minItemArea: 1,\n    defaultItemCols: 1,\n    defaultItemRows: 1,\n    gridType: GridType.VerticalFixed,\n    fixedRowHeight: 40,\n    compactType: CompactType.CompactUp,\n    enableEmptyCellDrop: true,\n    enableOccupiedCellDrop: true,\n    pushItems: true,\n    pushResizeItems: true,\n    draggable: {\n      delayStart: 0,\n      enabled: true,\n      ignoreContentClass: 'gridster-item-content',\n      ignoreContent: false,\n      dragHandleClass: 'drag-handler',\n      dropOverItems: true,\n    },\n    resizable: {\n      enabled: false\n    },\n    emptyCellDropCallback: this.emptyCellDrop.bind(this),\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 132
                },
                {
                    "name": "dataInput",
                    "type": "ElementRef<HTMLInputElement>",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'dataInput'"
                        }
                    ]
                },
                {
                    "name": "dataInputCtrl",
                    "defaultValue": "new FormControl()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "dataInputTrigger",
                    "type": "MatAutocompleteTrigger",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'dataInput', {read: MatAutocompleteTrigger}"
                        }
                    ]
                },
                {
                    "name": "filteredData",
                    "type": "Observable<string[]>",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "matAutocomplete",
                    "type": "MatAutocomplete",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'auto'"
                        }
                    ]
                },
                {
                    "name": "option2AvailableData",
                    "defaultValue": "[ 'Beginnning Value', 'Return', 'Ending Value', 'Realized Gain/Loss', 'Unrealized Gain/Loss']",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 103
                },
                {
                    "name": "option2SelectedData",
                    "defaultValue": "['Net Contribution']",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 104
                },
                {
                    "name": "option3Available",
                    "defaultValue": "[\n    {cols: 1, rows: 1, y: 0, x: 0, hasContent: false,  dragEnabled: true, resizeEnabled: false, delete: true, label: 'Beginnning Value'},\n    {cols: 1, rows: 1, y: 0, x: 0, hasContent: false,  dragEnabled: true, resizeEnabled: false, delete: true, label: 'Return'},\n    {cols: 1, rows: 1, y: 0, x: 0, hasContent: false,  dragEnabled: true, resizeEnabled: false, delete: true, label: 'Ending Value'},\n    {cols: 1, rows: 1, y: 0, x: 0, hasContent: false,  dragEnabled: true, resizeEnabled: false, delete: true, label: 'Realized Gain/Loss'},\n    {cols: 1, rows: 1, y: 0, x: 0, hasContent: false,  dragEnabled: true, resizeEnabled: false, delete: true, label: 'Unrealized Gain/Loss'},\n    {cols: 1, rows: 1, y: 0, x: 0, hasContent: false,  dragEnabled: true, resizeEnabled: false, delete: true, label: 'Net Contributions'},\n  ]",
                    "type": "Array<GridsterItem>",
                    "optional": false,
                    "description": "",
                    "line": 177
                },
                {
                    "name": "option3Selected",
                    "defaultValue": "[]",
                    "type": "Array<GridsterItem>",
                    "optional": false,
                    "description": "",
                    "line": 185
                },
                {
                    "name": "removable",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "selectable",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "selectedData",
                    "defaultValue": "['Net Contribution']",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "separatorKeysCodes",
                    "defaultValue": "[ENTER, COMMA]",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "visible",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methodsClass": [
                {
                    "name": "_filter",
                    "args": [
                        {
                            "name": "value",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 95,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "event",
                            "type": "MatChipInputEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MatChipInputEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "add3",
                    "args": [
                        {
                            "name": "item",
                            "type": "GridsterItem"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 200,
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "GridsterItem",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addChip",
                    "args": [
                        {
                            "name": "dataPoint",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "jsdoctags": [
                        {
                            "name": "dataPoint",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dragStartHandler",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent"
                        },
                        {
                            "name": "index",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 187,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "drop",
                    "args": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<string[]>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<string[]>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "emptyCellDrop",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent"
                        },
                        {
                            "name": "item",
                            "type": "GridsterItem"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 169,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "GridsterItem",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "dataPoint",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "jsdoctags": [
                        {
                            "name": "dataPoint",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "remove3Item",
                    "args": [
                        {
                            "name": "$event",
                            "type": ""
                        },
                        {
                            "name": "item",
                            "type": "GridsterItem"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 191,
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "GridsterItem",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeChip",
                    "args": [
                        {
                            "name": "dataPoint",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "jsdoctags": [
                        {
                            "name": "dataPoint",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selected",
                    "args": [
                        {
                            "name": "event",
                            "type": "MatAutocompleteSelectedEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MatAutocompleteSelectedEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {COMMA, ENTER} from '@angular/cdk/keycodes';\nimport {Component, ElementRef, ViewChild} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {MatAutocompleteSelectedEvent, MatAutocomplete, MatAutocompleteTrigger} from '@angular/material/autocomplete';\nimport {MatChipInputEvent} from '@angular/material/chips';\nimport {Observable} from 'rxjs';\nimport {map, startWith} from 'rxjs/operators';\nimport {CdkDragDrop, moveItemInArray, transferArrayItem} from '@angular/cdk/drag-drop';\nimport {\n  DisplayGrid,\n  Draggable,\n  GridsterComponentInterface,\n  GridsterConfig,\n  GridsterItem,\n  GridType,\n  CompactType\n} from 'angular-gridster2';\n\nexport interface Safe extends GridsterConfig {\n  draggable: Draggable;\n}\n\n@Component({\n  selector: 'app-summary-customization',\n  templateUrl: './summary-customization.component.html',\n  styleUrls: ['./summary-customization.component.scss']\n})\nexport class SummaryCustomizationComponent {\n  visible = true;\n  selectable = true;\n  removable = true;\n  separatorKeysCodes: number[] = [ENTER, COMMA];\n  dataInputCtrl = new FormControl();\n  filteredData: Observable<string[]>;\n  selectedData: string[] = ['Net Contribution'];\n  allData: string[] = ['Beginnning Value', 'Return', 'Ending Value', 'Realized Gain/Loss', 'Unrealized Gain/Loss'];\n\n  @ViewChild('dataInput') dataInput: ElementRef<HTMLInputElement>;\n  @ViewChild('dataInput', { read: MatAutocompleteTrigger }) dataInputTrigger: MatAutocompleteTrigger;\n  \n  @ViewChild('auto') matAutocomplete: MatAutocomplete;\n\n  constructor() {\n    this.filteredData = this.dataInputCtrl.valueChanges.pipe(\n        startWith(null),\n        map((dataPoint: string | null) => dataPoint ? this._filter(dataPoint) : this.allData.slice()));\n  }\n\n  add(event: MatChipInputEvent): void {\n    const input = event.input;\n    const value = event.value;\n\n    // Add our datapoint\n    if ((value || '').trim()) {\n      const dataPoint = value.trim();\n      const index = this.allData.indexOf(dataPoint);\n  \n      if (index >= 0) {\n        transferArrayItem(this.allData,this.selectedData,index,this.selectedData.length)\n      }\n  \n      //this.selectedData.push(value.trim());\n    }\n\n    // Reset the input value\n    if (input) {\n      input.value = '';\n    }\n\n    this.dataInputCtrl.setValue(null);\n    this.dataInputTrigger.openPanel();\n  }\n\n  remove(dataPoint: string): void {\n    const index = this.selectedData.indexOf(dataPoint);\n\n    if (index >= 0) {\n      transferArrayItem(this.selectedData,this.allData,index,this.allData.length)\n      //this.selectedData.splice(index, 1);\n    }\n  }\n\n  selected(event: MatAutocompleteSelectedEvent): void {\n    const dataPoint = event.option.viewValue;\n    const index = this.allData.indexOf(dataPoint);\n\n    if (index >= 0) {\n      transferArrayItem(this.allData,this.selectedData,index,this.selectedData.length)\n    }\n   //this.selectedData.push(event.option.viewValue);\n    this.dataInput.nativeElement.value = '';\n    this.dataInputCtrl.setValue(null);\n  }\n\n  private _filter(value: string): string[] {\n    const filterValue = value.toLowerCase();\n\n    return this.allData.filter(dataPoint => dataPoint.toLowerCase().indexOf(filterValue) === 0);\n  }\n\n  //Drag Drop option\n\n  option2AvailableData: string[] = [ 'Beginnning Value', 'Return', 'Ending Value', 'Realized Gain/Loss', 'Unrealized Gain/Loss'];\n  option2SelectedData: string[] = ['Net Contribution'];\n\n  drop(event: CdkDragDrop<string[]>) {\n    if (event.previousContainer === event.container) {\n      moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);\n      console.log(event.container.data, event.previousIndex, event.currentIndex);\n    } else {\n      transferArrayItem(event.previousContainer.data,\n                        event.container.data,\n                        event.previousIndex,\n                        event.currentIndex);\n    }\n  }\n\n  addChip(dataPoint: string){\n    const index = this.option2AvailableData.indexOf(dataPoint);\n    if (index >= 0) {\n      transferArrayItem(this.option2AvailableData,this.option2SelectedData,index,this.option2SelectedData.length);\n    }\n  }\n  removeChip(dataPoint: string){\n    const index = this.option2SelectedData.indexOf(dataPoint);\n    if (index >= 0) {\n      transferArrayItem(this.option2SelectedData,this.option2AvailableData,index,this.option2AvailableData.length);\n    }\n  }\n\n  //Option 3 stuff\n  baseOptions = {\n    displayGrid: DisplayGrid.OnDragAndResize,\n    disableWarnings: true,\n    swap: true,\n    margin: 5,\n    outerMargin: true,\n    minCols: 3,\n    maxCols: 3,\n    minRows: 1,\n    maxRows: 3,\n    minItemCols: 1,\n    maxItemCols: 1,\n    minItemRows: 1,\n    maxItemRows: 1,\n    minItemArea: 1,\n    defaultItemCols: 1,\n    defaultItemRows: 1,\n    gridType: GridType.VerticalFixed,\n    fixedRowHeight: 40,\n    compactType: CompactType.CompactUp,\n    enableEmptyCellDrop: true,\n    enableOccupiedCellDrop: true,\n    pushItems: true,\n    pushResizeItems: true,\n    draggable: {\n      delayStart: 0,\n      enabled: true,\n      ignoreContentClass: 'gridster-item-content',\n      ignoreContent: false,\n      dragHandleClass: 'drag-handler',\n      dropOverItems: true,\n    },\n    resizable: {\n      enabled: false\n    },\n    emptyCellDropCallback: this.emptyCellDrop.bind(this),\n  }\n  emptyCellDrop(event: DragEvent, item: GridsterItem) {\n    let index = +event.dataTransfer.getData('Text');\n\n    if (index >= 0) {\n      transferArrayItem(this.option3Available,this.option3Selected,index,this.option3Selected.length)\n    }\n    //this.option3Selected.push(newItem);\n  }\n  option3Available: Array<GridsterItem> = [\n    {cols: 1, rows: 1, y: 0, x: 0, hasContent: false,  dragEnabled: true, resizeEnabled: false, delete: true, label: 'Beginnning Value'},\n    {cols: 1, rows: 1, y: 0, x: 0, hasContent: false,  dragEnabled: true, resizeEnabled: false, delete: true, label: 'Return'},\n    {cols: 1, rows: 1, y: 0, x: 0, hasContent: false,  dragEnabled: true, resizeEnabled: false, delete: true, label: 'Ending Value'},\n    {cols: 1, rows: 1, y: 0, x: 0, hasContent: false,  dragEnabled: true, resizeEnabled: false, delete: true, label: 'Realized Gain/Loss'},\n    {cols: 1, rows: 1, y: 0, x: 0, hasContent: false,  dragEnabled: true, resizeEnabled: false, delete: true, label: 'Unrealized Gain/Loss'},\n    {cols: 1, rows: 1, y: 0, x: 0, hasContent: false,  dragEnabled: true, resizeEnabled: false, delete: true, label: 'Net Contributions'},\n  ];\n  option3Selected: Array<GridsterItem> = []\n\n  dragStartHandler(event: DragEvent, index: number) {\n    event.dataTransfer.setData('Text', index.toString());\n    event.dataTransfer.dropEffect = 'copy';\n  }\n  remove3Item($event, item: GridsterItem) {\n    $event.preventDefault();\n    $event.stopPropagation();\n    let index = this.option3Selected.indexOf(item);\n\n    if (index >= 0) {\n      transferArrayItem(this.option3Selected,this.option3Available,index,this.option3Available.length)\n    }\n  }\n  add3(item: GridsterItem) {\n    let index = this.option3Available.indexOf(item);\n\n    if (index >= 0) {\n      transferArrayItem(this.option3Available,this.option3Selected,index,this.option3Selected.length)\n    }\n  }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".chip-list, .data-point-box {\r\n  width: 100%;\r\n}\r\n\r\n.chip-box {\r\n  border-bottom: 1px solid #333333;\r\n  padding: 5px;\r\n  width: 100%;\r\n}\r\n.selected-data-point-chip {\r\n  width: 30%;\r\n}\r\n.data-point-box.cdk-drag-animating {\r\n  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\r\n}\r\n\r\n.data-point-chip .cdk-drop-list-dragging {\r\n  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\r\n}\r\n.gridsterStyles {\r\n  background-color: #CCCCCC;\r\n  overflow: hidden;\r\n}\r\n.option-3-box{\r\n  width: 100%;\r\n}\r\n.gridster-box {\r\n  height: 145px;\r\n}\r\n.icon {\r\n  max-width: 20px;\r\n}\r\n.pill {\r\n  border-radius: 20px;\r\n  border-width: 1px;\r\n  border-color: white;\r\n  margin: 2px;\r\n  padding: 5px 10px;\r\n}\r\n",
                    "styleUrl": "./summary-customization.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 41
            },
            "templateData": "<div mat-dialog-title class=\"container-fluid\">\n  <div class=\"row\">\n    <h2 class=\"col\">Customize Summary Component</h2>\n  </div>\n</div>\n<div mat-dialog-content class=\"container-fluid m-1 p-1\">\n  Option 1:\n  <mat-form-field class=\"chip-list\">\n    <mat-chip-list #chipList aria-label=\"Data selection\">\n      <mat-chip\n        *ngFor=\"let dataPoint of selectedData\"\n        [selectable]=\"selectable\"\n        [removable]=\"removable\"\n        (removed)=\"remove(dataPoint)\">\n        {{dataPoint}}\n        <mat-icon matChipRemove *ngIf=\"removable\">cancel</mat-icon>\n      </mat-chip>\n      <input\n        placeholder=\"New Data Point\"\n        #dataInput\n        [formControl]=\"dataInputCtrl\"\n        [matAutocomplete]=\"auto\"\n        [matChipInputFor]=\"chipList\"\n        [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\"\n        (matChipInputTokenEnd)=\"add($event)\"/>\n    </mat-chip-list>\n    <mat-autocomplete #auto=\"matAutocomplete\" (optionSelected)=\"selected($event)\">\n      <mat-option *ngFor=\"let dataPoint of filteredData | async\" [value]=\"dataPoint\">\n        {{dataPoint}}\n      </mat-option>\n    </mat-autocomplete>\n  </mat-form-field>\n  Option 2:\n  <div cdkDropListGroup>\n    <div class=\"chip-box\">\n      <mat-chip-list\n      class=\"data-point-box\"\n\n      cdkDropList \n      [cdkDropListData]=\"option2AvailableData\"\n      cdkDropListOrientation=\"horizontal\"\n      (cdkDropListDropped)=\"drop($event)\">\n        <mat-chip\n          class=\"data-point-chip\"\n          [selectable]=\"selectable\"\n          [removable]=\"removable\"\n          (removed)=\"addChip(dataPoint)\"\n          cdkDrag\n          *ngFor=\"let dataPoint of option2AvailableData\">\n          {{dataPoint}}\n          <mat-icon matChipRemove *ngIf=\"removable\">add</mat-icon>\n        </mat-chip>\n      </mat-chip-list>\n    </div>\n    <div class=\"chip-box\">\n      <mat-chip-list\n      class=\"data-point-box\"\n\n      cdkDropList \n      [cdkDropListData]=\"option2SelectedData\"\n      cdkDropListOrientation=\"horizontal\"\n      (cdkDropListDropped)=\"drop($event)\">\n        <mat-chip\n          class=\"data-point-chip selected-data-point-chip\"\n          [selectable]=\"selectable\"\n          [removable]=\"removable\"\n          (removed)=\"removeChip(dataPoint)\"\n          cdkDrag\n          *ngFor=\"let dataPoint of option2SelectedData\">\n          <div class=\"container-fluid\">\n            <div class=\"row justify-content-between pt-1\">\n              <div class=\"col\">{{dataPoint}}</div>\n              <div class=\"col-auto\"><mat-icon matChipRemove *ngIf=\"removable\">cancel</mat-icon></div>\n            </div>\n          </div>\n        </mat-chip>\n      </mat-chip-list>\n    </div>\n  </div>\n  <div class=\"option-3-box my-2 mx-1\">Option 3:</div>\n  <div class=\"option-3-box mb-2\">\n    <mat-chip-list #chipList aria-label=\"Data selection\">\n      <mat-chip draggable=\"true\" (dragstart)=\"dragStartHandler($event, i)\"\n        *ngFor=\"let dataPoint of option3Available; index as i\"\n        [removable]=\"true\"\n        (removed)=\"add3(dataPoint)\">\n        {{dataPoint.label}}\n        <mat-icon matChipRemove>add</mat-icon>\n      </mat-chip>\n    </mat-chip-list>\n  </div>\n  <div class=\"option-3-box gridster-box\">\n    <gridster [options]=\"baseOptions\" class=\"gridsterStyles\">\n      <gridster-item [item]=\"item\" *ngFor=\"let item of option3Selected\" class=\"pill\">\n        <div class=\"container-fluid pl-0 pr-0\">\n          <div class=\"d-flex justify-content-between row pl-0 pr-0 pt-1 pb-1\">\n            <div class=\"item-buttons col-auto\">\n              <a class=\"drag-handler\" *ngIf=\"item.dragEnabled\">\n                <img class=\"icon ml-2\" src=\"assets/move.png\"/>\n              </a>\n            </div>\n            <div class=\"col-auto>\">{{item.label}}</div>\n            <div class=\"item-buttons col-auto\">\n              <a *ngIf=\"item.delete\" (click)=\"remove3Item($event, item)\">\n                <img class=\"icon mr-2\" src=\"assets/remove.png\"/>\n              </a>\n            </div>\n          </div>\n        </div>\n      </gridster-item>\n    </gridster>\n  </div>\n</div>\n<div mat-dialog-actions class=\"float-right\">\n  <button mat-button color=\"primary\" cdkFocusInitial mat-dialog-close>Save</button>\n  <button mat-button color=\"primary\" mat-dialog-close>Cancel</button>\n</div>"
        },
        {
            "name": "WriCommonComponent",
            "id": "component-WriCommonComponent-14e1026085cbb39f473f64377e48737b",
            "file": "projects/wri-common/src/lib/wri-common.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-wri-common",
            "styleUrls": [],
            "styles": [],
            "template": "<p>\n  wri-common works!\n</p>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-wri-common',\n  template: `\n    <p>\n      wri-common works!\n    </p>\n  `,\n  styles: [\n  ]\n})\nexport class WriCommonComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 13
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "WRIFooterComponent",
            "id": "component-WRIFooterComponent-a47e87061198d1ccf0c7a23816868032",
            "file": "projects/wri-footer/src/lib/wri-footer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "wri-footer",
            "styleUrls": [
                "./wri-footer.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./wri-footer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'wri-footer',\n  templateUrl: './wri-footer.component.html',\n  styleUrls: ['./wri-footer.component.scss']\n})\nexport class WRIFooterComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".textCls {\r\n  font-size: 11px;\r\n}\r\n",
                    "styleUrl": "./wri-footer.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container-fluid mt-2\">\n  <div class=\"row\">\n    <div class=\"col textCls\">\n      Prepared by: John Smith\n    </div>\n  </div>\n  <div class=\"row border-bottom border-info\">\n    <div class=\"col textCls\">\n      Created on: 8/16/19\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col textCls\">Incomplete if presented without accompanying disclosure pages</div>\n    <div class=\"col-auto textCls\">Page 1 of 1</div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-auto textCls\">&nbsp;</div>\n  </div>\n</div>\n"
        },
        {
            "name": "WRIHeaderComponent",
            "id": "component-WRIHeaderComponent-130531491a0baa7709f8ef116fa71535",
            "file": "projects/wri-header/src/lib/wri-header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "wri-header",
            "styleUrls": [
                "./wri-header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./wri-header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'wri-header',\n  templateUrl: './wri-header.component.html',\n  styleUrls: ['./wri-header.component.scss']\n})\nexport class WRIHeaderComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./wri-header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container-fluid\">\n  <div class=\"row border-bottom border-light\">\n    <div class=\"col\">\n      <img src=\"assets/header.png\" width=\"70%\"/>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col\">&nbsp;</div>\n    <div class=\"col-auto periodCls\">Period: 1-1-10 to 03-31-20</div>\n  </div>\n</div>\n"
        },
        {
            "name": "WRIHoldingsComponent",
            "id": "component-WRIHoldingsComponent-3b59e3ea245663da48e9eb53b2edefd2",
            "file": "projects/wri-holdings/src/lib/wri-holdings.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "wri-holdings",
            "styleUrls": [
                "./wri-holdings.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./wri-holdings.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "numberOfColumnsToShow",
                    "defaultValue": "10",
                    "line": 15,
                    "type": "number"
                },
                {
                    "name": "options",
                    "line": 11,
                    "type": "HoldingsCustomizationOptions"
                },
                {
                    "name": "useDummyData",
                    "defaultValue": "false",
                    "line": 13,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "categories",
                    "defaultValue": "[]",
                    "type": "Category[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "uncategorized",
                    "type": "Category",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "valueColumnIndex",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                },
                {
                    "name": "setValueColumnIndex",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, } from '@angular/core';\nimport { WRIHoldingsService, HoldingsCustomizationOptions, Category, CategorizedData } from './wri-holdings.service';\n\n@Component({\n  selector: 'wri-holdings',\n  templateUrl: './wri-holdings.component.html',\n  styleUrls: ['./wri-holdings.component.scss']\n})\nexport class WRIHoldingsComponent implements OnInit {\n  @Input()\n  options: HoldingsCustomizationOptions;\n  @Input()\n  useDummyData: boolean = false;\n  @Input()\n  numberOfColumnsToShow: number = 10;\n  categories: Category[] = [];\n  uncategorized: Category;\n  valueColumnIndex: number = 0;\n  constructor(private service: WRIHoldingsService) {\n  }\n\n  ngOnInit(): void {\n    this.service.getData(this.options, this.useDummyData).subscribe(\n      (returnValue: CategorizedData) => {\n        if (returnValue.isCategorized) {\n          this.categories = returnValue.categorizedData;\n        } else {\n          this.uncategorized = returnValue.uncategorizedData;\n        }\n        this.setValueColumnIndex();    \n      }\n    );\n  }\n\n  setValueColumnIndex(){\n    let found = false;\n    this.valueColumnIndex = 0;\n    // console.log(this.valueColumnIndex);\n    for (let index = 0; index < this.options.dataColumns.length && !found; index++) {\n      const element = this.options.dataColumns[index];\n      if (element.value === \"value\") {\n        found = true;\n        this.valueColumnIndex = index;\n      }\n    }\n    // console.log(this.valueColumnIndex);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '~@angular/material/theming';\r\n\r\nth {\r\n  font-family: Arial;\r\n  box-sizing: border-box;\r\n  height: 31px;\r\n  background-color: var(--wri-header-color,#07518F);\r\n  color: #FFFFFF;\r\n  font-size: 10px;\r\n  letter-spacing: 0;\r\n  line-height: 11px;\r\n  padding: 5px;\r\n  vertical-align: bottom;\r\n}\r\n\r\ntd {\r\n  border-top: 1px solid #E1E1E1;\r\n  border-bottom: 0px solid #E1E1E1;\r\n  height: 22px;\r\n  vertical-align: middle;\r\n  font-family: Arial;\r\n  font-size: 12px;\r\n  letter-spacing: 9;\r\n  line-height: 14px;\r\n  padding-right: 5px;\r\n}\r\n\r\n.assetName, .acctName, .combinedAccountName, .assetClass1Name, .assetClass2Name,\r\n.assetClass3Name, .investorName, .combinedAccountName, .mgrName, .productName, .style {\r\n  min-width: 220px;\r\n  width: 22%;\r\n}\r\n\r\n.value, .price, .quantity, .ror, .yield, .percentageOfAccount, .estimatedAnnualIncome,\r\n.cost, .unrealizedGainLoss, .beginningValue, .netContribution, .changeInValue {\r\n  min-width: 60px;\r\n  text-align: right;\r\n  width: 6%;\r\n}\r\n\r\n.ticker {\r\n  min-width: 40px;\r\n  width: 4%;\r\n}\r\n.mgmtCompany, .morningstarRating, .assetType, .acctNum, .accountType, .taxStatus {\r\n  min-width: 60px;\r\n  width: 6%;\r\n}\r\n\r\n.cat1Title {\r\n  color: #07518F;\r\n  font-size: 14px;\r\n  font-weight: bolder;\r\n  font-stretch: wider;\r\n}\r\n\r\n.cat3Title {\r\n  border-bottom: 1px solid #DCDDDE;\r\n  border-left: 6px solid #DCDDDE;\r\n  color: #A29060;\r\n  font-weight: bolder;\r\n  font-stretch: wider;\r\n}\r\n\r\n.headerDate {\r\n  z-index: 2;\r\n  position: absolute;\r\n  right: 20px;\r\n  top: 5px;\r\n  font-weight: bold;\r\n}\r\n\r\n.total {\r\n  font-weight: bold;\r\n  border-bottom: 0px;\r\n  font-size: 12px;\r\n  border-top: 1px solid #07518F;\r\n}\r\n\r\n.cat2Total {\r\n  border: none;\r\n  font-weight: bold;\r\n}\r\n\r\n.cat1Total, .cat1TotalValue {\r\n  border: none;\r\n  font-weight: bold;\r\n}\r\n\r\n.cat1TotalValue {\r\n  color: #A29060;\r\n}\r\n\r\n.color-icon {\r\n  min-width: 20px;\r\n  height: 15px;\r\n  border: none;\r\n}",
                    "styleUrl": "./wri-holdings.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "service",
                        "type": "WRIHoldingsService"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "WRIHoldingsService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"headerDate\" *ngIf=\"categories.length !== 0\">\n  As of: 3/31/20\n</div>\n<div class=\"container-fluid\">\n  <div class=\"row justify-content-center\">\n    <div class=\"col\" *ngIf=\"options.dataColumns.length === 0\">\n      Data Columns are not selected. Please select data columns.\n    </div>\n    <div class=\"col-12 font-weight-bold text-right pt-1 pb-1\" *ngIf=\"categories.length === 0\">\n      As of: 3/31/20\n    </div>\n    <div class=\"col\" *ngIf=\"options.dataColumns.length !== 0 && categories.length === 0\">\n      <table width=\"100%\">\n        <tr>\n          <ng-container *ngFor=\"let column of options.dataColumns; index as i;\">\n            <th *ngIf=\"i < numberOfColumnsToShow\" class=\"{{column.value}}\">{{column.viewValue | uppercase}}</th>\n          </ng-container>\n        </tr>\n        <tr *ngFor=\"let row of uncategorized.categoryData\">\n          <ng-container *ngFor=\"let column of options.dataColumns; index as i;\">\n            <td *ngIf=\"i < numberOfColumnsToShow\" class=\"data {{column.value}}\">\n              <span *ngIf=\"column.isNumber && row[column.value] !== 0\">{{row[column.value] | number:'1.2-3'}}</span>\n              <span *ngIf=\"column.isNumber && row[column.value] === 0\">--</span>\n              <span *ngIf=\"!column.isNumber\">{{row[column.value] | uppercase}}</span>\n            </td>\n          </ng-container>\n        </tr>\n        <tr>\n          <ng-container *ngFor=\"let column of options.dataColumns; index as m;\">\n            <td *ngIf=\"m === 0 \" class=\"total {{column.value}} text-right\">Total:</td>\n            <td *ngIf=\"m !==0 && m < numberOfColumnsToShow\" class=\"total {{column.value}}\">\n              <span *ngIf=\"uncategorized.summaryData[column.value] !== 0\">{{uncategorized.summaryData[column.value] | number:'1.2-3'}}</span>\n              <span *ngIf=\"uncategorized.summaryData[column.value] === 0\">--</span>\n            </td>\n          </ng-container>\n        </tr>\n      </table>\n    </div>\n    <div class=\"col\" *ngIf=\"options.dataColumns.length !== 0 && categories.length !== 0\">\n      <ng-container *ngFor=\"let category1 of categories\">\n        <div class=\"row\" *ngIf=\"options.category1Data.length !== 0\">\n          <ng-container *ngFor=\"let dataColumn of options.category1Data; index as j\">\n            <div class=\"col-12 cat1Title mb-1\" *ngIf=\"j === 0\">{{category1.categoryData[0][dataColumn.value]}}</div>\n            <div class=\"col-6 cat1Detail\" *ngIf=\"j !== 0 && category1.categoryData[0][dataColumn.value] !== null\">{{dataColumn.viewValue | uppercase}}: {{category1.categoryData[0][dataColumn.value]}}</div>\n          </ng-container>\n        </div>\n        <div class=\"row pb-3\" *ngIf=\"category1.categoryData.length !== 0 && options.category2 === null\">\n          <div class=\"col\">\n            <table width=\"100%\">\n              <tr>\n                <ng-container *ngFor=\"let column of options.dataColumns; index as i;\">\n                  <th *ngIf=\"i < numberOfColumnsToShow\" class=\"{{column.value}}\">{{column.viewValue | uppercase}}</th>\n                </ng-container>\n              </tr>\n              <tr *ngFor=\"let row of category1.categoryData\">\n                <ng-container *ngFor=\"let column of options.dataColumns; index as i;\">\n                  <td *ngIf=\"i < numberOfColumnsToShow\" class=\"data {{column.value}}\">\n                    <span *ngIf=\"column.isNumber && row[column.value] !== 0\">{{row[column.value] | number:'1.2-3'}}</span>\n                    <span *ngIf=\"column.isNumber && row[column.value] === 0\">--</span>\n                    <span *ngIf=\"!column.isNumber\">{{row[column.value] | uppercase}}</span>\n                  </td>\n                </ng-container>\n              </tr>\n              <tr *ngIf=\"options.category1Data.length !== 0\">\n                <ng-container *ngFor=\"let column of options.dataColumns; index as m;\">\n                  <td *ngIf=\"m === 0 \" class=\"total {{column.value}} text-right\">{{category1.categoryData[0][options.category1Data[0].value]}} Total:</td>\n                  <td *ngIf=\"m !==0 && m < numberOfColumnsToShow\" class=\"total {{column.value}}\">\n                    <span *ngIf=\"category1.summaryData[column.value] !== 0\">{{category1.summaryData[column.value] | number:'1.2-3'}}</span>\n                    <span *ngIf=\"category1.summaryData[column.value] === 0\">--</span>\n                  </td>\n                </ng-container>\n              </tr>\n            </table>\n          </div>\n        </div>\n        <ng-container *ngIf=\"options.category2 !== null\">\n          <ng-container *ngFor=\"let category2 of category1.subCategories; index as cat2Index\">\n            <div class=\"row\" *ngIf=\"options.category2Data.length !== 0\">\n              <ng-container *ngFor=\"let dataColumn of options.category2Data; index as k\">\n                <div class=\"col-12 cat2Detail\" *ngIf=\"k === 0 && category2.categoryData[0][dataColumn.value] !== null\"><span class=\"font-weight-bold\">{{dataColumn.viewValue}}:</span> {{category2.categoryData[0][dataColumn.value] | uppercase}}</div>\n                <div class=\"col-12 cat2Detail\" *ngIf=\"k !== 0 && category2.categoryData[0][dataColumn.value] !== null\"><span class=\"font-weight-bold\">{{dataColumn.viewValue}}:</span> {{category2.categoryData[0][dataColumn.value]}}</div>\n              </ng-container>    \n            </div>\n            <div class=\"row pb-3\" *ngIf=\"category2.categoryData.length !== 0 && options.category3 === null\">\n              <div class=\"col\">\n                <table width=\"100%\">\n                  <tr>\n                    <ng-container *ngFor=\"let column of options.dataColumns; index as i;\">\n                      <th *ngIf=\"i < numberOfColumnsToShow\" class=\"{{column.value}}\">{{column.viewValue | uppercase}}</th>\n                    </ng-container>\n                  </tr>\n                  <tr *ngFor=\"let row of category2.categoryData\">\n                    <ng-container *ngFor=\"let column of options.dataColumns; index as i;\">\n                      <td *ngIf=\"i < numberOfColumnsToShow\" class=\"data {{column.value}}\">\n                        <span *ngIf=\"column.isNumber && row[column.value] !== 0\">{{row[column.value] | number:'1.2-3'}}</span>\n                        <span *ngIf=\"column.isNumber && row[column.value] === 0\">--</span>\n                        <span *ngIf=\"!column.isNumber\">{{row[column.value] | uppercase}}</span>\n                      </td>\n                    </ng-container>\n                  </tr>\n                  <tr *ngIf=\"options.category2Data.length !== 0\">\n                    <ng-container *ngFor=\"let column of options.dataColumns; index as m;\">\n                      <td *ngIf=\"m === 0 \" class=\"total {{column.value}} text-right\">{{category2.categoryData[0][options.category2Data[0].value]}} Total:</td>\n                      <td *ngIf=\"m !==0 && m < numberOfColumnsToShow\" class=\"total {{column.value}}\">\n                        <span *ngIf=\"category2.summaryData[column.value] !== 0\">{{category2.summaryData[column.value] | number:'1.2-3'}}</span>\n                        <span *ngIf=\"category2.summaryData[column.value] === 0\">--</span>\n                      </td>\n                    </ng-container>\n                  </tr>\n                  <tr *ngIf=\"valueColumnIndex !== 0 && category1.subCategories.length === (cat2Index+1) && options.category1Data.length !== 0 && (valueColumnIndex <= numberOfColumnsToShow)\">\n                    <ng-container *ngFor=\"let column of options.dataColumns; index as n;\">\n                      <td *ngIf=\"n === 0\" colspan=\"5\" class=\"cat1Total {{column.value}} text-right\">{{category1.categoryData[0][options.category1Data[0].value]}} Total:</td>\n                      <td *ngIf=\"n === valueColumnIndex\" class=\"cat1TotalValue {{column.value}}\">$ {{category1.summaryData[\"value\"] | number:'1.2-3'}}</td>\n                      <td *ngIf=\"n > valueColumnIndex && n < numberOfColumnsToShow\" class=\"cat1Total\">&nbsp;</td>\n                    </ng-container>\n                  </tr>\n                </table>\n              </div>\n            </div>\n            <ng-container *ngIf=\"options.category3 !== null\">\n              <ng-container *ngFor=\"let category3 of category2.subCategories; index as cat3Index\">\n                <div class=\"row\" *ngIf=\"options.category3Data.length !== 0\">\n                  <ng-container *ngFor=\"let dataColumn of options.category3Data; index as m\">\n                    <div class=\"col-12 cat3Title mb-1 ml-3 mt-2\" *ngIf=\"m === 0\">{{category3.categoryData[0][dataColumn.value]}}</div>\n                    <div class=\"col-4 cat3Detail\" *ngIf=\"m !== 0 && category3.categoryData[0][dataColumn.value] !== null\">{{dataColumn.viewValue | uppercase}}: {{category3.categoryData[0][dataColumn.value]}}</div>\n                  </ng-container>    \n                </div>\n                <div class=\"row pb-3\" *ngIf=\"category3.categoryData.length !== 0\">\n                  <div class=\"col\">\n                    <table width=\"100%\">\n                      <tr>\n                        <ng-container *ngFor=\"let column of options.dataColumns; index as i;\">\n                          <th *ngIf=\"i < numberOfColumnsToShow\" class=\"{{column.value}}\">{{column.viewValue | uppercase}}</th>\n                        </ng-container>\n                      </tr>\n                      <tr *ngFor=\"let row of category3.categoryData\">\n                        <ng-container *ngFor=\"let column of options.dataColumns; index as i;\">\n                          <td *ngIf=\"i < numberOfColumnsToShow\" class=\"data {{column.value}}\">\n                            <span *ngIf=\"column.isNumber && row[column.value] !== 0\">{{row[column.value] | number:'1.2-3'}}</span>\n                            <span *ngIf=\"column.isNumber && row[column.value] === 0\">--</span>\n                            <span *ngIf=\"!column.isNumber\">{{row[column.value] | uppercase}}</span>\n                          </td>\n                        </ng-container>\n                      </tr>\n                      <tr *ngIf=\"options.category3Data.length !== 0\">\n                        <ng-container *ngFor=\"let column of options.dataColumns; index as m;\">\n                          <td *ngIf=\"m === 0\" class=\"total {{column.value}} text-right\">{{category3.categoryData[0][options.category3Data[0].value]}} Total:</td>\n                          <td *ngIf=\"m !==0 && m < numberOfColumnsToShow\" class=\"total {{column.value}}\">\n                            <span *ngIf=\"category3.summaryData[column.value] !== 0\">{{category3.summaryData[column.value] | number:'1.2-3'}}</span>\n                            <span *ngIf=\"category3.summaryData[column.value] === 0\">--</span>\n                          </td>\n                        </ng-container>\n                      </tr>\n                      <tr *ngIf=\"valueColumnIndex !== 0 && category2.subCategories.length === (cat3Index+1) && options.category2Data.length !== 0 && (valueColumnIndex <= numberOfColumnsToShow)\">\n                        <ng-container *ngFor=\"let column of options.dataColumns; index as n;\">\n                          <td *ngIf=\"n === 0\" [attr.colspan]=\"valueColumnIndex\" class=\"cat2Total {{column.value}} text-right\">{{category2.categoryData[0][options.category2Data[0].value]}} Total:</td>\n                          <td *ngIf=\"n === valueColumnIndex\" class=\"cat2Total {{column.value}}\">$ {{category2.summaryData[\"value\"] | number:'1.2-3'}}</td>\n                          <td *ngIf=\"n > valueColumnIndex && n < numberOfColumnsToShow\" class=\"cat2Total\">&nbsp;</td>\n                        </ng-container>\n                      </tr>\n                      <tr *ngIf=\"valueColumnIndex !== 0 && category2.subCategories.length === (cat3Index+1) && category1.subCategories.length === (cat2Index+1) && options.category1Data.length !== 0 && ( valueColumnIndex <= numberOfColumnsToShow)\">\n                        <ng-container *ngFor=\"let column of options.dataColumns; index as n;\">\n                          <td *ngIf=\"n === 0\" [attr.colspan]=\"valueColumnIndex\" class=\"cat1Total {{column.value}} text-right\">{{category1.categoryData[0][options.category1Data[0].value]}} Total:</td>\n                          <td *ngIf=\"n === valueColumnIndex\" class=\"cat1TotalValue {{column.value}}\">$ {{category1.summaryData[\"value\"] | number:'1.2-3'}}</td>\n                          <td *ngIf=\"n > valueColumnIndex && n < numberOfColumnsToShow\" class=\"cat1Total\">&nbsp;</td>\n                        </ng-container>\n                      </tr>\n                    </table>\n                  </div>\n                </div>\n              </ng-container>    \n            </ng-container>\n          </ng-container>    \n        </ng-container>\n      </ng-container>\n    </div>\n  </div>\n</div>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "HttpAuthInterceptor"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "FilterArrayPipe"
                        },
                        {
                            "name": "FooterReportBuilderComponent"
                        },
                        {
                            "name": "GraphReportBuilderComponent"
                        },
                        {
                            "name": "GraphTableReportBuilderComponent"
                        },
                        {
                            "name": "HeaderReportBuilderComponent"
                        },
                        {
                            "name": "HoldingsCustomizationComponent"
                        },
                        {
                            "name": "HoldingsReportBuilderComponent"
                        },
                        {
                            "name": "MessagingComponent"
                        },
                        {
                            "name": "MultiSelectionComponent"
                        },
                        {
                            "name": "PurifyHTMLPipe"
                        },
                        {
                            "name": "ReportBuilderComponent"
                        },
                        {
                            "name": "ReportListComponent"
                        },
                        {
                            "name": "SaveReportComponent"
                        },
                        {
                            "name": "SummaryComponent"
                        },
                        {
                            "name": "SummaryCustomizationComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "WRIFooterModule"
                        },
                        {
                            "name": "WRIHeaderModule"
                        },
                        {
                            "name": "WRIHoldingsModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "WriCommonModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "WriCommonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "WriCommonComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "WRIFooterModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "WRIFooterComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "WRIFooterComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "WRIHeaderModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "WRIHeaderComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "WRIHeaderComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "WRIHoldingsModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "WRIHoldingsService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "WRIHoldingsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "WRIHoldingsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "AccountPerformance",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "accountPerformanceMultiSelection1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                "type": "MultiSelectSelection[]",
                "defaultValue": "[\r\n  {selected: true, draggable: false, disabled: true, element: null, name: \"Account\"},\r\n  {selected: true, draggable: true, disabled: false, element: null, name: \"Account Number\"},\r\n  {selected: true, draggable: true, disabled: false, element: null, name: \"Value\"},\r\n  {selected: true, draggable: true, disabled: true, element: null, name: \"Selected Period\"},\r\n  {selected: true, draggable: true, disabled: false, element: null, name: \"YTD\"},\r\n  {selected: true, draggable: true, disabled: false, element: null, name: \"One Year\"},\r\n  {selected: true, draggable: true, disabled: false, element: null, name: \"Three Year\"},\r\n  {selected: true, draggable: true, disabled: false, element: null, name: \"Five Year \"},\r\n  {selected: true, draggable: true, disabled: false, element: null, name: \"Since Inception\"},\r\n  {selected: true, draggable: true, disabled: false, element: null, name: \"Inception Date\"},\r\n  {selected: false, draggable: true, disabled: false, element: null, name: \"Account Type\"},\r\n  {selected: false, draggable: true, disabled: false, element: null, name: \"Start Date\"},\r\n]"
            },
            {
                "name": "accountPerformanceSet1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                "type": "",
                "defaultValue": "new MultiSelectSet()"
            },
            {
                "name": "accountPerformanceSets",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                "type": "MultiSelectSet[]",
                "defaultValue": "[]"
            },
            {
                "name": "ACL",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "aclMultiSelection1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                "type": "MultiSelectSelection[]",
                "defaultValue": "[\r\n  {name: 'All Accounts', selected: true, disabled: false, draggable: false, element:null},\r\n]"
            },
            {
                "name": "aclMultiSelection2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                "type": "MultiSelectSelection[]",
                "defaultValue": "[\r\n  {name: 'Core Accounts', selected: false, disabled: false, draggable: true, element:null},\r\n  {name: 'Manual Accounts', selected: false, disabled: false, draggable: true, element:null},\r\n  {name: 'Balance Only Accounts', selected: false, disabled: false, draggable: true, element:null},\r\n  {name: 'External Accounts', selected: false, disabled: false, draggable: true, element:null},\r\n]"
            },
            {
                "name": "aclSet1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                "type": "",
                "defaultValue": "new MultiSelectSet()"
            },
            {
                "name": "aclSet2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                "type": "",
                "defaultValue": "new MultiSelectSet()"
            },
            {
                "name": "ACLValueSets",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                "type": "MultiSelectSet[]",
                "defaultValue": "[]"
            },
            {
                "name": "allReportsData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/report-builder/src/app/page/report-list/mock-data.ts",
                "type": "any",
                "defaultValue": "{\n\t\"className\": \"com.albridge.services.GetDefaultReportsListMetadataResponse\",\n\t\n\t\t\"requestId\": \"7abae37f-d1c5-439e-a24d-070abaca5754\",\n\t\t\"messages\": {\n\t\t\t\"message\": []\n\t\t},\n\t\t\"popularCount\": 2,\n\t\t\"totalReportCount\": 5,\n\t\t\"customReportCount\": 6,\n\t\t\"categoryList\": [\n\t\t\t{\n\t\t\t\t\"categoryId\": 9999,\n\t\t\t\t\"categoryName\": \"Custom\",\n\t\t\t\t\"reportsList\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"reportId\": 10001,\n\t\t\t\t\t\t\"reportName\": \"Custom Report Test1\",\n\t\t\t\t\t\t\"popularReport\": \"N\",\n\t\t\t\t\t\t\"reportType\": \"C\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"reportId\": 9000,\n\t\t\t\t\t\t\"reportName\": \"Portfolio Snapshot Summary - Anurag\",\n\t\t\t\t\t\t\"popularReport\": \"N\",\n\t\t\t\t\t\t\"reportType\": \"C\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"reportId\": 1003,\n\t\t\t\t\t\t\"reportName\": \"Portfolio Snapshort Summary - Customized\",\n\t\t\t\t\t\t\"popularReport\": \"N\",\n\t\t\t\t\t\t\"reportType\": \"C\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"reportId\": 1005,\n\t\t\t\t\t\t\"reportName\": \"Portfolio Return - Customized\",\n\t\t\t\t\t\t\"popularReport\": \"N\",\n\t\t\t\t\t\t\"reportType\": \"C\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"reportId\": 1004,\n\t\t\t\t\t\t\"reportName\": \"Portfolio Value - Customized\",\n\t\t\t\t\t\t\"popularReport\": \"N\",\n\t\t\t\t\t\t\"reportType\": \"C\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"reportId\": 10002,\n\t\t\t\t\t\t\"reportName\": \"Custom Report Test 2\",\n\t\t\t\t\t\t\"popularReport\": \"N\",\n\t\t\t\t\t\t\"reportType\": \"C\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"categoryId\": 5,\n\t\t\t\t\"categoryName\": \"Performance\",\n\t\t\t\t\"reportsList\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"reportId\": 50,\n\t\t\t\t\t\t\"reportName\": \"Portfolio Performance\",\n\t\t\t\t\t\t\"popularReport\": \"Y\",\n\t\t\t\t\t\t\"reportType\": \"D\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"reportId\": 78,\n\t\t\t\t\t\t\"reportName\": \"Portfolio Snapshot Summary\",\n\t\t\t\t\t\t\"popularReport\": \"Y\",\n\t\t\t\t\t\t\"reportType\": \"D\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"categoryId\": 4,\n\t\t\t\t\"categoryName\": \"Holdings\",\n\t\t\t\t\"reportsList\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"reportId\": 4,\n\t\t\t\t\t\t\"reportName\": \"Holdings by Portfolio\",\n\t\t\t\t\t\t\"popularReport\": \"N\",\n\t\t\t\t\t\t\"reportType\": \"D\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"categoryId\": 5,\n\t\t\t\t\"categoryName\": \"Performance\",\n\t\t\t\t\"reportsList\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"reportId\": 5,\n\t\t\t\t\t\t\"reportName\": \"Holdings by Classification\",\n\t\t\t\t\t\t\"popularReport\": \"N\",\n\t\t\t\t\t\t\"reportType\": \"D\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"categoryId\": 4,\n\t\t\t\t\"categoryName\": \"Holdings\",\n\t\t\t\t\"reportsList\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"reportId\": 3,\n\t\t\t\t\t\t\"reportName\": \"Holdings by Investor\",\n\t\t\t\t\t\t\"popularReport\": \"N\",\n\t\t\t\t\t\t\"reportType\": \"D\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t\n}"
            },
            {
                "name": "changeInValueSubSelections",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                "type": "MultiSelectSelection[]",
                "defaultValue": "[\r\n  {name: 'Show Breakdowns', selected: true, disabled: false, draggable: true, element:null},\r\n]"
            },
            {
                "name": "componentData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/report-builder/src/app/page/report-list/mock-data.ts",
                "type": "any",
                "defaultValue": "{\n\n  \t\"messages\": {\n\t\t\"message\": null\n\t},\n\t\"componentsList\": [\n\t\t{\n\t\t\t\"componentName\": \"REPORT_HEADER\",\n\t\t\t\"componentId\": 0,\n\t\t\t\"htmlId\": \"report_header\",\n\t\t\t\"layoutRow\": null,\n\t\t\t\"layoutColumn\": null,\n\t\t\t\"width\": null,\n\t\t\t\"elementsList\": [\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 101,\n\t\t\t\t\t\"elementName\": \"REPORT_NAME\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"Portfolio Snapshot Summary\",\n\t\t\t\t\t\"elementValue\": \"Portfolio Snapshot Summary\",\n\t\t\t\t\t\"elementCategory\": \"TEXT_BOX\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 1\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 102,\n\t\t\t\t\t\"elementName\": \"REPORT_TYPE\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"Combined Account Portfolio\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TEXT_BOX\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 2\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 104,\n\t\t\t\t\t\"elementName\": \"PREPARED_FOR\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"PREPARED FOR\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TEXT_BOX\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 3\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 105,\n\t\t\t\t\t\"elementName\": \"LOGO\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"logo\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"PLACEHOLDER\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 4\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"componentName\": \"PORTFOLIO_PERFORMANCE\",\n\t\t\t\"componentId\": 1,\n\t\t\t\"htmlId\": \"portfolio_performance\",\n\t\t\t\"layoutRow\": null,\n\t\t\t\"layoutColumn\": null,\n\t\t\t\"width\": null,\n\t\t\t\"elementsList\": [\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 1,\n\t\t\t\t\t\"elementName\": \"TABLE_HEADER\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"SELECTED_PERIOD\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TIME_PERIOD\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 1\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 2,\n\t\t\t\t\t\"elementName\": \"TABLE_HEADER\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"QUARTER_TO_DATE\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TIME_PERIOD\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 2\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 3,\n\t\t\t\t\t\"elementName\": \"TABLE_HEADER\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"YEAR_TO_DATE\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TIME_PERIOD\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 3\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 4,\n\t\t\t\t\t\"elementName\": \"TABLE_HEADER\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"LAST_QUARTER\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TIME_PERIOD\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 4\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 5,\n\t\t\t\t\t\"elementName\": \"TABLE_HEADER\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"LAST_YEAR\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TIME_PERIOD\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 5\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 6,\n\t\t\t\t\t\"elementName\": \"TABLE_HEADER\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"ONE_YEAR\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TIME_PERIOD\",\n\t\t\t\t\t\"defaultDisplay\": \"N\",\n\t\t\t\t\t\"sortOrder\": 6\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 7,\n\t\t\t\t\t\"elementName\": \"TABLE_HEADER\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"THREE_YEAR\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TIME_PERIOD\",\n\t\t\t\t\t\"defaultDisplay\": \"N\",\n\t\t\t\t\t\"sortOrder\": 7\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 8,\n\t\t\t\t\t\"elementName\": \"TABLE_HEADER\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"FIVE_YEAR\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TIME_PERIOD\",\n\t\t\t\t\t\"defaultDisplay\": \"N\",\n\t\t\t\t\t\"sortOrder\": 8\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 9,\n\t\t\t\t\t\"elementName\": \"TABLE_HEADER\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"TEN_YEAR\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TIME_PERIOD\",\n\t\t\t\t\t\"defaultDisplay\": \"N\",\n\t\t\t\t\t\"sortOrder\": 9\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 10,\n\t\t\t\t\t\"elementName\": \"TABLE_HEADER\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"SINCE_START_DATE\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TIME_PERIOD\",\n\t\t\t\t\t\"defaultDisplay\": \"N\",\n\t\t\t\t\t\"sortOrder\": 10\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 11,\n\t\t\t\t\t\"elementName\": \"TABLE_HEADER\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"MONTH_TO_DATE\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TIME_PERIOD\",\n\t\t\t\t\t\"defaultDisplay\": \"N\",\n\t\t\t\t\t\"sortOrder\": 11\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 12,\n\t\t\t\t\t\"elementName\": \"TABLE_HEADER\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"LAST_MONTH\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TIME_PERIOD\",\n\t\t\t\t\t\"defaultDisplay\": \"N\",\n\t\t\t\t\t\"sortOrder\": 12\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 13,\n\t\t\t\t\t\"elementName\": \"TABLE_HEADER\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"CALENDAR_YEAR_1\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TIME_PERIOD\",\n\t\t\t\t\t\"defaultDisplay\": \"N\",\n\t\t\t\t\t\"sortOrder\": 13\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 14,\n\t\t\t\t\t\"elementName\": \"TABLE_HEADER\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"CALENDAR_YEAR_2\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TIME_PERIOD\",\n\t\t\t\t\t\"defaultDisplay\": \"N\",\n\t\t\t\t\t\"sortOrder\": 14\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 15,\n\t\t\t\t\t\"elementName\": \"TABLE_HEADER\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"CALENDAR_YEAR_3\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TIME_PERIOD\",\n\t\t\t\t\t\"defaultDisplay\": \"N\",\n\t\t\t\t\t\"sortOrder\": 15\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 106,\n\t\t\t\t\t\"elementName\": \"TABLE_ROW\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"Beginning Value\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"ENTITY_ROW\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 1\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 107,\n\t\t\t\t\t\"elementName\": \"TABLE_ROW\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"Net Contribution\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"ENTITY_ROW\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 2\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 108,\n\t\t\t\t\t\"elementName\": \"TABLE_ROW\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"Change In Value\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"ENTITY_ROW\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 3\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 109,\n\t\t\t\t\t\"elementName\": \"TABLE_ROW\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"Ending Value\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"ENTITY_ROW\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 4\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 110,\n\t\t\t\t\t\"elementName\": \"TABLE_ROW\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"Return\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"ENTITY_ROW\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 5\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 111,\n\t\t\t\t\t\"elementName\": \"TABLE_ROW\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"Benchmarks\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"ENTITY_ROW\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 6\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 112,\n\t\t\t\t\t\"elementName\": \"comp_title\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"Component Title\",\n\t\t\t\t\t\"elementValue\": \"Portfolio Return\",\n\t\t\t\t\t\"elementCategory\": \"TEXT_BOX\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 1\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"componentName\": \"PORTFOLIO_VALUE\",\n\t\t\t\"componentId\": 2,\n\t\t\t\"htmlId\": \"portfolio_value\",\n\t\t\t\"layoutRow\": null,\n\t\t\t\"layoutColumn\": null,\n\t\t\t\"width\": null,\n\t\t\t\"elementsList\": [\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 112,\n\t\t\t\t\t\"elementName\": \"comp_title\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"Component Title\",\n\t\t\t\t\t\"elementValue\": \"Portfolio Value\",\n\t\t\t\t\t\"elementCategory\": \"TEXT_BOX\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 1\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 124,\n\t\t\t\t\t\"elementName\": \"PVB_CHART_RADIO1\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"BV_Investments\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"RADIO\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 1\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 125,\n\t\t\t\t\t\"elementName\": \"PVB_CHART_RADIO1\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"Investments_Since_Inception\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"RADIO\",\n\t\t\t\t\t\"defaultDisplay\": \"N\",\n\t\t\t\t\t\"sortOrder\": 1\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 126,\n\t\t\t\t\t\"elementName\": \"PVB_CHART_RADIO1\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"NO_INVESTMENT_LINE\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"RADIO\",\n\t\t\t\t\t\"defaultDisplay\": \"N\",\n\t\t\t\t\t\"sortOrder\": 1\n        },\n        {\n\t\t\t\t\t\"elementId\": 124,\n\t\t\t\t\t\"elementName\": \"PVB_CHART_RADIO2\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"BV_Investments\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"RADIO\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 1\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 125,\n\t\t\t\t\t\"elementName\": \"PVB_CHART_RADIO2\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"Investments_Since_Inception\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"RADIO\",\n\t\t\t\t\t\"defaultDisplay\": \"N\",\n\t\t\t\t\t\"sortOrder\": 1\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 126,\n\t\t\t\t\t\"elementName\": \"PVB_CHART_RADIO2\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"NO_INVESTMENT_LINE\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"RADIO\",\n\t\t\t\t\t\"defaultDisplay\": \"N\",\n\t\t\t\t\t\"sortOrder\": 1\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 127,\n\t\t\t\t\t\"elementName\": \"PVB_CHART_DD1\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"SELECTED_PERIOD\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"DROPDOWN\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 1\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 128,\n\t\t\t\t\t\"elementName\": \"PVB_CHART_DD1\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"SINCE_START_DATE\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"DROPDOWN\",\n\t\t\t\t\t\"defaultDisplay\": \"N\",\n\t\t\t\t\t\"sortOrder\": 1\n        },\n        {\n\t\t\t\t\t\"elementId\": 127,\n\t\t\t\t\t\"elementName\": \"PVB_CHART_DD2\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"SELECTED_PERIOD\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"DROPDOWN\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 1\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 128,\n\t\t\t\t\t\"elementName\": \"PVB_CHART_DD2\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"SINCE_START_DATE\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"DROPDOWN\",\n\t\t\t\t\t\"defaultDisplay\": \"N\",\n\t\t\t\t\t\"sortOrder\": 1\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 129,\n\t\t\t\t\t\"elementName\": \"PVB_CHART\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"BENCHMARK_1\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"FLAG\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 1\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 130,\n\t\t\t\t\t\"elementName\": \"PVB_CHART\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"BENCHMARK_2\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"FLAG\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 1\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"componentName\": \"ACCOUNT_PERFORMANCE\",\n\t\t\t\"componentId\": 3,\n\t\t\t\"htmlId\": \"account_performance\",\n\t\t\t\"layoutRow\": null,\n\t\t\t\"layoutColumn\": null,\n\t\t\t\"width\": null,\n\t\t\t\"elementsList\": [\n        {\n\t\t\t\t\t\"elementId\": 118,\n\t\t\t\t\t\"elementName\": \"TABLE_HEADER\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"ACCOUNT_NUMBER\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TIME_PERIOD\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 1\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 119,\n\t\t\t\t\t\"elementName\": \"TABLE_HEADER\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"START_DATE\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TIME_PERIOD\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 2\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 120,\n\t\t\t\t\t\"elementName\": \"TABLE_HEADER\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"VALUE\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TIME_PERIOD\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 3\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 121,\n\t\t\t\t\t\"elementName\": \"TABLE_HEADER\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"PERCENT\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TIME_PERIOD\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 4\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 1,\n\t\t\t\t\t\"elementName\": \"TABLE_HEADER\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"SELECTED_PERIOD\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TIME_PERIOD\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 5\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 2,\n\t\t\t\t\t\"elementName\": \"TABLE_HEADER\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"QUARTER_TO_DATE\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TIME_PERIOD\",\n\t\t\t\t\t\"defaultDisplay\": \"N\",\n\t\t\t\t\t\"sortOrder\": 5\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 3,\n\t\t\t\t\t\"elementName\": \"TABLE_HEADER\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"YEAR_TO_DATE\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TIME_PERIOD\",\n\t\t\t\t\t\"defaultDisplay\": \"N\",\n\t\t\t\t\t\"sortOrder\": 6\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 4,\n\t\t\t\t\t\"elementName\": \"TABLE_HEADER\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"LAST_QUARTER\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TIME_PERIOD\",\n\t\t\t\t\t\"defaultDisplay\": \"N\",\n\t\t\t\t\t\"sortOrder\": 9\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 5,\n\t\t\t\t\t\"elementName\": \"TABLE_HEADER\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"LAST_YEAR\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TIME_PERIOD\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 10\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 6,\n\t\t\t\t\t\"elementName\": \"TABLE_HEADER\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"ONE_YEAR\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TIME_PERIOD\",\n\t\t\t\t\t\"defaultDisplay\": \"N\",\n\t\t\t\t\t\"sortOrder\": 11\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 7,\n\t\t\t\t\t\"elementName\": \"TABLE_HEADER\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"THREE_YEAR\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TIME_PERIOD\",\n\t\t\t\t\t\"defaultDisplay\": \"N\",\n\t\t\t\t\t\"sortOrder\": 12\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 8,\n\t\t\t\t\t\"elementName\": \"TABLE_HEADER\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"FIVE_YEAR\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TIME_PERIOD\",\n\t\t\t\t\t\"defaultDisplay\": \"N\",\n\t\t\t\t\t\"sortOrder\": 13\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 9,\n\t\t\t\t\t\"elementName\": \"TABLE_HEADER\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"TEN_YEAR\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TIME_PERIOD\",\n\t\t\t\t\t\"defaultDisplay\": \"N\",\n\t\t\t\t\t\"sortOrder\": 14\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 10,\n\t\t\t\t\t\"elementName\": \"TABLE_HEADER\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"SINCE_START_DATE\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TIME_PERIOD\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 15\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 11,\n\t\t\t\t\t\"elementName\": \"TABLE_HEADER\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"MONTH_TO_DATE\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TIME_PERIOD\",\n\t\t\t\t\t\"defaultDisplay\": \"N\",\n\t\t\t\t\t\"sortOrder\": 16\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 12,\n\t\t\t\t\t\"elementName\": \"TABLE_HEADER\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"LAST_MONTH\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TIME_PERIOD\",\n\t\t\t\t\t\"defaultDisplay\": \"N\",\n\t\t\t\t\t\"sortOrder\": 17\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 13,\n\t\t\t\t\t\"elementName\": \"TABLE_HEADER\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"CALENDAR_YEAR_1\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TIME_PERIOD\",\n\t\t\t\t\t\"defaultDisplay\": \"N\",\n\t\t\t\t\t\"sortOrder\": 18\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 14,\n\t\t\t\t\t\"elementName\": \"TABLE_HEADER\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"CALENDAR_YEAR_2\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TIME_PERIOD\",\n\t\t\t\t\t\"defaultDisplay\": \"N\",\n\t\t\t\t\t\"sortOrder\": 19\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 15,\n\t\t\t\t\t\"elementName\": \"TABLE_HEADER\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"CALENDAR_YEAR_3\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TIME_PERIOD\",\n\t\t\t\t\t\"defaultDisplay\": \"N\",\n\t\t\t\t\t\"sortOrder\": 20\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 112,\n\t\t\t\t\t\"elementName\": \"comp_title\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"Component Title\",\n\t\t\t\t\t\"elementValue\": \"Account Performance\",\n\t\t\t\t\t\"elementCategory\": \"TEXT_BOX\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 1\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 117,\n\t\t\t\t\t\"elementName\": \"CHECK_BOX\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"INCLUDE_CLOSED_ACCOUNTS\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"CHECK_BOX\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 1\n\t\t\t\t},\n\t\t\t\t\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 122,\n\t\t\t\t\t\"elementName\": \"AP_DROP_DOWN\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"UPTO_10_ACCOUNTS\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"DROPDOWN\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 1\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 123,\n\t\t\t\t\t\"elementName\": \"AP_DROP_DOWN\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"ALL_ACCOUNTS\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"DROPDOWN\",\n\t\t\t\t\t\"defaultDisplay\": \"N\",\n\t\t\t\t\t\"sortOrder\": 2\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"componentName\": \"ASSET_CATEGORY\",\n\t\t\t\"componentId\": 4,\n\t\t\t\"htmlId\": \"asset_category\",\n\t\t\t\"layoutRow\": null,\n\t\t\t\"layoutColumn\": null,\n\t\t\t\"width\": null,\n\t\t\t\"elementsList\": [\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 112,\n\t\t\t\t\t\"elementName\": \"comp_title\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"Component Title\",\n\t\t\t\t\t\"elementValue\": \"Asset Type\",\n\t\t\t\t\t\"elementCategory\": \"TEXT_BOX\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 1\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 113,\n\t\t\t\t\t\"elementName\": \"ASTALLOC\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"ASSET_TYPE\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"DROPDOWN\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 1\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 114,\n\t\t\t\t\t\"elementName\": \"ASTALLOC\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"INVESTMENT_STYLE\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"DROPDOWN\",\n\t\t\t\t\t\"defaultDisplay\": \"N\",\n\t\t\t\t\t\"sortOrder\": 2\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"componentName\": \"REPORT_FOOTER\",\n\t\t\t\"componentId\": 5,\n\t\t\t\"htmlId\": \"report_footer\",\n\t\t\t\"layoutRow\": null,\n\t\t\t\"layoutColumn\": null,\n\t\t\t\"width\": null,\n\t\t\t\"elementsList\": [\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 103,\n\t\t\t\t\t\"elementName\": \"PREPARED_BY\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"PREPARED BY\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TEXT_BOX\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 1\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"componentName\": \"PORTFOLIO_SUMMARY\",\n\t\t\t\"componentId\": 6,\n\t\t\t\"htmlId\": \"portfolio_summary\",\n\t\t\t\"layoutRow\": null,\n\t\t\t\"layoutColumn\": null,\n\t\t\t\"width\": null,\n\t\t\t\"elementsList\": [\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 112,\n\t\t\t\t\t\"elementName\": \"comp_title\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"Component Title\",\n\t\t\t\t\t\"elementValue\": \"Gain/Loss\",\n\t\t\t\t\t\"elementCategory\": \"TEXT_BOX\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 1\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 115,\n\t\t\t\t\t\"elementName\": \"realized\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"Realized\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"CHECK_BOX\",\n\t\t\t\t\t\"defaultDisplay\": \"N\",\n\t\t\t\t\t\"sortOrder\": 1\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 116,\n\t\t\t\t\t\"elementName\": \"unrealized\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"Unrealized\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"CHECK_BOX\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 2\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t],\n  \"requestId\": \"0684d393-866f-497f-b500-017230159f4f\"\n}"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/report-builder/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/wri-common/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/wri-header/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/wri-footer/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/wri-holdings/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "env",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/report-builder/src/app/page/report-list/mock-data.ts",
                "type": "any",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/report-builder/src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/report-builder/src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "Holdings",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "holdingsMultiSelection",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                "type": "MultiSelectSelection[]",
                "defaultValue": "[\r\n  {selected: true, draggable: true, disabled: false, element: null, name: \"Asset Name\"},\r\n  {selected: true, draggable: true, disabled: false, element: null, name: \"Ticker Synbol\"},\r\n  {selected: true, draggable: true, disabled: false, element: null, name: \"% of Account\"},\r\n  {selected: true, draggable: true, disabled: false, element: null, name: \"Quantity\"},\r\n  {selected: true, draggable: true, disabled: false, element: null, name: \"Price ($)\"},\r\n  {selected: true, draggable: true, disabled: false, element: null, name: \"Value ($)\"},\r\n  {selected: true, draggable: true, disabled: false, element: null, name: \"Cost ($)\"},\r\n  {selected: true, draggable: true, disabled: false, element: null, name: \"Unrealized Gain/Loss ($)\"},\r\n  {selected: true, draggable: true, disabled: false, element: null, name: \"Current Yield (%)\"},\r\n  {selected: true, draggable: true, disabled: false, element: null, name: \"Estimated Annual Income ($)\"},\r\n  {selected: false, draggable: true, disabled: false, element: null, name: \"Rate of Return\"},\r\n  {selected: false, draggable: true, disabled: false, element: null, name: \"Beginning Value\"},\r\n  {selected: false, draggable: true, disabled: false, element: null, name: \"Net Contribution\"},\r\n  {selected: false, draggable: true, disabled: false, element: null, name: \"Change In Value\"},\r\n  {selected: false, draggable: true, disabled: false, element: null, name: \"Management Company\"},\r\n  {selected: false, draggable: true, disabled: false, element: null, name: \"Morningstar Rating\"},\r\n  {selected: false, draggable: true, disabled: false, element: null, name: \"Asset Type\"},\r\n  {selected: false, draggable: true, disabled: false, element: null, name: \"ACL 1 Name\"},\r\n  {selected: false, draggable: true, disabled: false, element: null, name: \"ACL 2 Name\"},\r\n  {selected: false, draggable: true, disabled: false, element: null, name: \"ACL 3 Name\"},\r\n  {selected: false, draggable: true, disabled: false, element: null, name: \"Investor ID\"},\r\n  {selected: false, draggable: true, disabled: false, element: null, name: \"Investor Name\"},\r\n  {selected: false, draggable: true, disabled: false, element: null, name: \"Account Number\"},\r\n  {selected: false, draggable: true, disabled: false, element: null, name: \"Account Name\"},\r\n  {selected: false, draggable: true, disabled: false, element: null, name: \"Account Name / Manager / Style Name as applicable\"},\r\n  {selected: false, draggable: true, disabled: false, element: null, name: \"Manager Name\"},\r\n  {selected: false, draggable: true, disabled: false, element: null, name: \"Product Name\"},\r\n  {selected: false, draggable: true, disabled: false, element: null, name: \"Style\"},\r\n  {selected: false, draggable: true, disabled: false, element: null, name: \"Account Type\"},\r\n  {selected: false, draggable: true, disabled: false, element: null, name: \"Tax Status\"},\r\n]"
            },
            {
                "name": "holdingsSet1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                "type": "",
                "defaultValue": "new MultiSelectSet()"
            },
            {
                "name": "holdingsValueSets",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                "type": "MultiSelectSet[]",
                "defaultValue": "[]"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "netContributionSubSelections",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                "type": "MultiSelectSelection[]",
                "defaultValue": "[\r\n  {name: 'Show Breakdowns', selected: true, disabled: false, draggable: true, element:null, selectionDetails:['Contributions', 'Withdrawals'], showDetails:false},\r\n]"
            },
            {
                "name": "PortfolioReturn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "PortfolioReturnR1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "PortfolioReturnSets",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                "type": "MultiSelectSet[]",
                "defaultValue": "[]"
            },
            {
                "name": "PortfolioReturnSetsR1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                "type": "MultiSelectSet[]",
                "defaultValue": "[]"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "PVB_CHART_OPTIONS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/report-builder/src/app/page/report-list/mock-data.ts",
                "type": "any",
                "defaultValue": "{\n  chart: \n  {\n    width: 600,\n    height: 300,\n    type : 'area',\n    marginLeft : 25 ,\n    marginRight : 12,\n    spacingLeft : 1,\n    spacingRight : 1\n  },\n  title: {text: ''},    \n  credits: {enabled: false},\n  subtitle: {    text: ''},\n  yAxis: \n  {    \n    title: {        text: ''    } , \n    allowDecimals : true,\n    gridLineColor : '#D9D9D9',\n    gridLineWidth : 0.5,\n    labels : \n    {\n      formatter : function() {return this.value/1000000.0},\n      style : {color : '#000000' , fontSize : '11px'},\n      y : 2,\n    },\n    min :0, \n    max : 5000000,\n    offset : -10, \n    tickPixelInterval : 20 \n  },\n  xAxis: \n  {       \n    //categories:['Q1,07','','','','Q4,07','','','','Q4,08','','','','Q4,09','','','','Q4,10','','','','Q4,11','','','','Q4,12','','','','Q4,13','','','','Q4,14','','','','Q4,15','','','Sep 19*',],      \n    categories:[],      \n    labels: {               style: {                        fontSize: '11px', color : '#000000',fontBold : true      },rotation : 0,step : 1, y : 12, },\n    tickPositioner :function() {return [0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,39,]} ,\n    tickInterval:1,\n    tickWidth: 0.5,\n    tickmarkPlacement: 'on',\n    lineColor : '#816A44',\n    lineWidth : 0.50,\n    tickColor : '#816A44',\n    tickLength : 4,\n    endOfTick : false,\n  },\n  legend: \n  {    \n    layout: 'horizontal',        \n    align: 'center',  \n    itemDistance : 20 , \n    alignColumns : false,     \n    verticalAlign: 'bottom',        \n    itemStyle: {fontSize: '11px',},\n    symbolWidth : 9.6,\n    symbolRadius : 1.92,\n    margin : 3 \n  },\n  plotOptions: \n  {    \n    series: \n    {        \n      label: { connectorAllowed: false }, \n      marker : {enabled : false} ,  \n    },\n    area :{fillOpacity : 0}, \n  },\n  series: \n  [\n    /*{\n      name:'performanceTest',\n      dashStyle:'solid',\n      color:'#1a4ca0',\n      lineWidth:2,\n      showInLegend:true,\n      data: \n      [\n        114562.28,849146.33,844476.59,845664.97,820169.67,\n        774561.31,758455.21,698175.67,506048.84,462798.03,\n        498081.03,784081.39,789463.24,808761.01,1075819.05,\n        1134157.35,1176522.97,1206313.46,1246694.43,1364204.8,\n        1398890.89,1476796.65,1435257.57,1496548.42,1485284.58,\n        1518950.25,1481019.26,1510572.09,1742983.5,1795233.68,\n        1863044.53,1938174.77,1934126.31,2380195.76,2330941.61,\n        2307718.45,2346576.47,2405630.93,2571953.81,2782050.13,\n      ]\n    },\n    {\n      name:'S&P 500',\n      dashStyle:'solid',\n      color:'#eaaa33',\n      lineWidth:1,\n      showInLegend:true,\n      data: \n      [\n        114562.28,848438.63,863424.4,874993.49,840126.88,\n        765858.83,739809.96,672348.47,488359.34,409574.55,\n        440358.35,730170.05,756019.41,794337.88,967445.36,\n        1092931.6,1224348.0,1277463.1,1308396.79,1324265.38,\n        1480111.63,1678310.38,1617655.52,1721442.88,1692089.71,\n        1869877.62,1889512.61,1979936.58,2400648.91,2472087.86,\n        2592490.02,2710346.63,2834272.98,3342948.02,3355243.57,\n        3315770.97,3655940.45,3763373.6,3854317.13,4104682.43,\n      ]\n    },\n    {\n      name:'Citigroup 1 month CD',\n      dashStyle:'solid',\n      color:'#777777',\n      lineWidth:1,\n      showInLegend:true,\n      data: \n      [\n        114562.28,859422.1,832370.17,837975.53,842916.17,\n        854294.1,854524.66,854045.34,822953.02,798781.81,\n        765580.87,981035.7,963961.99,961954.98,1240653.35,\n        1256796.5,1270044.56,1251932.4,1281629.94,1487095.12,\n        1486931.03,1498871.41,1485239.87,1487213.43,1464731.53,\n        1463730.13,1429863.52,1421883.82,1626323.05,1654744.86,\n        1646426.73,1736411.12,1728816.23,2209630.2,2213719.57,\n        2396585.51,2500747.89,2555358.72,2554620.53,2714540.59,\n      ]\n    },\n    {\n      name:'BEGINNING VALUE + INVESTMENTS',\n      dashStyle:'Dash',\n      color:'#000000',\n      lineWidth:1,\n      showInLegend:false,\n      data: [\n        114562.27984449844,848984.2498444985,811114.5698444985,805288.1898444985,799594.2298444986,\n        803055.4598444985,797511.6198444986,791600.3398444986,738853.0198444986,713766.4998444986,\n        679847.4298444986,894725.0998444986,878421.4698444986,876029.8898444986,1155751.5498444985,\n        1171010.6098444986,1183536.6998444987,1165266.0298444987,1194359.5498444987,1399168.259844499,\n        1398219.079844499,1409378.569844499,1394961.019844499,1396226.549844499,1373361.879844499,\n        1371698.4998444992,1337240.5698444992,1328679.4098444993,1532476.5998444993,1559873.0398444992,\n        1550885.5498444992,1640213.3998444993,1631358.4198444993,2111462.699844499,2114660.819844499,\n        2296554.619844499,2399702.429844499,2453841.729844499,2452079.2398444987,2611040.29,\n      ]\n    },\n    {\n      type:'line',\n      name:'BEGINNING VALUE + INVESTMENTS',\n      color:'#000000',\n      dashStyle: 'Dash',\n      lineWidth: 1,\n      showInLegend: true,\n      data: [],\n      marker : {enabled : false}\n    },*/\n  ],\n  /*responsive: \n  {    \n    rules: \n    [\n      {        \n        condition: { maxWidth: 200},        \n        chartOptions: \n        {            \n          legend: \n          {                \n            layout: 'horizontal',                \n            align: 'center', \n            itemDistance : 20,                \n            verticalAlign: 'bottom'            \n          }        \n        }    \n      }\n    ]\n  }*/\n}"
            },
            {
                "name": "reportData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/report-builder/src/app/page/report-list/mock-data.ts",
                "type": "any",
                "defaultValue": "{\n    \"messages\": {\n      \"message\": null\n    },\n    \"reportId\": 10110,\n    \"reportName\": \"pss-ui-demo6\",\n    \"multiPage\": \"N\",\n    \"orientation\": \"LANDSCAPE\",\n    \"componentsList\": [\n      {\n        \"componentName\": \"REPORT_HEADER\",\n        \"componentId\": 0,\n        \"htmlId\": \"report_header\",\n        \"layoutRow\": \"1\",\n        \"layoutColumn\": \"1\",\n        \"width\": \"100\",\n        \"divPosition\": \"null\",\n        \"uiProperties\": \"{\\\"cols\\\":10,\\\"rows\\\":1,\\\"y\\\":0,\\\"x\\\":0,\\\"maxItemRows\\\":1,\\\"minItemRows\\\":1,\\\"htmlId\\\":\\\"report_header\\\",\\\"dragEnabled\\\":false,\\\"resizeEnabled\\\":false,\\\"totalCols\\\":10}\",\n        \"elementsList\": [\n          {\n            \"elementId\": 101,\n            \"elementName\": \"REPORT_NAME\",\n            \"elementDisplayPlaceHolder\": \"Portfolio Snapshot Summary\",\n            \"elementValue\": \"Portfolio Snapshot Summary\",\n            \"elementCategory\": \"TEXT_BOX\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 1\n          },\n          {\n            \"elementId\": 102,\n            \"elementName\": \"REPORT_TYPE\",\n            \"elementDisplayPlaceHolder\": \"Combined Account Portfolio\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TEXT_BOX\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 2\n          },\n          {\n            \"elementId\": 104,\n            \"elementName\": \"PREPARED_FOR\",\n            \"elementDisplayPlaceHolder\": \"PREPARED FOR\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TEXT_BOX\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 3\n          },\n          {\n            \"elementId\": 105,\n            \"elementName\": \"LOGO\",\n            \"elementDisplayPlaceHolder\": \"logo\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"CHECK_BOX\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 4\n          }\n        ]\n      },\n      {\n        \"componentName\": \"PORTFOLIO_PERFORMANCE\",\n        \"componentId\": 1,\n        \"htmlId\": \"portfolio_performance\",\n        \"layoutRow\": \"2\",\n        \"layoutColumn\": \"1\",\n        \"width\": \"60\",\n        \"divPosition\": \"null\",\n        \"uiProperties\": \"{\\\"cols\\\":6,\\\"rows\\\":2,\\\"x\\\":0,\\\"y\\\":1,\\\"maxItemRows\\\":2,\\\"minItemRows\\\":2,\\\"htmlId\\\":\\\"portfolio_performance\\\",\\\"dragEnabled\\\":true,\\\"resizeEnabled\\\":true,\\\"totalCols\\\":10}\",\n        \"elementsList\": [\n          {\n            \"elementId\": 1,\n            \"elementName\": \"TABLE_HEADER\",\n            \"elementDisplayPlaceHolder\": \"SELECTED_PERIOD\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TIME_PERIOD\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 3\n          },\n          {\n            \"elementId\": 2,\n            \"elementName\": \"TABLE_HEADER\",\n            \"elementDisplayPlaceHolder\": \"QUARTER_TO_DATE\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TIME_PERIOD\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 4\n          },\n          {\n            \"elementId\": 3,\n            \"elementName\": \"TABLE_HEADER\",\n            \"elementDisplayPlaceHolder\": \"YEAR_TO_DATE\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TIME_PERIOD\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 5\n          },\n          {\n            \"elementId\": 4,\n            \"elementName\": \"TABLE_HEADER\",\n            \"elementDisplayPlaceHolder\": \"LAST_QUARTER\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TIME_PERIOD\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 6\n          },\n          {\n            \"elementId\": 5,\n            \"elementName\": \"TABLE_HEADER\",\n            \"elementDisplayPlaceHolder\": \"LAST_YEAR\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TIME_PERIOD\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 7\n          },\n          {\n            \"elementId\": 6,\n            \"elementName\": \"TABLE_HEADER\",\n            \"elementDisplayPlaceHolder\": \"ONE_YEAR\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TIME_PERIOD\",\n            \"defaultDisplay\": \"N\",\n            \"sortOrder\": 8\n          },\n          {\n            \"elementId\": 7,\n            \"elementName\": \"TABLE_HEADER\",\n            \"elementDisplayPlaceHolder\": \"THREE_YEAR\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TIME_PERIOD\",\n            \"defaultDisplay\": \"N\",\n            \"sortOrder\": 9\n          },\n          {\n            \"elementId\": 8,\n            \"elementName\": \"TABLE_HEADER\",\n            \"elementDisplayPlaceHolder\": \"FIVE_YEAR\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TIME_PERIOD\",\n            \"defaultDisplay\": \"N\",\n            \"sortOrder\": 10\n          },\n          {\n            \"elementId\": 9,\n            \"elementName\": \"TABLE_HEADER\",\n            \"elementDisplayPlaceHolder\": \"TEN_YEAR\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TIME_PERIOD\",\n            \"defaultDisplay\": \"N\",\n            \"sortOrder\": 11\n          },\n          {\n            \"elementId\": 10,\n            \"elementName\": \"TABLE_HEADER\",\n            \"elementDisplayPlaceHolder\": \"SINCE_START_DATE\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TIME_PERIOD\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 2\n          },\n          {\n            \"elementId\": 11,\n            \"elementName\": \"TABLE_HEADER\",\n            \"elementDisplayPlaceHolder\": \"MONTH_TO_DATE\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TIME_PERIOD\",\n            \"defaultDisplay\": \"N\",\n            \"sortOrder\": 12\n          },\n          {\n            \"elementId\": 12,\n            \"elementName\": \"TABLE_HEADER\",\n            \"elementDisplayPlaceHolder\": \"LAST_MONTH\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TIME_PERIOD\",\n            \"defaultDisplay\": \"N\",\n            \"sortOrder\": 13\n          },\n          {\n            \"elementId\": 13,\n            \"elementName\": \"TABLE_HEADER\",\n            \"elementDisplayPlaceHolder\": \"CALENDAR_YEAR_1\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TIME_PERIOD\",\n            \"defaultDisplay\": \"N\",\n            \"sortOrder\": 14\n          },\n          {\n            \"elementId\": 14,\n            \"elementName\": \"TABLE_HEADER\",\n            \"elementDisplayPlaceHolder\": \"CALENDAR_YEAR_2\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TIME_PERIOD\",\n            \"defaultDisplay\": \"N\",\n            \"sortOrder\": 15\n          },\n          {\n            \"elementId\": 15,\n            \"elementName\": \"TABLE_HEADER\",\n            \"elementDisplayPlaceHolder\": \"CALENDAR_YEAR_3\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TIME_PERIOD\",\n            \"defaultDisplay\": \"N\",\n            \"sortOrder\": 16\n          },\n          {\n            \"elementId\": 106,\n            \"elementName\": \"TABLE_ROW\",\n            \"elementDisplayPlaceHolder\": \"Beginning Value\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"ENTITY_ROW\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 1\n          },\n          {\n            \"elementId\": 107,\n            \"elementName\": \"TABLE_ROW\",\n            \"elementDisplayPlaceHolder\": \"Net Contribution\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"ENTITY_ROW\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 2\n          },\n          {\n            \"elementId\": 108,\n            \"elementName\": \"TABLE_ROW\",\n            \"elementDisplayPlaceHolder\": \"Change In Value\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"ENTITY_ROW\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 3\n          },\n          {\n            \"elementId\": 109,\n            \"elementName\": \"TABLE_ROW\",\n            \"elementDisplayPlaceHolder\": \"Ending Value\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"ENTITY_ROW\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 4\n          },\n          {\n            \"elementId\": 110,\n            \"elementName\": \"TABLE_ROW\",\n            \"elementDisplayPlaceHolder\": \"Return\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"ENTITY_ROW\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 5\n          },\n          {\n            \"elementId\": 111,\n            \"elementName\": \"TABLE_ROW\",\n            \"elementDisplayPlaceHolder\": \"Benchmarks\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"ENTITY_ROW\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 6\n          },\n          {\n            \"elementId\": 112,\n            \"elementName\": \"comp_title\",\n            \"elementDisplayPlaceHolder\": \"Component Title\",\n            \"elementValue\": \"Portfolio Return\",\n            \"elementCategory\": \"TEXT_BOX\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 1\n          }\n        ]\n      },\n      {\n        \"componentName\": \"PORTFOLIO_VALUE\",\n        \"componentId\": 2,\n        \"htmlId\": \"portfolio_value\",\n        \"layoutRow\": \"2\",\n        \"layoutColumn\": \"2\",\n        \"width\": \"40\",\n        \"divPosition\": \"null\",\n        \"uiProperties\": \"{\\\"cols\\\":4,\\\"rows\\\":2,\\\"x\\\":6,\\\"y\\\":1,\\\"maxItemRows\\\":2,\\\"minItemRows\\\":2,\\\"htmlId\\\":\\\"portfolio_value\\\",\\\"dragEnabled\\\":true,\\\"resizeEnabled\\\":true,\\\"totalCols\\\":10}\",\n        \"elementsList\": [\n          {\n            \"elementId\": 112,\n            \"elementName\": \"comp_title\",\n            \"elementDisplayPlaceHolder\": \"Component Title\",\n            \"elementValue\": \"Portfolio Value\",\n            \"elementCategory\": \"TEXT_BOX\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 1\n          },\n          {\n            \"elementId\": 124,\n            \"elementName\": \"PVB_CHART\",\n            \"elementDisplayPlaceHolder\": \"BV_Investments\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"RADIO\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 1\n          },\n          {\n            \"elementId\": 125,\n            \"elementName\": \"PVB_CHART\",\n            \"elementDisplayPlaceHolder\": \"Investments_Since_Inception\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"RADIO\",\n            \"defaultDisplay\": \"N\",\n            \"sortOrder\": 1\n          },\n          {\n            \"elementId\": 126,\n            \"elementName\": \"PVB_CHART\",\n            \"elementDisplayPlaceHolder\": \"NO_INVESTMENT_LINE\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"RADIO\",\n            \"defaultDisplay\": \"N\",\n            \"sortOrder\": 1\n          },\n          {\n            \"elementId\": 127,\n            \"elementName\": \"PVB_CHART\",\n            \"elementDisplayPlaceHolder\": \"SELECTED_PERIOD\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"DROPDOWN\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 1\n          },\n          {\n            \"elementId\": 128,\n            \"elementName\": \"PVB_CHART\",\n            \"elementDisplayPlaceHolder\": \"SINCE_START_DATE\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"DROPDOWN\",\n            \"defaultDisplay\": \"N\",\n            \"sortOrder\": 1\n          },\n          {\n            \"elementId\": 129,\n            \"elementName\": \"PVB_CHART\",\n            \"elementDisplayPlaceHolder\": \"BENCHMARK_1\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"CHECK_BOX\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 1\n          },\n          {\n            \"elementId\": 130,\n            \"elementName\": \"PVB_CHART\",\n            \"elementDisplayPlaceHolder\": \"BENCHMARK_2\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"CHECK_BOX\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 1\n          }\n        ]\n      },\n      {\n        \"componentName\": \"ACCOUNT_PERFORMANCE\",\n        \"componentId\": 3,\n        \"htmlId\": \"account_performance\",\n        \"layoutRow\": \"4\",\n        \"layoutColumn\": \"1\",\n        \"width\": \"60\",\n        \"divPosition\": \"null\",\n        \"uiProperties\": \"{\\\"cols\\\":6,\\\"rows\\\":3,\\\"x\\\":0,\\\"y\\\":4,\\\"maxItemRows\\\":3,\\\"minItemRows\\\":3,\\\"htmlId\\\":\\\"account_performance\\\",\\\"dragEnabled\\\":true,\\\"resizeEnabled\\\":true,\\\"totalCols\\\":10}\",\n        \"elementsList\": [\n          {\n            \"elementId\": 1,\n            \"elementName\": \"TABLE_HEADER\",\n            \"elementDisplayPlaceHolder\": \"SELECTED_PERIOD\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TIME_PERIOD\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 7\n          },\n          {\n            \"elementId\": 2,\n            \"elementName\": \"TABLE_HEADER\",\n            \"elementDisplayPlaceHolder\": \"QUARTER_TO_DATE\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TIME_PERIOD\",\n            \"defaultDisplay\": \"N\",\n            \"sortOrder\": 8\n          },\n          {\n            \"elementId\": 3,\n            \"elementName\": \"TABLE_HEADER\",\n            \"elementDisplayPlaceHolder\": \"YEAR_TO_DATE\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TIME_PERIOD\",\n            \"defaultDisplay\": \"N\",\n            \"sortOrder\": 9\n          },\n          {\n            \"elementId\": 4,\n            \"elementName\": \"TABLE_HEADER\",\n            \"elementDisplayPlaceHolder\": \"LAST_QUARTER\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TIME_PERIOD\",\n            \"defaultDisplay\": \"N\",\n            \"sortOrder\": 10\n          },\n          {\n            \"elementId\": 5,\n            \"elementName\": \"TABLE_HEADER\",\n            \"elementDisplayPlaceHolder\": \"LAST_YEAR\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TIME_PERIOD\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 11\n          },\n          {\n            \"elementId\": 6,\n            \"elementName\": \"TABLE_HEADER\",\n            \"elementDisplayPlaceHolder\": \"ONE_YEAR\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TIME_PERIOD\",\n            \"defaultDisplay\": \"N\",\n            \"sortOrder\": 12\n          },\n          {\n            \"elementId\": 7,\n            \"elementName\": \"TABLE_HEADER\",\n            \"elementDisplayPlaceHolder\": \"THREE_YEAR\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TIME_PERIOD\",\n            \"defaultDisplay\": \"N\",\n            \"sortOrder\": 13\n          },\n          {\n            \"elementId\": 8,\n            \"elementName\": \"TABLE_HEADER\",\n            \"elementDisplayPlaceHolder\": \"FIVE_YEAR\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TIME_PERIOD\",\n            \"defaultDisplay\": \"N\",\n            \"sortOrder\": 14\n          },\n          {\n            \"elementId\": 9,\n            \"elementName\": \"TABLE_HEADER\",\n            \"elementDisplayPlaceHolder\": \"TEN_YEAR\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TIME_PERIOD\",\n            \"defaultDisplay\": \"N\",\n            \"sortOrder\": 15\n          },\n          {\n            \"elementId\": 10,\n            \"elementName\": \"TABLE_HEADER\",\n            \"elementDisplayPlaceHolder\": \"SINCE_START_DATE\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TIME_PERIOD\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 2\n          },\n          {\n            \"elementId\": 11,\n            \"elementName\": \"TABLE_HEADER\",\n            \"elementDisplayPlaceHolder\": \"MONTH_TO_DATE\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TIME_PERIOD\",\n            \"defaultDisplay\": \"N\",\n            \"sortOrder\": 16\n          },\n          {\n            \"elementId\": 12,\n            \"elementName\": \"TABLE_HEADER\",\n            \"elementDisplayPlaceHolder\": \"LAST_MONTH\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TIME_PERIOD\",\n            \"defaultDisplay\": \"N\",\n            \"sortOrder\": 17\n          },\n          {\n            \"elementId\": 13,\n            \"elementName\": \"TABLE_HEADER\",\n            \"elementDisplayPlaceHolder\": \"CALENDAR_YEAR_1\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TIME_PERIOD\",\n            \"defaultDisplay\": \"N\",\n            \"sortOrder\": 18\n          },\n          {\n            \"elementId\": 14,\n            \"elementName\": \"TABLE_HEADER\",\n            \"elementDisplayPlaceHolder\": \"CALENDAR_YEAR_2\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TIME_PERIOD\",\n            \"defaultDisplay\": \"N\",\n            \"sortOrder\": 19\n          },\n          {\n            \"elementId\": 15,\n            \"elementName\": \"TABLE_HEADER\",\n            \"elementDisplayPlaceHolder\": \"CALENDAR_YEAR_3\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TIME_PERIOD\",\n            \"defaultDisplay\": \"N\",\n            \"sortOrder\": 20\n          },\n          {\n            \"elementId\": 112,\n            \"elementName\": \"comp_title\",\n            \"elementDisplayPlaceHolder\": \"Component Title\",\n            \"elementValue\": \"Account Performance\",\n            \"elementCategory\": \"TEXT_BOX\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 1\n          },\n          {\n            \"elementId\": 117,\n            \"elementName\": \"CHECK_BOX\",\n            \"elementDisplayPlaceHolder\": \"INCLUDE_CLOSED_ACCOUNTS\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"CHECK_BOX\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 1\n          },\n          {\n            \"elementId\": 118,\n            \"elementName\": \"TABLE_HEADER\",\n            \"elementDisplayPlaceHolder\": \"ACCOUNT_NUMBER\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TABLE_HEADER\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 3\n          },\n          {\n            \"elementId\": 119,\n            \"elementName\": \"TABLE_HEADER\",\n            \"elementDisplayPlaceHolder\": \"START_DATE\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TABLE_HEADER\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 4\n          },\n          {\n            \"elementId\": 120,\n            \"elementName\": \"TABLE_HEADER\",\n            \"elementDisplayPlaceHolder\": \"VALUE\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TABLE_HEADER\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 5\n          },\n          {\n            \"elementId\": 121,\n            \"elementName\": \"TABLE_HEADER\",\n            \"elementDisplayPlaceHolder\": \"PERCENT\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TABLE_HEADER\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 6\n          },\n          {\n            \"elementId\": 122,\n            \"elementName\": \"AP_DROP_DOWN\",\n            \"elementDisplayPlaceHolder\": \"UPTO_10_ACCOUNTS\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"DROPDOWN\",\n            \"defaultDisplay\": \"N\",\n            \"sortOrder\": 1\n          },\n          {\n            \"elementId\": 123,\n            \"elementName\": \"AP_DROP_DOWN\",\n            \"elementDisplayPlaceHolder\": \"ALL_ACCOUNTS\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"DROPDOWN\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 2\n          }\n        ]\n      },\n      {\n        \"componentName\": \"ASSET_CATEGORY\",\n        \"componentId\": 4,\n        \"htmlId\": \"asset_category\",\n        \"layoutRow\": \"4\",\n        \"layoutColumn\": \"2\",\n        \"width\": \"40\",\n        \"divPosition\": \"null\",\n        \"uiProperties\": \"{\\\"cols\\\":4,\\\"rows\\\":3,\\\"x\\\":6,\\\"y\\\":4,\\\"maxItemRows\\\":3,\\\"minItemRows\\\":3,\\\"htmlId\\\":\\\"asset_category\\\",\\\"dragEnabled\\\":true,\\\"resizeEnabled\\\":true,\\\"totalCols\\\":10}\",\n        \"elementsList\": [\n          {\n            \"elementId\": 112,\n            \"elementName\": \"comp_title\",\n            \"elementDisplayPlaceHolder\": \"Component Title\",\n            \"elementValue\": \"Asset Type\",\n            \"elementCategory\": \"TEXT_BOX\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 1\n          },\n          {\n            \"elementId\": 113,\n            \"elementName\": \"ASTALLOC\",\n            \"elementDisplayPlaceHolder\": \"ASSET_TYPE\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"DROPDOWN\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 1\n          },\n          {\n            \"elementId\": 114,\n            \"elementName\": \"ASTALLOC\",\n            \"elementDisplayPlaceHolder\": \"INVESTMENT_STYLE\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"DROPDOWN\",\n            \"defaultDisplay\": \"N\",\n            \"sortOrder\": 2\n          },\n          {\n            \"elementId\": 131,\n            \"elementName\": \"ACL_1_DROP_DOWN\",\n            \"elementDisplayPlaceHolder\": \"UPTO 5 ASSET CATEGORIES\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"DROPDOWN\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 1\n          },\n          {\n            \"elementId\": 132,\n            \"elementName\": \"ACL_1_DROP_DOWN\",\n            \"elementDisplayPlaceHolder\": \"UPTO 10 ASSET CATEGORIES\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"DROPDOWN\",\n            \"defaultDisplay\": \"N\",\n            \"sortOrder\": 2\n          },\n          {\n            \"elementId\": 133,\n            \"elementName\": \"ACL_1_DROP_DOWN\",\n            \"elementDisplayPlaceHolder\": \"UPTO 15 ASSET CATEGORIES\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"DROPDOWN\",\n            \"defaultDisplay\": \"N\",\n            \"sortOrder\": 3\n          },\n          {\n            \"elementId\": 134,\n            \"elementName\": \"ACL_1_DROP_DOWN\",\n            \"elementDisplayPlaceHolder\": \"ALL ASSET CATEGORIES\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"DROPDOWN\",\n            \"defaultDisplay\": \"N\",\n            \"sortOrder\": 4\n          },\n          {\n            \"elementId\": 135,\n            \"elementName\": \"ACL_2_DROP_DOWN\",\n            \"elementDisplayPlaceHolder\": \"UPTO 5 INVESTMENT STYLES\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"DROPDOWN\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 1\n          },\n          {\n            \"elementId\": 136,\n            \"elementName\": \"ACL_2_DROP_DOWN\",\n            \"elementDisplayPlaceHolder\": \"UPTO 10 INVESTMENT STYLES\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"DROPDOWN\",\n            \"defaultDisplay\": \"N\",\n            \"sortOrder\": 2\n          },\n          {\n            \"elementId\": 137,\n            \"elementName\": \"ACL_2_DROP_DOWN\",\n            \"elementDisplayPlaceHolder\": \"UPTO 15 INVESTMENT STYLES\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"DROPDOWN\",\n            \"defaultDisplay\": \"N\",\n            \"sortOrder\": 3\n          },\n          {\n            \"elementId\": 138,\n            \"elementName\": \"ACL_2_DROP_DOWN\",\n            \"elementDisplayPlaceHolder\": \"ALL INVESTMENT STYLES\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"DROPDOWN\",\n            \"defaultDisplay\": \"N\",\n            \"sortOrder\": 4\n          }\n        ]\n      },\n      {\n        \"componentName\": \"REPORT_FOOTER\",\n        \"componentId\": 5,\n        \"htmlId\": \"report_footer\",\n        \"layoutRow\": \"5\",\n        \"layoutColumn\": \"1\",\n        \"width\": \"100\",\n        \"divPosition\": \"null\",\n        \"uiProperties\": \"{\\\"cols\\\":10,\\\"rows\\\":1,\\\"x\\\":0,\\\"y\\\":9,\\\"maxItemRows\\\":1,\\\"minItemRows\\\":1,\\\"htmlId\\\":\\\"report_footer\\\",\\\"dragEnabled\\\":false,\\\"resizeEnabled\\\":false,\\\"totalCols\\\":10}\",\n        \"elementsList\": [\n          {\n            \"elementId\": 103,\n            \"elementName\": \"PREPARED_BY\",\n            \"elementDisplayPlaceHolder\": \"PREPARED BY\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TEXT_BOX\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 1\n          }\n        ]\n      },\n      {\n        \"componentName\": \"PORTFOLIO_SUMMARY\",\n        \"componentId\": 6,\n        \"htmlId\": \"portfolio_summary\",\n        \"layoutRow\": \"3\",\n        \"layoutColumn\": \"1\",\n        \"width\": \"100\",\n        \"divPosition\": \"null\",\n        \"uiProperties\": \"{\\\"cols\\\":10,\\\"rows\\\":1,\\\"x\\\":0,\\\"y\\\":3,\\\"maxItemRows\\\":1,\\\"minItemRows\\\":1,\\\"htmlId\\\":\\\"portfolio_summary\\\",\\\"dragEnabled\\\":true,\\\"resizeEnabled\\\":true,\\\"totalCols\\\":10}\",\n        \"elementsList\": [\n          {\n            \"elementId\": 112,\n            \"elementName\": \"comp_title\",\n            \"elementDisplayPlaceHolder\": \"Component Title\",\n            \"elementValue\": \"Gain/Loss\",\n            \"elementCategory\": \"TEXT_BOX\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 1\n          },\n          {\n            \"elementId\": 115,\n            \"elementName\": \"realized\",\n            \"elementDisplayPlaceHolder\": \"Realized\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"CHECK_BOX\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 1\n          },\n          {\n            \"elementId\": 116,\n            \"elementName\": \"unrealized\",\n            \"elementDisplayPlaceHolder\": \"Unrealized\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"CHECK_BOX\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 2\n          }\n        ]\n      }\n    ],\n    \"requestId\": \"20200523155749916\"\n  }"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/report-builder/src/test.ts",
                "type": "literal type"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/wri-common/src/test.ts",
                "type": "literal type"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/wri-header/src/test.ts",
                "type": "literal type"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/wri-footer/src/test.ts",
                "type": "literal type"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/wri-holdings/src/test.ts",
                "type": "literal type"
            },
            {
                "name": "rowMultiSelection1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                "type": "MultiSelectSelection[]",
                "defaultValue": "[\r\n  {name: 'Beginning Value', selected: true, disabled: true, draggable: true, element:null},\r\n  {name: 'Net Contribution', selected: true, disabled: true, draggable: true, element:null, },\r\n  {name: 'Change in Value', selected: true, disabled: true, draggable: true, element:null},\r\n  {name: 'Ending Value', selected: true, disabled: true, draggable: true, element:null},\r\n  {name: 'Return', selected: true, disabled: false, draggable: true, element:null},\r\n  {name: 'Show Portfolio level Benchmarks', selected: false, disabled: false, draggable: false, element:null},\r\n]"
            },
            {
                "name": "rowMultiSelection3",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                "type": "MultiSelectSelection[]",
                "defaultValue": "[\r\n  {name: 'Beginning Value', selected: true, disabled: true, draggable: true, element:null},\r\n  {name: 'Net Contribution', selected: true, disabled: true, draggable: true, element:null, subSelections:netContributionSubSelections },\r\n  {name: 'Change in Value', selected: true, disabled: true, draggable: true, element:null, subSelections:changeInValueSubSelections},\r\n  {name: 'Ending Value', selected: true, disabled: true, draggable: true, element:null},\r\n  {name: 'Return', selected: true, disabled: false, draggable: true, element:null},\r\n  {name: 'Show Portfolio level Benchmarks', selected: true, disabled: false, draggable: false, element:null},\r\n]"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "set1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                "type": "",
                "defaultValue": "new MultiSelectSet()"
            },
            {
                "name": "set3",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                "type": "",
                "defaultValue": "new MultiSelectSet()"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  component: Header,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  component: Page,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                "type": "Story<MultiSelectionComponent>",
                "defaultValue": "(args: MultiSelectionComponent) => ({\r\n  component: MultiSelectionComponent,\r\n  props: args,\r\n})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [
            {
                "name": "MessageDisplayType",
                "childs": [
                    {
                        "name": "INPAGE",
                        "value": "inpage"
                    },
                    {
                        "name": "MODAL",
                        "value": "modal"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "projects/report-builder/src/app/common/messaging/messaging.component.ts"
            },
            {
                "name": "MessageType",
                "childs": [
                    {
                        "name": "CONFIRM",
                        "value": "confirm"
                    },
                    {
                        "name": "INFORM",
                        "value": "inform"
                    },
                    {
                        "name": "ERROR",
                        "value": "error"
                    },
                    {
                        "name": "WARN",
                        "value": "warn"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "projects/report-builder/src/app/common/messaging/messaging.component.ts"
            },
            {
                "name": "PageType",
                "childs": [
                    {
                        "name": "SinglePage"
                    },
                    {
                        "name": "MultiPage"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "projects/report-builder/src/app/page/report-builder/section.ts"
            },
            {
                "name": "ReportType",
                "childs": [
                    {
                        "name": "Custom",
                        "value": "C"
                    },
                    {
                        "name": "Default",
                        "value": "D"
                    },
                    {
                        "name": "FIDefault",
                        "value": "F"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "projects/report-builder/src/app/page/report-list/report-list.service.ts"
            },
            {
                "name": "SectionType",
                "childs": [
                    {
                        "name": "Header"
                    },
                    {
                        "name": "Footer"
                    },
                    {
                        "name": "Fixed"
                    },
                    {
                        "name": "Dynamic"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "projects/report-builder/src/app/page/report-builder/section.ts"
            }
        ],
        "groupedVariables": {
            "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts": [
                {
                    "name": "AccountPerformance",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "accountPerformanceMultiSelection1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                    "type": "MultiSelectSelection[]",
                    "defaultValue": "[\r\n  {selected: true, draggable: false, disabled: true, element: null, name: \"Account\"},\r\n  {selected: true, draggable: true, disabled: false, element: null, name: \"Account Number\"},\r\n  {selected: true, draggable: true, disabled: false, element: null, name: \"Value\"},\r\n  {selected: true, draggable: true, disabled: true, element: null, name: \"Selected Period\"},\r\n  {selected: true, draggable: true, disabled: false, element: null, name: \"YTD\"},\r\n  {selected: true, draggable: true, disabled: false, element: null, name: \"One Year\"},\r\n  {selected: true, draggable: true, disabled: false, element: null, name: \"Three Year\"},\r\n  {selected: true, draggable: true, disabled: false, element: null, name: \"Five Year \"},\r\n  {selected: true, draggable: true, disabled: false, element: null, name: \"Since Inception\"},\r\n  {selected: true, draggable: true, disabled: false, element: null, name: \"Inception Date\"},\r\n  {selected: false, draggable: true, disabled: false, element: null, name: \"Account Type\"},\r\n  {selected: false, draggable: true, disabled: false, element: null, name: \"Start Date\"},\r\n]"
                },
                {
                    "name": "accountPerformanceSet1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                    "type": "",
                    "defaultValue": "new MultiSelectSet()"
                },
                {
                    "name": "accountPerformanceSets",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                    "type": "MultiSelectSet[]",
                    "defaultValue": "[]"
                },
                {
                    "name": "ACL",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "aclMultiSelection1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                    "type": "MultiSelectSelection[]",
                    "defaultValue": "[\r\n  {name: 'All Accounts', selected: true, disabled: false, draggable: false, element:null},\r\n]"
                },
                {
                    "name": "aclMultiSelection2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                    "type": "MultiSelectSelection[]",
                    "defaultValue": "[\r\n  {name: 'Core Accounts', selected: false, disabled: false, draggable: true, element:null},\r\n  {name: 'Manual Accounts', selected: false, disabled: false, draggable: true, element:null},\r\n  {name: 'Balance Only Accounts', selected: false, disabled: false, draggable: true, element:null},\r\n  {name: 'External Accounts', selected: false, disabled: false, draggable: true, element:null},\r\n]"
                },
                {
                    "name": "aclSet1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                    "type": "",
                    "defaultValue": "new MultiSelectSet()"
                },
                {
                    "name": "aclSet2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                    "type": "",
                    "defaultValue": "new MultiSelectSet()"
                },
                {
                    "name": "ACLValueSets",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                    "type": "MultiSelectSet[]",
                    "defaultValue": "[]"
                },
                {
                    "name": "changeInValueSubSelections",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                    "type": "MultiSelectSelection[]",
                    "defaultValue": "[\r\n  {name: 'Show Breakdowns', selected: true, disabled: false, draggable: true, element:null},\r\n]"
                },
                {
                    "name": "Holdings",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "holdingsMultiSelection",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                    "type": "MultiSelectSelection[]",
                    "defaultValue": "[\r\n  {selected: true, draggable: true, disabled: false, element: null, name: \"Asset Name\"},\r\n  {selected: true, draggable: true, disabled: false, element: null, name: \"Ticker Synbol\"},\r\n  {selected: true, draggable: true, disabled: false, element: null, name: \"% of Account\"},\r\n  {selected: true, draggable: true, disabled: false, element: null, name: \"Quantity\"},\r\n  {selected: true, draggable: true, disabled: false, element: null, name: \"Price ($)\"},\r\n  {selected: true, draggable: true, disabled: false, element: null, name: \"Value ($)\"},\r\n  {selected: true, draggable: true, disabled: false, element: null, name: \"Cost ($)\"},\r\n  {selected: true, draggable: true, disabled: false, element: null, name: \"Unrealized Gain/Loss ($)\"},\r\n  {selected: true, draggable: true, disabled: false, element: null, name: \"Current Yield (%)\"},\r\n  {selected: true, draggable: true, disabled: false, element: null, name: \"Estimated Annual Income ($)\"},\r\n  {selected: false, draggable: true, disabled: false, element: null, name: \"Rate of Return\"},\r\n  {selected: false, draggable: true, disabled: false, element: null, name: \"Beginning Value\"},\r\n  {selected: false, draggable: true, disabled: false, element: null, name: \"Net Contribution\"},\r\n  {selected: false, draggable: true, disabled: false, element: null, name: \"Change In Value\"},\r\n  {selected: false, draggable: true, disabled: false, element: null, name: \"Management Company\"},\r\n  {selected: false, draggable: true, disabled: false, element: null, name: \"Morningstar Rating\"},\r\n  {selected: false, draggable: true, disabled: false, element: null, name: \"Asset Type\"},\r\n  {selected: false, draggable: true, disabled: false, element: null, name: \"ACL 1 Name\"},\r\n  {selected: false, draggable: true, disabled: false, element: null, name: \"ACL 2 Name\"},\r\n  {selected: false, draggable: true, disabled: false, element: null, name: \"ACL 3 Name\"},\r\n  {selected: false, draggable: true, disabled: false, element: null, name: \"Investor ID\"},\r\n  {selected: false, draggable: true, disabled: false, element: null, name: \"Investor Name\"},\r\n  {selected: false, draggable: true, disabled: false, element: null, name: \"Account Number\"},\r\n  {selected: false, draggable: true, disabled: false, element: null, name: \"Account Name\"},\r\n  {selected: false, draggable: true, disabled: false, element: null, name: \"Account Name / Manager / Style Name as applicable\"},\r\n  {selected: false, draggable: true, disabled: false, element: null, name: \"Manager Name\"},\r\n  {selected: false, draggable: true, disabled: false, element: null, name: \"Product Name\"},\r\n  {selected: false, draggable: true, disabled: false, element: null, name: \"Style\"},\r\n  {selected: false, draggable: true, disabled: false, element: null, name: \"Account Type\"},\r\n  {selected: false, draggable: true, disabled: false, element: null, name: \"Tax Status\"},\r\n]"
                },
                {
                    "name": "holdingsSet1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                    "type": "",
                    "defaultValue": "new MultiSelectSet()"
                },
                {
                    "name": "holdingsValueSets",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                    "type": "MultiSelectSet[]",
                    "defaultValue": "[]"
                },
                {
                    "name": "netContributionSubSelections",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                    "type": "MultiSelectSelection[]",
                    "defaultValue": "[\r\n  {name: 'Show Breakdowns', selected: true, disabled: false, draggable: true, element:null, selectionDetails:['Contributions', 'Withdrawals'], showDetails:false},\r\n]"
                },
                {
                    "name": "PortfolioReturn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "PortfolioReturnR1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "PortfolioReturnSets",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                    "type": "MultiSelectSet[]",
                    "defaultValue": "[]"
                },
                {
                    "name": "PortfolioReturnSetsR1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                    "type": "MultiSelectSet[]",
                    "defaultValue": "[]"
                },
                {
                    "name": "rowMultiSelection1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                    "type": "MultiSelectSelection[]",
                    "defaultValue": "[\r\n  {name: 'Beginning Value', selected: true, disabled: true, draggable: true, element:null},\r\n  {name: 'Net Contribution', selected: true, disabled: true, draggable: true, element:null, },\r\n  {name: 'Change in Value', selected: true, disabled: true, draggable: true, element:null},\r\n  {name: 'Ending Value', selected: true, disabled: true, draggable: true, element:null},\r\n  {name: 'Return', selected: true, disabled: false, draggable: true, element:null},\r\n  {name: 'Show Portfolio level Benchmarks', selected: false, disabled: false, draggable: false, element:null},\r\n]"
                },
                {
                    "name": "rowMultiSelection3",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                    "type": "MultiSelectSelection[]",
                    "defaultValue": "[\r\n  {name: 'Beginning Value', selected: true, disabled: true, draggable: true, element:null},\r\n  {name: 'Net Contribution', selected: true, disabled: true, draggable: true, element:null, subSelections:netContributionSubSelections },\r\n  {name: 'Change in Value', selected: true, disabled: true, draggable: true, element:null, subSelections:changeInValueSubSelections},\r\n  {name: 'Ending Value', selected: true, disabled: true, draggable: true, element:null},\r\n  {name: 'Return', selected: true, disabled: false, draggable: true, element:null},\r\n  {name: 'Show Portfolio level Benchmarks', selected: true, disabled: false, draggable: false, element:null},\r\n]"
                },
                {
                    "name": "set1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                    "type": "",
                    "defaultValue": "new MultiSelectSet()"
                },
                {
                    "name": "set3",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                    "type": "",
                    "defaultValue": "new MultiSelectSet()"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                    "type": "Story<MultiSelectionComponent>",
                    "defaultValue": "(args: MultiSelectionComponent) => ({\r\n  component: MultiSelectionComponent,\r\n  props: args,\r\n})"
                }
            ],
            "projects/report-builder/src/app/page/report-list/mock-data.ts": [
                {
                    "name": "allReportsData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/report-builder/src/app/page/report-list/mock-data.ts",
                    "type": "any",
                    "defaultValue": "{\n\t\"className\": \"com.albridge.services.GetDefaultReportsListMetadataResponse\",\n\t\n\t\t\"requestId\": \"7abae37f-d1c5-439e-a24d-070abaca5754\",\n\t\t\"messages\": {\n\t\t\t\"message\": []\n\t\t},\n\t\t\"popularCount\": 2,\n\t\t\"totalReportCount\": 5,\n\t\t\"customReportCount\": 6,\n\t\t\"categoryList\": [\n\t\t\t{\n\t\t\t\t\"categoryId\": 9999,\n\t\t\t\t\"categoryName\": \"Custom\",\n\t\t\t\t\"reportsList\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"reportId\": 10001,\n\t\t\t\t\t\t\"reportName\": \"Custom Report Test1\",\n\t\t\t\t\t\t\"popularReport\": \"N\",\n\t\t\t\t\t\t\"reportType\": \"C\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"reportId\": 9000,\n\t\t\t\t\t\t\"reportName\": \"Portfolio Snapshot Summary - Anurag\",\n\t\t\t\t\t\t\"popularReport\": \"N\",\n\t\t\t\t\t\t\"reportType\": \"C\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"reportId\": 1003,\n\t\t\t\t\t\t\"reportName\": \"Portfolio Snapshort Summary - Customized\",\n\t\t\t\t\t\t\"popularReport\": \"N\",\n\t\t\t\t\t\t\"reportType\": \"C\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"reportId\": 1005,\n\t\t\t\t\t\t\"reportName\": \"Portfolio Return - Customized\",\n\t\t\t\t\t\t\"popularReport\": \"N\",\n\t\t\t\t\t\t\"reportType\": \"C\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"reportId\": 1004,\n\t\t\t\t\t\t\"reportName\": \"Portfolio Value - Customized\",\n\t\t\t\t\t\t\"popularReport\": \"N\",\n\t\t\t\t\t\t\"reportType\": \"C\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"reportId\": 10002,\n\t\t\t\t\t\t\"reportName\": \"Custom Report Test 2\",\n\t\t\t\t\t\t\"popularReport\": \"N\",\n\t\t\t\t\t\t\"reportType\": \"C\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"categoryId\": 5,\n\t\t\t\t\"categoryName\": \"Performance\",\n\t\t\t\t\"reportsList\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"reportId\": 50,\n\t\t\t\t\t\t\"reportName\": \"Portfolio Performance\",\n\t\t\t\t\t\t\"popularReport\": \"Y\",\n\t\t\t\t\t\t\"reportType\": \"D\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"reportId\": 78,\n\t\t\t\t\t\t\"reportName\": \"Portfolio Snapshot Summary\",\n\t\t\t\t\t\t\"popularReport\": \"Y\",\n\t\t\t\t\t\t\"reportType\": \"D\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"categoryId\": 4,\n\t\t\t\t\"categoryName\": \"Holdings\",\n\t\t\t\t\"reportsList\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"reportId\": 4,\n\t\t\t\t\t\t\"reportName\": \"Holdings by Portfolio\",\n\t\t\t\t\t\t\"popularReport\": \"N\",\n\t\t\t\t\t\t\"reportType\": \"D\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"categoryId\": 5,\n\t\t\t\t\"categoryName\": \"Performance\",\n\t\t\t\t\"reportsList\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"reportId\": 5,\n\t\t\t\t\t\t\"reportName\": \"Holdings by Classification\",\n\t\t\t\t\t\t\"popularReport\": \"N\",\n\t\t\t\t\t\t\"reportType\": \"D\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"categoryId\": 4,\n\t\t\t\t\"categoryName\": \"Holdings\",\n\t\t\t\t\"reportsList\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"reportId\": 3,\n\t\t\t\t\t\t\"reportName\": \"Holdings by Investor\",\n\t\t\t\t\t\t\"popularReport\": \"N\",\n\t\t\t\t\t\t\"reportType\": \"D\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t\n}"
                },
                {
                    "name": "componentData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/report-builder/src/app/page/report-list/mock-data.ts",
                    "type": "any",
                    "defaultValue": "{\n\n  \t\"messages\": {\n\t\t\"message\": null\n\t},\n\t\"componentsList\": [\n\t\t{\n\t\t\t\"componentName\": \"REPORT_HEADER\",\n\t\t\t\"componentId\": 0,\n\t\t\t\"htmlId\": \"report_header\",\n\t\t\t\"layoutRow\": null,\n\t\t\t\"layoutColumn\": null,\n\t\t\t\"width\": null,\n\t\t\t\"elementsList\": [\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 101,\n\t\t\t\t\t\"elementName\": \"REPORT_NAME\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"Portfolio Snapshot Summary\",\n\t\t\t\t\t\"elementValue\": \"Portfolio Snapshot Summary\",\n\t\t\t\t\t\"elementCategory\": \"TEXT_BOX\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 1\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 102,\n\t\t\t\t\t\"elementName\": \"REPORT_TYPE\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"Combined Account Portfolio\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TEXT_BOX\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 2\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 104,\n\t\t\t\t\t\"elementName\": \"PREPARED_FOR\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"PREPARED FOR\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TEXT_BOX\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 3\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 105,\n\t\t\t\t\t\"elementName\": \"LOGO\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"logo\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"PLACEHOLDER\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 4\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"componentName\": \"PORTFOLIO_PERFORMANCE\",\n\t\t\t\"componentId\": 1,\n\t\t\t\"htmlId\": \"portfolio_performance\",\n\t\t\t\"layoutRow\": null,\n\t\t\t\"layoutColumn\": null,\n\t\t\t\"width\": null,\n\t\t\t\"elementsList\": [\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 1,\n\t\t\t\t\t\"elementName\": \"TABLE_HEADER\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"SELECTED_PERIOD\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TIME_PERIOD\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 1\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 2,\n\t\t\t\t\t\"elementName\": \"TABLE_HEADER\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"QUARTER_TO_DATE\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TIME_PERIOD\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 2\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 3,\n\t\t\t\t\t\"elementName\": \"TABLE_HEADER\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"YEAR_TO_DATE\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TIME_PERIOD\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 3\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 4,\n\t\t\t\t\t\"elementName\": \"TABLE_HEADER\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"LAST_QUARTER\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TIME_PERIOD\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 4\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 5,\n\t\t\t\t\t\"elementName\": \"TABLE_HEADER\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"LAST_YEAR\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TIME_PERIOD\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 5\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 6,\n\t\t\t\t\t\"elementName\": \"TABLE_HEADER\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"ONE_YEAR\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TIME_PERIOD\",\n\t\t\t\t\t\"defaultDisplay\": \"N\",\n\t\t\t\t\t\"sortOrder\": 6\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 7,\n\t\t\t\t\t\"elementName\": \"TABLE_HEADER\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"THREE_YEAR\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TIME_PERIOD\",\n\t\t\t\t\t\"defaultDisplay\": \"N\",\n\t\t\t\t\t\"sortOrder\": 7\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 8,\n\t\t\t\t\t\"elementName\": \"TABLE_HEADER\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"FIVE_YEAR\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TIME_PERIOD\",\n\t\t\t\t\t\"defaultDisplay\": \"N\",\n\t\t\t\t\t\"sortOrder\": 8\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 9,\n\t\t\t\t\t\"elementName\": \"TABLE_HEADER\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"TEN_YEAR\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TIME_PERIOD\",\n\t\t\t\t\t\"defaultDisplay\": \"N\",\n\t\t\t\t\t\"sortOrder\": 9\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 10,\n\t\t\t\t\t\"elementName\": \"TABLE_HEADER\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"SINCE_START_DATE\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TIME_PERIOD\",\n\t\t\t\t\t\"defaultDisplay\": \"N\",\n\t\t\t\t\t\"sortOrder\": 10\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 11,\n\t\t\t\t\t\"elementName\": \"TABLE_HEADER\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"MONTH_TO_DATE\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TIME_PERIOD\",\n\t\t\t\t\t\"defaultDisplay\": \"N\",\n\t\t\t\t\t\"sortOrder\": 11\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 12,\n\t\t\t\t\t\"elementName\": \"TABLE_HEADER\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"LAST_MONTH\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TIME_PERIOD\",\n\t\t\t\t\t\"defaultDisplay\": \"N\",\n\t\t\t\t\t\"sortOrder\": 12\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 13,\n\t\t\t\t\t\"elementName\": \"TABLE_HEADER\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"CALENDAR_YEAR_1\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TIME_PERIOD\",\n\t\t\t\t\t\"defaultDisplay\": \"N\",\n\t\t\t\t\t\"sortOrder\": 13\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 14,\n\t\t\t\t\t\"elementName\": \"TABLE_HEADER\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"CALENDAR_YEAR_2\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TIME_PERIOD\",\n\t\t\t\t\t\"defaultDisplay\": \"N\",\n\t\t\t\t\t\"sortOrder\": 14\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 15,\n\t\t\t\t\t\"elementName\": \"TABLE_HEADER\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"CALENDAR_YEAR_3\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TIME_PERIOD\",\n\t\t\t\t\t\"defaultDisplay\": \"N\",\n\t\t\t\t\t\"sortOrder\": 15\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 106,\n\t\t\t\t\t\"elementName\": \"TABLE_ROW\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"Beginning Value\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"ENTITY_ROW\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 1\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 107,\n\t\t\t\t\t\"elementName\": \"TABLE_ROW\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"Net Contribution\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"ENTITY_ROW\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 2\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 108,\n\t\t\t\t\t\"elementName\": \"TABLE_ROW\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"Change In Value\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"ENTITY_ROW\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 3\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 109,\n\t\t\t\t\t\"elementName\": \"TABLE_ROW\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"Ending Value\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"ENTITY_ROW\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 4\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 110,\n\t\t\t\t\t\"elementName\": \"TABLE_ROW\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"Return\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"ENTITY_ROW\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 5\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 111,\n\t\t\t\t\t\"elementName\": \"TABLE_ROW\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"Benchmarks\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"ENTITY_ROW\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 6\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 112,\n\t\t\t\t\t\"elementName\": \"comp_title\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"Component Title\",\n\t\t\t\t\t\"elementValue\": \"Portfolio Return\",\n\t\t\t\t\t\"elementCategory\": \"TEXT_BOX\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 1\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"componentName\": \"PORTFOLIO_VALUE\",\n\t\t\t\"componentId\": 2,\n\t\t\t\"htmlId\": \"portfolio_value\",\n\t\t\t\"layoutRow\": null,\n\t\t\t\"layoutColumn\": null,\n\t\t\t\"width\": null,\n\t\t\t\"elementsList\": [\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 112,\n\t\t\t\t\t\"elementName\": \"comp_title\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"Component Title\",\n\t\t\t\t\t\"elementValue\": \"Portfolio Value\",\n\t\t\t\t\t\"elementCategory\": \"TEXT_BOX\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 1\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 124,\n\t\t\t\t\t\"elementName\": \"PVB_CHART_RADIO1\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"BV_Investments\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"RADIO\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 1\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 125,\n\t\t\t\t\t\"elementName\": \"PVB_CHART_RADIO1\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"Investments_Since_Inception\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"RADIO\",\n\t\t\t\t\t\"defaultDisplay\": \"N\",\n\t\t\t\t\t\"sortOrder\": 1\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 126,\n\t\t\t\t\t\"elementName\": \"PVB_CHART_RADIO1\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"NO_INVESTMENT_LINE\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"RADIO\",\n\t\t\t\t\t\"defaultDisplay\": \"N\",\n\t\t\t\t\t\"sortOrder\": 1\n        },\n        {\n\t\t\t\t\t\"elementId\": 124,\n\t\t\t\t\t\"elementName\": \"PVB_CHART_RADIO2\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"BV_Investments\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"RADIO\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 1\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 125,\n\t\t\t\t\t\"elementName\": \"PVB_CHART_RADIO2\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"Investments_Since_Inception\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"RADIO\",\n\t\t\t\t\t\"defaultDisplay\": \"N\",\n\t\t\t\t\t\"sortOrder\": 1\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 126,\n\t\t\t\t\t\"elementName\": \"PVB_CHART_RADIO2\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"NO_INVESTMENT_LINE\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"RADIO\",\n\t\t\t\t\t\"defaultDisplay\": \"N\",\n\t\t\t\t\t\"sortOrder\": 1\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 127,\n\t\t\t\t\t\"elementName\": \"PVB_CHART_DD1\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"SELECTED_PERIOD\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"DROPDOWN\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 1\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 128,\n\t\t\t\t\t\"elementName\": \"PVB_CHART_DD1\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"SINCE_START_DATE\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"DROPDOWN\",\n\t\t\t\t\t\"defaultDisplay\": \"N\",\n\t\t\t\t\t\"sortOrder\": 1\n        },\n        {\n\t\t\t\t\t\"elementId\": 127,\n\t\t\t\t\t\"elementName\": \"PVB_CHART_DD2\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"SELECTED_PERIOD\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"DROPDOWN\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 1\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 128,\n\t\t\t\t\t\"elementName\": \"PVB_CHART_DD2\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"SINCE_START_DATE\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"DROPDOWN\",\n\t\t\t\t\t\"defaultDisplay\": \"N\",\n\t\t\t\t\t\"sortOrder\": 1\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 129,\n\t\t\t\t\t\"elementName\": \"PVB_CHART\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"BENCHMARK_1\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"FLAG\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 1\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 130,\n\t\t\t\t\t\"elementName\": \"PVB_CHART\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"BENCHMARK_2\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"FLAG\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 1\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"componentName\": \"ACCOUNT_PERFORMANCE\",\n\t\t\t\"componentId\": 3,\n\t\t\t\"htmlId\": \"account_performance\",\n\t\t\t\"layoutRow\": null,\n\t\t\t\"layoutColumn\": null,\n\t\t\t\"width\": null,\n\t\t\t\"elementsList\": [\n        {\n\t\t\t\t\t\"elementId\": 118,\n\t\t\t\t\t\"elementName\": \"TABLE_HEADER\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"ACCOUNT_NUMBER\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TIME_PERIOD\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 1\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 119,\n\t\t\t\t\t\"elementName\": \"TABLE_HEADER\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"START_DATE\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TIME_PERIOD\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 2\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 120,\n\t\t\t\t\t\"elementName\": \"TABLE_HEADER\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"VALUE\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TIME_PERIOD\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 3\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 121,\n\t\t\t\t\t\"elementName\": \"TABLE_HEADER\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"PERCENT\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TIME_PERIOD\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 4\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 1,\n\t\t\t\t\t\"elementName\": \"TABLE_HEADER\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"SELECTED_PERIOD\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TIME_PERIOD\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 5\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 2,\n\t\t\t\t\t\"elementName\": \"TABLE_HEADER\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"QUARTER_TO_DATE\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TIME_PERIOD\",\n\t\t\t\t\t\"defaultDisplay\": \"N\",\n\t\t\t\t\t\"sortOrder\": 5\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 3,\n\t\t\t\t\t\"elementName\": \"TABLE_HEADER\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"YEAR_TO_DATE\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TIME_PERIOD\",\n\t\t\t\t\t\"defaultDisplay\": \"N\",\n\t\t\t\t\t\"sortOrder\": 6\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 4,\n\t\t\t\t\t\"elementName\": \"TABLE_HEADER\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"LAST_QUARTER\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TIME_PERIOD\",\n\t\t\t\t\t\"defaultDisplay\": \"N\",\n\t\t\t\t\t\"sortOrder\": 9\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 5,\n\t\t\t\t\t\"elementName\": \"TABLE_HEADER\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"LAST_YEAR\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TIME_PERIOD\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 10\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 6,\n\t\t\t\t\t\"elementName\": \"TABLE_HEADER\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"ONE_YEAR\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TIME_PERIOD\",\n\t\t\t\t\t\"defaultDisplay\": \"N\",\n\t\t\t\t\t\"sortOrder\": 11\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 7,\n\t\t\t\t\t\"elementName\": \"TABLE_HEADER\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"THREE_YEAR\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TIME_PERIOD\",\n\t\t\t\t\t\"defaultDisplay\": \"N\",\n\t\t\t\t\t\"sortOrder\": 12\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 8,\n\t\t\t\t\t\"elementName\": \"TABLE_HEADER\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"FIVE_YEAR\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TIME_PERIOD\",\n\t\t\t\t\t\"defaultDisplay\": \"N\",\n\t\t\t\t\t\"sortOrder\": 13\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 9,\n\t\t\t\t\t\"elementName\": \"TABLE_HEADER\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"TEN_YEAR\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TIME_PERIOD\",\n\t\t\t\t\t\"defaultDisplay\": \"N\",\n\t\t\t\t\t\"sortOrder\": 14\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 10,\n\t\t\t\t\t\"elementName\": \"TABLE_HEADER\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"SINCE_START_DATE\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TIME_PERIOD\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 15\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 11,\n\t\t\t\t\t\"elementName\": \"TABLE_HEADER\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"MONTH_TO_DATE\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TIME_PERIOD\",\n\t\t\t\t\t\"defaultDisplay\": \"N\",\n\t\t\t\t\t\"sortOrder\": 16\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 12,\n\t\t\t\t\t\"elementName\": \"TABLE_HEADER\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"LAST_MONTH\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TIME_PERIOD\",\n\t\t\t\t\t\"defaultDisplay\": \"N\",\n\t\t\t\t\t\"sortOrder\": 17\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 13,\n\t\t\t\t\t\"elementName\": \"TABLE_HEADER\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"CALENDAR_YEAR_1\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TIME_PERIOD\",\n\t\t\t\t\t\"defaultDisplay\": \"N\",\n\t\t\t\t\t\"sortOrder\": 18\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 14,\n\t\t\t\t\t\"elementName\": \"TABLE_HEADER\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"CALENDAR_YEAR_2\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TIME_PERIOD\",\n\t\t\t\t\t\"defaultDisplay\": \"N\",\n\t\t\t\t\t\"sortOrder\": 19\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 15,\n\t\t\t\t\t\"elementName\": \"TABLE_HEADER\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"CALENDAR_YEAR_3\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TIME_PERIOD\",\n\t\t\t\t\t\"defaultDisplay\": \"N\",\n\t\t\t\t\t\"sortOrder\": 20\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 112,\n\t\t\t\t\t\"elementName\": \"comp_title\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"Component Title\",\n\t\t\t\t\t\"elementValue\": \"Account Performance\",\n\t\t\t\t\t\"elementCategory\": \"TEXT_BOX\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 1\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 117,\n\t\t\t\t\t\"elementName\": \"CHECK_BOX\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"INCLUDE_CLOSED_ACCOUNTS\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"CHECK_BOX\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 1\n\t\t\t\t},\n\t\t\t\t\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 122,\n\t\t\t\t\t\"elementName\": \"AP_DROP_DOWN\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"UPTO_10_ACCOUNTS\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"DROPDOWN\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 1\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 123,\n\t\t\t\t\t\"elementName\": \"AP_DROP_DOWN\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"ALL_ACCOUNTS\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"DROPDOWN\",\n\t\t\t\t\t\"defaultDisplay\": \"N\",\n\t\t\t\t\t\"sortOrder\": 2\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"componentName\": \"ASSET_CATEGORY\",\n\t\t\t\"componentId\": 4,\n\t\t\t\"htmlId\": \"asset_category\",\n\t\t\t\"layoutRow\": null,\n\t\t\t\"layoutColumn\": null,\n\t\t\t\"width\": null,\n\t\t\t\"elementsList\": [\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 112,\n\t\t\t\t\t\"elementName\": \"comp_title\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"Component Title\",\n\t\t\t\t\t\"elementValue\": \"Asset Type\",\n\t\t\t\t\t\"elementCategory\": \"TEXT_BOX\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 1\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 113,\n\t\t\t\t\t\"elementName\": \"ASTALLOC\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"ASSET_TYPE\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"DROPDOWN\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 1\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 114,\n\t\t\t\t\t\"elementName\": \"ASTALLOC\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"INVESTMENT_STYLE\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"DROPDOWN\",\n\t\t\t\t\t\"defaultDisplay\": \"N\",\n\t\t\t\t\t\"sortOrder\": 2\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"componentName\": \"REPORT_FOOTER\",\n\t\t\t\"componentId\": 5,\n\t\t\t\"htmlId\": \"report_footer\",\n\t\t\t\"layoutRow\": null,\n\t\t\t\"layoutColumn\": null,\n\t\t\t\"width\": null,\n\t\t\t\"elementsList\": [\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 103,\n\t\t\t\t\t\"elementName\": \"PREPARED_BY\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"PREPARED BY\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"TEXT_BOX\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 1\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"componentName\": \"PORTFOLIO_SUMMARY\",\n\t\t\t\"componentId\": 6,\n\t\t\t\"htmlId\": \"portfolio_summary\",\n\t\t\t\"layoutRow\": null,\n\t\t\t\"layoutColumn\": null,\n\t\t\t\"width\": null,\n\t\t\t\"elementsList\": [\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 112,\n\t\t\t\t\t\"elementName\": \"comp_title\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"Component Title\",\n\t\t\t\t\t\"elementValue\": \"Gain/Loss\",\n\t\t\t\t\t\"elementCategory\": \"TEXT_BOX\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 1\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 115,\n\t\t\t\t\t\"elementName\": \"realized\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"Realized\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"CHECK_BOX\",\n\t\t\t\t\t\"defaultDisplay\": \"N\",\n\t\t\t\t\t\"sortOrder\": 1\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"elementId\": 116,\n\t\t\t\t\t\"elementName\": \"unrealized\",\n\t\t\t\t\t\"elementDisplayPlaceHolder\": \"Unrealized\",\n\t\t\t\t\t\"elementValue\": null,\n\t\t\t\t\t\"elementCategory\": \"CHECK_BOX\",\n\t\t\t\t\t\"defaultDisplay\": \"Y\",\n\t\t\t\t\t\"sortOrder\": 2\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t],\n  \"requestId\": \"0684d393-866f-497f-b500-017230159f4f\"\n}"
                },
                {
                    "name": "env",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/report-builder/src/app/page/report-list/mock-data.ts",
                    "type": "any",
                    "defaultValue": "{\n  production: false\n}"
                },
                {
                    "name": "PVB_CHART_OPTIONS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/report-builder/src/app/page/report-list/mock-data.ts",
                    "type": "any",
                    "defaultValue": "{\n  chart: \n  {\n    width: 600,\n    height: 300,\n    type : 'area',\n    marginLeft : 25 ,\n    marginRight : 12,\n    spacingLeft : 1,\n    spacingRight : 1\n  },\n  title: {text: ''},    \n  credits: {enabled: false},\n  subtitle: {    text: ''},\n  yAxis: \n  {    \n    title: {        text: ''    } , \n    allowDecimals : true,\n    gridLineColor : '#D9D9D9',\n    gridLineWidth : 0.5,\n    labels : \n    {\n      formatter : function() {return this.value/1000000.0},\n      style : {color : '#000000' , fontSize : '11px'},\n      y : 2,\n    },\n    min :0, \n    max : 5000000,\n    offset : -10, \n    tickPixelInterval : 20 \n  },\n  xAxis: \n  {       \n    //categories:['Q1,07','','','','Q4,07','','','','Q4,08','','','','Q4,09','','','','Q4,10','','','','Q4,11','','','','Q4,12','','','','Q4,13','','','','Q4,14','','','','Q4,15','','','Sep 19*',],      \n    categories:[],      \n    labels: {               style: {                        fontSize: '11px', color : '#000000',fontBold : true      },rotation : 0,step : 1, y : 12, },\n    tickPositioner :function() {return [0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,39,]} ,\n    tickInterval:1,\n    tickWidth: 0.5,\n    tickmarkPlacement: 'on',\n    lineColor : '#816A44',\n    lineWidth : 0.50,\n    tickColor : '#816A44',\n    tickLength : 4,\n    endOfTick : false,\n  },\n  legend: \n  {    \n    layout: 'horizontal',        \n    align: 'center',  \n    itemDistance : 20 , \n    alignColumns : false,     \n    verticalAlign: 'bottom',        \n    itemStyle: {fontSize: '11px',},\n    symbolWidth : 9.6,\n    symbolRadius : 1.92,\n    margin : 3 \n  },\n  plotOptions: \n  {    \n    series: \n    {        \n      label: { connectorAllowed: false }, \n      marker : {enabled : false} ,  \n    },\n    area :{fillOpacity : 0}, \n  },\n  series: \n  [\n    /*{\n      name:'performanceTest',\n      dashStyle:'solid',\n      color:'#1a4ca0',\n      lineWidth:2,\n      showInLegend:true,\n      data: \n      [\n        114562.28,849146.33,844476.59,845664.97,820169.67,\n        774561.31,758455.21,698175.67,506048.84,462798.03,\n        498081.03,784081.39,789463.24,808761.01,1075819.05,\n        1134157.35,1176522.97,1206313.46,1246694.43,1364204.8,\n        1398890.89,1476796.65,1435257.57,1496548.42,1485284.58,\n        1518950.25,1481019.26,1510572.09,1742983.5,1795233.68,\n        1863044.53,1938174.77,1934126.31,2380195.76,2330941.61,\n        2307718.45,2346576.47,2405630.93,2571953.81,2782050.13,\n      ]\n    },\n    {\n      name:'S&P 500',\n      dashStyle:'solid',\n      color:'#eaaa33',\n      lineWidth:1,\n      showInLegend:true,\n      data: \n      [\n        114562.28,848438.63,863424.4,874993.49,840126.88,\n        765858.83,739809.96,672348.47,488359.34,409574.55,\n        440358.35,730170.05,756019.41,794337.88,967445.36,\n        1092931.6,1224348.0,1277463.1,1308396.79,1324265.38,\n        1480111.63,1678310.38,1617655.52,1721442.88,1692089.71,\n        1869877.62,1889512.61,1979936.58,2400648.91,2472087.86,\n        2592490.02,2710346.63,2834272.98,3342948.02,3355243.57,\n        3315770.97,3655940.45,3763373.6,3854317.13,4104682.43,\n      ]\n    },\n    {\n      name:'Citigroup 1 month CD',\n      dashStyle:'solid',\n      color:'#777777',\n      lineWidth:1,\n      showInLegend:true,\n      data: \n      [\n        114562.28,859422.1,832370.17,837975.53,842916.17,\n        854294.1,854524.66,854045.34,822953.02,798781.81,\n        765580.87,981035.7,963961.99,961954.98,1240653.35,\n        1256796.5,1270044.56,1251932.4,1281629.94,1487095.12,\n        1486931.03,1498871.41,1485239.87,1487213.43,1464731.53,\n        1463730.13,1429863.52,1421883.82,1626323.05,1654744.86,\n        1646426.73,1736411.12,1728816.23,2209630.2,2213719.57,\n        2396585.51,2500747.89,2555358.72,2554620.53,2714540.59,\n      ]\n    },\n    {\n      name:'BEGINNING VALUE + INVESTMENTS',\n      dashStyle:'Dash',\n      color:'#000000',\n      lineWidth:1,\n      showInLegend:false,\n      data: [\n        114562.27984449844,848984.2498444985,811114.5698444985,805288.1898444985,799594.2298444986,\n        803055.4598444985,797511.6198444986,791600.3398444986,738853.0198444986,713766.4998444986,\n        679847.4298444986,894725.0998444986,878421.4698444986,876029.8898444986,1155751.5498444985,\n        1171010.6098444986,1183536.6998444987,1165266.0298444987,1194359.5498444987,1399168.259844499,\n        1398219.079844499,1409378.569844499,1394961.019844499,1396226.549844499,1373361.879844499,\n        1371698.4998444992,1337240.5698444992,1328679.4098444993,1532476.5998444993,1559873.0398444992,\n        1550885.5498444992,1640213.3998444993,1631358.4198444993,2111462.699844499,2114660.819844499,\n        2296554.619844499,2399702.429844499,2453841.729844499,2452079.2398444987,2611040.29,\n      ]\n    },\n    {\n      type:'line',\n      name:'BEGINNING VALUE + INVESTMENTS',\n      color:'#000000',\n      dashStyle: 'Dash',\n      lineWidth: 1,\n      showInLegend: true,\n      data: [],\n      marker : {enabled : false}\n    },*/\n  ],\n  /*responsive: \n  {    \n    rules: \n    [\n      {        \n        condition: { maxWidth: 200},        \n        chartOptions: \n        {            \n          legend: \n          {                \n            layout: 'horizontal',                \n            align: 'center', \n            itemDistance : 20,                \n            verticalAlign: 'bottom'            \n          }        \n        }    \n      }\n    ]\n  }*/\n}"
                },
                {
                    "name": "reportData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/report-builder/src/app/page/report-list/mock-data.ts",
                    "type": "any",
                    "defaultValue": "{\n    \"messages\": {\n      \"message\": null\n    },\n    \"reportId\": 10110,\n    \"reportName\": \"pss-ui-demo6\",\n    \"multiPage\": \"N\",\n    \"orientation\": \"LANDSCAPE\",\n    \"componentsList\": [\n      {\n        \"componentName\": \"REPORT_HEADER\",\n        \"componentId\": 0,\n        \"htmlId\": \"report_header\",\n        \"layoutRow\": \"1\",\n        \"layoutColumn\": \"1\",\n        \"width\": \"100\",\n        \"divPosition\": \"null\",\n        \"uiProperties\": \"{\\\"cols\\\":10,\\\"rows\\\":1,\\\"y\\\":0,\\\"x\\\":0,\\\"maxItemRows\\\":1,\\\"minItemRows\\\":1,\\\"htmlId\\\":\\\"report_header\\\",\\\"dragEnabled\\\":false,\\\"resizeEnabled\\\":false,\\\"totalCols\\\":10}\",\n        \"elementsList\": [\n          {\n            \"elementId\": 101,\n            \"elementName\": \"REPORT_NAME\",\n            \"elementDisplayPlaceHolder\": \"Portfolio Snapshot Summary\",\n            \"elementValue\": \"Portfolio Snapshot Summary\",\n            \"elementCategory\": \"TEXT_BOX\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 1\n          },\n          {\n            \"elementId\": 102,\n            \"elementName\": \"REPORT_TYPE\",\n            \"elementDisplayPlaceHolder\": \"Combined Account Portfolio\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TEXT_BOX\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 2\n          },\n          {\n            \"elementId\": 104,\n            \"elementName\": \"PREPARED_FOR\",\n            \"elementDisplayPlaceHolder\": \"PREPARED FOR\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TEXT_BOX\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 3\n          },\n          {\n            \"elementId\": 105,\n            \"elementName\": \"LOGO\",\n            \"elementDisplayPlaceHolder\": \"logo\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"CHECK_BOX\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 4\n          }\n        ]\n      },\n      {\n        \"componentName\": \"PORTFOLIO_PERFORMANCE\",\n        \"componentId\": 1,\n        \"htmlId\": \"portfolio_performance\",\n        \"layoutRow\": \"2\",\n        \"layoutColumn\": \"1\",\n        \"width\": \"60\",\n        \"divPosition\": \"null\",\n        \"uiProperties\": \"{\\\"cols\\\":6,\\\"rows\\\":2,\\\"x\\\":0,\\\"y\\\":1,\\\"maxItemRows\\\":2,\\\"minItemRows\\\":2,\\\"htmlId\\\":\\\"portfolio_performance\\\",\\\"dragEnabled\\\":true,\\\"resizeEnabled\\\":true,\\\"totalCols\\\":10}\",\n        \"elementsList\": [\n          {\n            \"elementId\": 1,\n            \"elementName\": \"TABLE_HEADER\",\n            \"elementDisplayPlaceHolder\": \"SELECTED_PERIOD\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TIME_PERIOD\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 3\n          },\n          {\n            \"elementId\": 2,\n            \"elementName\": \"TABLE_HEADER\",\n            \"elementDisplayPlaceHolder\": \"QUARTER_TO_DATE\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TIME_PERIOD\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 4\n          },\n          {\n            \"elementId\": 3,\n            \"elementName\": \"TABLE_HEADER\",\n            \"elementDisplayPlaceHolder\": \"YEAR_TO_DATE\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TIME_PERIOD\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 5\n          },\n          {\n            \"elementId\": 4,\n            \"elementName\": \"TABLE_HEADER\",\n            \"elementDisplayPlaceHolder\": \"LAST_QUARTER\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TIME_PERIOD\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 6\n          },\n          {\n            \"elementId\": 5,\n            \"elementName\": \"TABLE_HEADER\",\n            \"elementDisplayPlaceHolder\": \"LAST_YEAR\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TIME_PERIOD\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 7\n          },\n          {\n            \"elementId\": 6,\n            \"elementName\": \"TABLE_HEADER\",\n            \"elementDisplayPlaceHolder\": \"ONE_YEAR\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TIME_PERIOD\",\n            \"defaultDisplay\": \"N\",\n            \"sortOrder\": 8\n          },\n          {\n            \"elementId\": 7,\n            \"elementName\": \"TABLE_HEADER\",\n            \"elementDisplayPlaceHolder\": \"THREE_YEAR\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TIME_PERIOD\",\n            \"defaultDisplay\": \"N\",\n            \"sortOrder\": 9\n          },\n          {\n            \"elementId\": 8,\n            \"elementName\": \"TABLE_HEADER\",\n            \"elementDisplayPlaceHolder\": \"FIVE_YEAR\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TIME_PERIOD\",\n            \"defaultDisplay\": \"N\",\n            \"sortOrder\": 10\n          },\n          {\n            \"elementId\": 9,\n            \"elementName\": \"TABLE_HEADER\",\n            \"elementDisplayPlaceHolder\": \"TEN_YEAR\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TIME_PERIOD\",\n            \"defaultDisplay\": \"N\",\n            \"sortOrder\": 11\n          },\n          {\n            \"elementId\": 10,\n            \"elementName\": \"TABLE_HEADER\",\n            \"elementDisplayPlaceHolder\": \"SINCE_START_DATE\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TIME_PERIOD\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 2\n          },\n          {\n            \"elementId\": 11,\n            \"elementName\": \"TABLE_HEADER\",\n            \"elementDisplayPlaceHolder\": \"MONTH_TO_DATE\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TIME_PERIOD\",\n            \"defaultDisplay\": \"N\",\n            \"sortOrder\": 12\n          },\n          {\n            \"elementId\": 12,\n            \"elementName\": \"TABLE_HEADER\",\n            \"elementDisplayPlaceHolder\": \"LAST_MONTH\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TIME_PERIOD\",\n            \"defaultDisplay\": \"N\",\n            \"sortOrder\": 13\n          },\n          {\n            \"elementId\": 13,\n            \"elementName\": \"TABLE_HEADER\",\n            \"elementDisplayPlaceHolder\": \"CALENDAR_YEAR_1\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TIME_PERIOD\",\n            \"defaultDisplay\": \"N\",\n            \"sortOrder\": 14\n          },\n          {\n            \"elementId\": 14,\n            \"elementName\": \"TABLE_HEADER\",\n            \"elementDisplayPlaceHolder\": \"CALENDAR_YEAR_2\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TIME_PERIOD\",\n            \"defaultDisplay\": \"N\",\n            \"sortOrder\": 15\n          },\n          {\n            \"elementId\": 15,\n            \"elementName\": \"TABLE_HEADER\",\n            \"elementDisplayPlaceHolder\": \"CALENDAR_YEAR_3\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TIME_PERIOD\",\n            \"defaultDisplay\": \"N\",\n            \"sortOrder\": 16\n          },\n          {\n            \"elementId\": 106,\n            \"elementName\": \"TABLE_ROW\",\n            \"elementDisplayPlaceHolder\": \"Beginning Value\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"ENTITY_ROW\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 1\n          },\n          {\n            \"elementId\": 107,\n            \"elementName\": \"TABLE_ROW\",\n            \"elementDisplayPlaceHolder\": \"Net Contribution\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"ENTITY_ROW\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 2\n          },\n          {\n            \"elementId\": 108,\n            \"elementName\": \"TABLE_ROW\",\n            \"elementDisplayPlaceHolder\": \"Change In Value\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"ENTITY_ROW\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 3\n          },\n          {\n            \"elementId\": 109,\n            \"elementName\": \"TABLE_ROW\",\n            \"elementDisplayPlaceHolder\": \"Ending Value\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"ENTITY_ROW\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 4\n          },\n          {\n            \"elementId\": 110,\n            \"elementName\": \"TABLE_ROW\",\n            \"elementDisplayPlaceHolder\": \"Return\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"ENTITY_ROW\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 5\n          },\n          {\n            \"elementId\": 111,\n            \"elementName\": \"TABLE_ROW\",\n            \"elementDisplayPlaceHolder\": \"Benchmarks\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"ENTITY_ROW\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 6\n          },\n          {\n            \"elementId\": 112,\n            \"elementName\": \"comp_title\",\n            \"elementDisplayPlaceHolder\": \"Component Title\",\n            \"elementValue\": \"Portfolio Return\",\n            \"elementCategory\": \"TEXT_BOX\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 1\n          }\n        ]\n      },\n      {\n        \"componentName\": \"PORTFOLIO_VALUE\",\n        \"componentId\": 2,\n        \"htmlId\": \"portfolio_value\",\n        \"layoutRow\": \"2\",\n        \"layoutColumn\": \"2\",\n        \"width\": \"40\",\n        \"divPosition\": \"null\",\n        \"uiProperties\": \"{\\\"cols\\\":4,\\\"rows\\\":2,\\\"x\\\":6,\\\"y\\\":1,\\\"maxItemRows\\\":2,\\\"minItemRows\\\":2,\\\"htmlId\\\":\\\"portfolio_value\\\",\\\"dragEnabled\\\":true,\\\"resizeEnabled\\\":true,\\\"totalCols\\\":10}\",\n        \"elementsList\": [\n          {\n            \"elementId\": 112,\n            \"elementName\": \"comp_title\",\n            \"elementDisplayPlaceHolder\": \"Component Title\",\n            \"elementValue\": \"Portfolio Value\",\n            \"elementCategory\": \"TEXT_BOX\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 1\n          },\n          {\n            \"elementId\": 124,\n            \"elementName\": \"PVB_CHART\",\n            \"elementDisplayPlaceHolder\": \"BV_Investments\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"RADIO\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 1\n          },\n          {\n            \"elementId\": 125,\n            \"elementName\": \"PVB_CHART\",\n            \"elementDisplayPlaceHolder\": \"Investments_Since_Inception\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"RADIO\",\n            \"defaultDisplay\": \"N\",\n            \"sortOrder\": 1\n          },\n          {\n            \"elementId\": 126,\n            \"elementName\": \"PVB_CHART\",\n            \"elementDisplayPlaceHolder\": \"NO_INVESTMENT_LINE\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"RADIO\",\n            \"defaultDisplay\": \"N\",\n            \"sortOrder\": 1\n          },\n          {\n            \"elementId\": 127,\n            \"elementName\": \"PVB_CHART\",\n            \"elementDisplayPlaceHolder\": \"SELECTED_PERIOD\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"DROPDOWN\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 1\n          },\n          {\n            \"elementId\": 128,\n            \"elementName\": \"PVB_CHART\",\n            \"elementDisplayPlaceHolder\": \"SINCE_START_DATE\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"DROPDOWN\",\n            \"defaultDisplay\": \"N\",\n            \"sortOrder\": 1\n          },\n          {\n            \"elementId\": 129,\n            \"elementName\": \"PVB_CHART\",\n            \"elementDisplayPlaceHolder\": \"BENCHMARK_1\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"CHECK_BOX\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 1\n          },\n          {\n            \"elementId\": 130,\n            \"elementName\": \"PVB_CHART\",\n            \"elementDisplayPlaceHolder\": \"BENCHMARK_2\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"CHECK_BOX\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 1\n          }\n        ]\n      },\n      {\n        \"componentName\": \"ACCOUNT_PERFORMANCE\",\n        \"componentId\": 3,\n        \"htmlId\": \"account_performance\",\n        \"layoutRow\": \"4\",\n        \"layoutColumn\": \"1\",\n        \"width\": \"60\",\n        \"divPosition\": \"null\",\n        \"uiProperties\": \"{\\\"cols\\\":6,\\\"rows\\\":3,\\\"x\\\":0,\\\"y\\\":4,\\\"maxItemRows\\\":3,\\\"minItemRows\\\":3,\\\"htmlId\\\":\\\"account_performance\\\",\\\"dragEnabled\\\":true,\\\"resizeEnabled\\\":true,\\\"totalCols\\\":10}\",\n        \"elementsList\": [\n          {\n            \"elementId\": 1,\n            \"elementName\": \"TABLE_HEADER\",\n            \"elementDisplayPlaceHolder\": \"SELECTED_PERIOD\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TIME_PERIOD\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 7\n          },\n          {\n            \"elementId\": 2,\n            \"elementName\": \"TABLE_HEADER\",\n            \"elementDisplayPlaceHolder\": \"QUARTER_TO_DATE\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TIME_PERIOD\",\n            \"defaultDisplay\": \"N\",\n            \"sortOrder\": 8\n          },\n          {\n            \"elementId\": 3,\n            \"elementName\": \"TABLE_HEADER\",\n            \"elementDisplayPlaceHolder\": \"YEAR_TO_DATE\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TIME_PERIOD\",\n            \"defaultDisplay\": \"N\",\n            \"sortOrder\": 9\n          },\n          {\n            \"elementId\": 4,\n            \"elementName\": \"TABLE_HEADER\",\n            \"elementDisplayPlaceHolder\": \"LAST_QUARTER\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TIME_PERIOD\",\n            \"defaultDisplay\": \"N\",\n            \"sortOrder\": 10\n          },\n          {\n            \"elementId\": 5,\n            \"elementName\": \"TABLE_HEADER\",\n            \"elementDisplayPlaceHolder\": \"LAST_YEAR\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TIME_PERIOD\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 11\n          },\n          {\n            \"elementId\": 6,\n            \"elementName\": \"TABLE_HEADER\",\n            \"elementDisplayPlaceHolder\": \"ONE_YEAR\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TIME_PERIOD\",\n            \"defaultDisplay\": \"N\",\n            \"sortOrder\": 12\n          },\n          {\n            \"elementId\": 7,\n            \"elementName\": \"TABLE_HEADER\",\n            \"elementDisplayPlaceHolder\": \"THREE_YEAR\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TIME_PERIOD\",\n            \"defaultDisplay\": \"N\",\n            \"sortOrder\": 13\n          },\n          {\n            \"elementId\": 8,\n            \"elementName\": \"TABLE_HEADER\",\n            \"elementDisplayPlaceHolder\": \"FIVE_YEAR\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TIME_PERIOD\",\n            \"defaultDisplay\": \"N\",\n            \"sortOrder\": 14\n          },\n          {\n            \"elementId\": 9,\n            \"elementName\": \"TABLE_HEADER\",\n            \"elementDisplayPlaceHolder\": \"TEN_YEAR\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TIME_PERIOD\",\n            \"defaultDisplay\": \"N\",\n            \"sortOrder\": 15\n          },\n          {\n            \"elementId\": 10,\n            \"elementName\": \"TABLE_HEADER\",\n            \"elementDisplayPlaceHolder\": \"SINCE_START_DATE\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TIME_PERIOD\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 2\n          },\n          {\n            \"elementId\": 11,\n            \"elementName\": \"TABLE_HEADER\",\n            \"elementDisplayPlaceHolder\": \"MONTH_TO_DATE\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TIME_PERIOD\",\n            \"defaultDisplay\": \"N\",\n            \"sortOrder\": 16\n          },\n          {\n            \"elementId\": 12,\n            \"elementName\": \"TABLE_HEADER\",\n            \"elementDisplayPlaceHolder\": \"LAST_MONTH\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TIME_PERIOD\",\n            \"defaultDisplay\": \"N\",\n            \"sortOrder\": 17\n          },\n          {\n            \"elementId\": 13,\n            \"elementName\": \"TABLE_HEADER\",\n            \"elementDisplayPlaceHolder\": \"CALENDAR_YEAR_1\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TIME_PERIOD\",\n            \"defaultDisplay\": \"N\",\n            \"sortOrder\": 18\n          },\n          {\n            \"elementId\": 14,\n            \"elementName\": \"TABLE_HEADER\",\n            \"elementDisplayPlaceHolder\": \"CALENDAR_YEAR_2\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TIME_PERIOD\",\n            \"defaultDisplay\": \"N\",\n            \"sortOrder\": 19\n          },\n          {\n            \"elementId\": 15,\n            \"elementName\": \"TABLE_HEADER\",\n            \"elementDisplayPlaceHolder\": \"CALENDAR_YEAR_3\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TIME_PERIOD\",\n            \"defaultDisplay\": \"N\",\n            \"sortOrder\": 20\n          },\n          {\n            \"elementId\": 112,\n            \"elementName\": \"comp_title\",\n            \"elementDisplayPlaceHolder\": \"Component Title\",\n            \"elementValue\": \"Account Performance\",\n            \"elementCategory\": \"TEXT_BOX\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 1\n          },\n          {\n            \"elementId\": 117,\n            \"elementName\": \"CHECK_BOX\",\n            \"elementDisplayPlaceHolder\": \"INCLUDE_CLOSED_ACCOUNTS\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"CHECK_BOX\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 1\n          },\n          {\n            \"elementId\": 118,\n            \"elementName\": \"TABLE_HEADER\",\n            \"elementDisplayPlaceHolder\": \"ACCOUNT_NUMBER\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TABLE_HEADER\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 3\n          },\n          {\n            \"elementId\": 119,\n            \"elementName\": \"TABLE_HEADER\",\n            \"elementDisplayPlaceHolder\": \"START_DATE\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TABLE_HEADER\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 4\n          },\n          {\n            \"elementId\": 120,\n            \"elementName\": \"TABLE_HEADER\",\n            \"elementDisplayPlaceHolder\": \"VALUE\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TABLE_HEADER\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 5\n          },\n          {\n            \"elementId\": 121,\n            \"elementName\": \"TABLE_HEADER\",\n            \"elementDisplayPlaceHolder\": \"PERCENT\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TABLE_HEADER\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 6\n          },\n          {\n            \"elementId\": 122,\n            \"elementName\": \"AP_DROP_DOWN\",\n            \"elementDisplayPlaceHolder\": \"UPTO_10_ACCOUNTS\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"DROPDOWN\",\n            \"defaultDisplay\": \"N\",\n            \"sortOrder\": 1\n          },\n          {\n            \"elementId\": 123,\n            \"elementName\": \"AP_DROP_DOWN\",\n            \"elementDisplayPlaceHolder\": \"ALL_ACCOUNTS\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"DROPDOWN\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 2\n          }\n        ]\n      },\n      {\n        \"componentName\": \"ASSET_CATEGORY\",\n        \"componentId\": 4,\n        \"htmlId\": \"asset_category\",\n        \"layoutRow\": \"4\",\n        \"layoutColumn\": \"2\",\n        \"width\": \"40\",\n        \"divPosition\": \"null\",\n        \"uiProperties\": \"{\\\"cols\\\":4,\\\"rows\\\":3,\\\"x\\\":6,\\\"y\\\":4,\\\"maxItemRows\\\":3,\\\"minItemRows\\\":3,\\\"htmlId\\\":\\\"asset_category\\\",\\\"dragEnabled\\\":true,\\\"resizeEnabled\\\":true,\\\"totalCols\\\":10}\",\n        \"elementsList\": [\n          {\n            \"elementId\": 112,\n            \"elementName\": \"comp_title\",\n            \"elementDisplayPlaceHolder\": \"Component Title\",\n            \"elementValue\": \"Asset Type\",\n            \"elementCategory\": \"TEXT_BOX\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 1\n          },\n          {\n            \"elementId\": 113,\n            \"elementName\": \"ASTALLOC\",\n            \"elementDisplayPlaceHolder\": \"ASSET_TYPE\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"DROPDOWN\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 1\n          },\n          {\n            \"elementId\": 114,\n            \"elementName\": \"ASTALLOC\",\n            \"elementDisplayPlaceHolder\": \"INVESTMENT_STYLE\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"DROPDOWN\",\n            \"defaultDisplay\": \"N\",\n            \"sortOrder\": 2\n          },\n          {\n            \"elementId\": 131,\n            \"elementName\": \"ACL_1_DROP_DOWN\",\n            \"elementDisplayPlaceHolder\": \"UPTO 5 ASSET CATEGORIES\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"DROPDOWN\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 1\n          },\n          {\n            \"elementId\": 132,\n            \"elementName\": \"ACL_1_DROP_DOWN\",\n            \"elementDisplayPlaceHolder\": \"UPTO 10 ASSET CATEGORIES\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"DROPDOWN\",\n            \"defaultDisplay\": \"N\",\n            \"sortOrder\": 2\n          },\n          {\n            \"elementId\": 133,\n            \"elementName\": \"ACL_1_DROP_DOWN\",\n            \"elementDisplayPlaceHolder\": \"UPTO 15 ASSET CATEGORIES\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"DROPDOWN\",\n            \"defaultDisplay\": \"N\",\n            \"sortOrder\": 3\n          },\n          {\n            \"elementId\": 134,\n            \"elementName\": \"ACL_1_DROP_DOWN\",\n            \"elementDisplayPlaceHolder\": \"ALL ASSET CATEGORIES\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"DROPDOWN\",\n            \"defaultDisplay\": \"N\",\n            \"sortOrder\": 4\n          },\n          {\n            \"elementId\": 135,\n            \"elementName\": \"ACL_2_DROP_DOWN\",\n            \"elementDisplayPlaceHolder\": \"UPTO 5 INVESTMENT STYLES\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"DROPDOWN\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 1\n          },\n          {\n            \"elementId\": 136,\n            \"elementName\": \"ACL_2_DROP_DOWN\",\n            \"elementDisplayPlaceHolder\": \"UPTO 10 INVESTMENT STYLES\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"DROPDOWN\",\n            \"defaultDisplay\": \"N\",\n            \"sortOrder\": 2\n          },\n          {\n            \"elementId\": 137,\n            \"elementName\": \"ACL_2_DROP_DOWN\",\n            \"elementDisplayPlaceHolder\": \"UPTO 15 INVESTMENT STYLES\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"DROPDOWN\",\n            \"defaultDisplay\": \"N\",\n            \"sortOrder\": 3\n          },\n          {\n            \"elementId\": 138,\n            \"elementName\": \"ACL_2_DROP_DOWN\",\n            \"elementDisplayPlaceHolder\": \"ALL INVESTMENT STYLES\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"DROPDOWN\",\n            \"defaultDisplay\": \"N\",\n            \"sortOrder\": 4\n          }\n        ]\n      },\n      {\n        \"componentName\": \"REPORT_FOOTER\",\n        \"componentId\": 5,\n        \"htmlId\": \"report_footer\",\n        \"layoutRow\": \"5\",\n        \"layoutColumn\": \"1\",\n        \"width\": \"100\",\n        \"divPosition\": \"null\",\n        \"uiProperties\": \"{\\\"cols\\\":10,\\\"rows\\\":1,\\\"x\\\":0,\\\"y\\\":9,\\\"maxItemRows\\\":1,\\\"minItemRows\\\":1,\\\"htmlId\\\":\\\"report_footer\\\",\\\"dragEnabled\\\":false,\\\"resizeEnabled\\\":false,\\\"totalCols\\\":10}\",\n        \"elementsList\": [\n          {\n            \"elementId\": 103,\n            \"elementName\": \"PREPARED_BY\",\n            \"elementDisplayPlaceHolder\": \"PREPARED BY\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"TEXT_BOX\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 1\n          }\n        ]\n      },\n      {\n        \"componentName\": \"PORTFOLIO_SUMMARY\",\n        \"componentId\": 6,\n        \"htmlId\": \"portfolio_summary\",\n        \"layoutRow\": \"3\",\n        \"layoutColumn\": \"1\",\n        \"width\": \"100\",\n        \"divPosition\": \"null\",\n        \"uiProperties\": \"{\\\"cols\\\":10,\\\"rows\\\":1,\\\"x\\\":0,\\\"y\\\":3,\\\"maxItemRows\\\":1,\\\"minItemRows\\\":1,\\\"htmlId\\\":\\\"portfolio_summary\\\",\\\"dragEnabled\\\":true,\\\"resizeEnabled\\\":true,\\\"totalCols\\\":10}\",\n        \"elementsList\": [\n          {\n            \"elementId\": 112,\n            \"elementName\": \"comp_title\",\n            \"elementDisplayPlaceHolder\": \"Component Title\",\n            \"elementValue\": \"Gain/Loss\",\n            \"elementCategory\": \"TEXT_BOX\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 1\n          },\n          {\n            \"elementId\": 115,\n            \"elementName\": \"realized\",\n            \"elementDisplayPlaceHolder\": \"Realized\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"CHECK_BOX\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 1\n          },\n          {\n            \"elementId\": 116,\n            \"elementName\": \"unrealized\",\n            \"elementDisplayPlaceHolder\": \"Unrealized\",\n            \"elementValue\": \"null\",\n            \"elementCategory\": \"CHECK_BOX\",\n            \"defaultDisplay\": \"Y\",\n            \"sortOrder\": 2\n          }\n        ]\n      }\n    ],\n    \"requestId\": \"20200523155749916\"\n  }"
                }
            ],
            "projects/report-builder/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/report-builder/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/report-builder/src/test.ts",
                    "type": "literal type"
                }
            ],
            "projects/wri-common/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/wri-common/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/wri-common/src/test.ts",
                    "type": "literal type"
                }
            ],
            "projects/wri-header/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/wri-header/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/wri-header/src/test.ts",
                    "type": "literal type"
                }
            ],
            "projects/wri-footer/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/wri-footer/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/wri-footer/src/test.ts",
                    "type": "literal type"
                }
            ],
            "projects/wri-holdings/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/wri-holdings/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/wri-holdings/src/test.ts",
                    "type": "literal type"
                }
            ],
            "projects/report-builder/src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/report-builder/src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "projects/report-builder/src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/report-builder/src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
                }
            ],
            "stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  component: Header,\n  props: args,\n})"
                }
            ],
            "stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  component: Page,\n  props: args,\n})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "projects/report-builder/src/app/common/messaging/messaging.component.ts": [
                {
                    "name": "MessageDisplayType",
                    "childs": [
                        {
                            "name": "INPAGE",
                            "value": "inpage"
                        },
                        {
                            "name": "MODAL",
                            "value": "modal"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "projects/report-builder/src/app/common/messaging/messaging.component.ts"
                },
                {
                    "name": "MessageType",
                    "childs": [
                        {
                            "name": "CONFIRM",
                            "value": "confirm"
                        },
                        {
                            "name": "INFORM",
                            "value": "inform"
                        },
                        {
                            "name": "ERROR",
                            "value": "error"
                        },
                        {
                            "name": "WARN",
                            "value": "warn"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "projects/report-builder/src/app/common/messaging/messaging.component.ts"
                }
            ],
            "projects/report-builder/src/app/page/report-builder/section.ts": [
                {
                    "name": "PageType",
                    "childs": [
                        {
                            "name": "SinglePage"
                        },
                        {
                            "name": "MultiPage"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "projects/report-builder/src/app/page/report-builder/section.ts"
                },
                {
                    "name": "SectionType",
                    "childs": [
                        {
                            "name": "Header"
                        },
                        {
                            "name": "Footer"
                        },
                        {
                            "name": "Fixed"
                        },
                        {
                            "name": "Dynamic"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "projects/report-builder/src/app/page/report-builder/section.ts"
                }
            ],
            "projects/report-builder/src/app/page/report-list/report-list.service.ts": [
                {
                    "name": "ReportType",
                    "childs": [
                        {
                            "name": "Custom",
                            "value": "C"
                        },
                        {
                            "name": "Default",
                            "value": "D"
                        },
                        {
                            "name": "FIDefault",
                            "value": "F"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "projects/report-builder/src/app/page/report-list/report-list.service.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "projects/report-builder/src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "component": "ReportListComponent"
                    },
                    {
                        "path": "design",
                        "component": "ReportBuilderComponent"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "projects/report-builder/e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/report-builder/src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/report-builder/src/app/common/filter-array.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "FilterArrayPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/report-builder/src/app/common/messaging/messaging.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MessagingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "projects/report-builder/src/app/common/messaging/messaging.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SimpleMessage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AccountPerformance",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "accountPerformanceMultiSelection1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "accountPerformanceSet1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "accountPerformanceSets",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ACL",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "aclMultiSelection1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "aclMultiSelection2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "aclSet1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "aclSet2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ACLValueSets",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "changeInValueSubSelections",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Holdings",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "holdingsMultiSelection",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "holdingsSet1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "holdingsValueSets",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "netContributionSubSelections",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PortfolioReturn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PortfolioReturnR1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PortfolioReturnSets",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PortfolioReturnSetsR1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "rowMultiSelection1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "rowMultiSelection3",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "set1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "set3",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/report-builder/src/app/common/multi-selection/MultiSelectionComponent.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/report-builder/src/app/common/multi-selection/multi-selection.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MultiSelectionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/27",
                "status": "low"
            },
            {
                "filePath": "projects/report-builder/src/app/common/multi-selection/multi-selection.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MultiSelectSet",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/report-builder/src/app/common/multi-selection/multi-selection.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MultiSelectSelection",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/report-builder/src/app/common/multi-selection/multi-selection.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SingleOptionSet",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/report-builder/src/app/common/multi-selection/multi-selection.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SingleSelection",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/report-builder/src/app/common/purify-html.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "PurifyHTMLPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/report-builder/src/app/component/base-report-builder-component.class.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BaseReportBuilderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/report-builder/src/app/component/footer-report-builder/footer-report-builder.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FooterReportBuilderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/report-builder/src/app/component/graph-report-builder/graph-report-builder.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GraphReportBuilderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/report-builder/src/app/component/graph-table-report-builder/graph-table-report-builder.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GraphTableReportBuilderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/report-builder/src/app/component/header-report-builder/header-report-builder.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderReportBuilderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/report-builder/src/app/component/holdings-report-builder/holdings-customization.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HoldingsCustomizationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/41",
                "status": "low"
            },
            {
                "filePath": "projects/report-builder/src/app/component/holdings-report-builder/holdings-report-builder.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HoldingsReportBuilderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/report-builder/src/app/component/summary/summary-customization.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SummaryCustomizationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/29",
                "status": "low"
            },
            {
                "filePath": "projects/report-builder/src/app/component/summary/summary-customization.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Safe",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/report-builder/src/app/component/summary/summary.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SummaryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/report-builder/src/app/core/http-auth.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "HttpAuthInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/report-builder/src/app/core/http-error.interceptor.ts",
                "type": "class",
                "linktype": "classe",
                "name": "HttpErrorInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/report-builder/src/app/page/report-builder/report-builder.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ReportBuilderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "projects/report-builder/src/app/page/report-builder/report.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ReportService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/report-builder/src/app/page/report-builder/save-report/save-report.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SaveReportComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/report-builder/src/app/page/report-builder/section.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Section",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "projects/report-builder/src/app/page/report-builder/section.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Safe",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/report-builder/src/app/page/report-list/mock-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "allReportsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/report-builder/src/app/page/report-list/mock-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "componentData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/report-builder/src/app/page/report-list/mock-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "env",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/report-builder/src/app/page/report-list/mock-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PVB_CHART_OPTIONS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/report-builder/src/app/page/report-list/mock-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reportData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/report-builder/src/app/page/report-list/report-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ReportListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/report-builder/src/app/page/report-list/report-list.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ReportListService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/report-builder/src/app/page/report-list/report-list.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ReportCategory",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/report-builder/src/app/page/report-list/report-list.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ReportList",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/report-builder/src/app/page/report-list/report-list.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ReportSummary",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/report-builder/src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/report-builder/src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/report-builder/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/report-builder/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/wri-common/src/lib/elements.ts",
                "type": "class",
                "linktype": "classe",
                "name": "element",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/wri-common/src/lib/wri-common.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WriCommonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/wri-common/src/lib/wri-common.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "WriCommonService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/wri-common/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/wri-common/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/wri-footer/src/lib/wri-footer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WRIFooterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/wri-footer/src/lib/wri-footer.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "WRIFooterService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/wri-footer/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/wri-footer/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/wri-header/src/lib/wri-header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WRIHeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/wri-header/src/lib/wri-header.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "WRIHeaderService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/wri-header/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/wri-header/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/wri-holdings/src/lib/wri-holdings.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WRIHoldingsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/wri-holdings/src/lib/wri-holdings.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AvailableColumnOptions",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/wri-holdings/src/lib/wri-holdings.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CategorizedData",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/wri-holdings/src/lib/wri-holdings.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Category",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/wri-holdings/src/lib/wri-holdings.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "WRIHoldingsService",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/wri-holdings/src/lib/wri-holdings.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DataColumn",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/wri-holdings/src/lib/wri-holdings.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "HoldingsCustomizationOptions",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/wri-holdings/src/lib/wri-holdings.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Selection",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/wri-holdings/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/wri-holdings/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            }
        ]
    }
}